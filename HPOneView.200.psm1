##############################################################################
# HPE OneView PowerShell Library
##############################################################################
##############################################################################
## (C) Copyright 2013-2015 Hewlett Packard Enterprise Development LP 
##############################################################################
<#

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

#>

<#
 Note: This library requires the following installed:
 Microsoft .NET Framework 4.0: http://go.microsoft.com/fwlink/?LinkID=212547 
 Windows PowerShell 3: http://www.microsoft.com/en-us/download/details.aspx?id=34595
#>

#Revision History
#------------------------------------------
<#
	Moved to \en-US\about_HPOneView.200.help.txt
#>

#Set HPOneView POSH Library Version
#Increment 3rd string by taking todays day (e.g. 23) and hour in 24hr format (e.g. 14), and adding to the prior value.
[version]$script:ModuleVersion = "2.0.40.0"
$Global:CallStack = Get-PSCallStack
$verbose = ($Global:CallStack | ? { $_.Command -eq "<ScriptBlock>" }).position.text -match "-verbose"

#Check to see if another module is loaded in the console, but allow Import-Module to process normally if user specifies the same module name
if ($(get-module -name HPOneView*) -and (-not $(get-module -name HPOneView* | % { $_.name -eq "HPOneView.200"}))) { 

    write-Host "CRITICAL:  Another HP OneView module is already loaded:  "  -ForegroundColor Yellow -BackgroundColor Black 
    Write-Host "  |"  -ForegroundColor Yellow -BackgroundColor Black 
    get-module -name HPOneView* | % { write-host "  |--> $($_.name) ($($_.Version))"  -ForegroundColor Yellow -BackgroundColor Black }
    write-host ""

    [System.String]$Exception = 'InvalidOperationException'
    [System.String]$ErrorId = 'CannotLoadMultipleLibraries'
    [System.Object]$TargetObject = 'Import-Module HPOneView.200'
    [System.Management.Automation.ErrorCategory]$ErrorCategory = 'ResourceExists'
    [System.String]$Message = 'Another HP OneView module is already loaded.  The HP OneView PowerShell library does not support loading multiple versions of libraries within the same console.'
    
    $_exception = New-Object $Exception $Message
    $errorRecord = New-Object Management.Automation.ErrorRecord $_exception, $ErrorID, $ErrorCategory, $TargetObject
    throw $errorRecord

}

#Compile custom C# code when module is loaded.
$CSharpProvider = New-Object Microsoft.CSharp.CSharpCodeProvider
$Compiler = $CSharpProvider.CreateCompiler()
$Params = New-Object System.CodeDom.Compiler.CompilerParameters
$Params.GenerateExecutable = $False
$Params.GenerateInMemory = $True
$Params.IncludeDebugInformation = $False
[Void]$Params.ReferencedAssemblies.Add("System.DLL")
$Source = @"
using System;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Net;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Authentication;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
//using System.Management.Automation;
//using System.Management.Automation.PSObject;

public static class EnumExtensions
{

    // This extension method is broken out so you can use a similar pattern with 
    // other MetaData elements in the future. This is your base method for each.
    public static T GetAttribute<T>(this Enum value) where T : Attribute
    {
        var type = value.GetType();
        var memberInfo = type.GetMember(value.ToString());
        var attributes = memberInfo[0].GetCustomAttributes(typeof(T), false);
        return (T)attributes[0];
    }

    // This method creates a specific call to the above method, requesting the
    // Description MetaData attribute.
    public static string ToName(this Enum value)
    {
        var attribute = value.GetAttribute<DescriptionAttribute>();
        return attribute == null ? value.ToString() : attribute.Description;
    }

}

namespace HPOneView
{

    namespace PKI
    {

        public class SslCertificate
        {

            public X509Certificate2 Certificate;
            public string Issuer;
            public string Subject;
            public string SubjectAlternativeNames;
            public bool CertificateIsValid;
            public string ErrorInformation;

        }

    }

    namespace Library
    {

        public class ApiCallException : Exception
        {
            public ApiCallException() : base() { }
            public ApiCallException(string message) : base(message) { }
            public ApiCallException(string message, Exception e) : base(message, e) { }
            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }
                set
                {
                    strExtraInfo = value;
                }

            }

        }

        public class UpdateConnectionError : Exception
        {

            public UpdateConnectionError() : base() { }
            public UpdateConnectionError(string message) : base(message) { }
            public UpdateConnectionError(string message, Exception e) : base(message, e) { }


            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }
            }
        }

        public class TooNew : Exception
        {

            public TooNew() : base() { }
            public TooNew(string message) : base(message) { }
            public TooNew(string message, Exception e) : base(message, e) { }


            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

    }

    namespace Networking
    {

        public enum ResourceTypeVersion
        {
                
            [Description("ethernet-networkV3")]
            EthernetNetwork,

            [Description("fcoe-network")]
            FcoeNetwork,

            [Description("fc-networkV2")]
            FcNetwork

        }
        public enum ResourceCategory
        {

            [Description("ethernet-networks")]
            EthernetNetworks,

            [Description("fc-networks")]
            FcNetworks,

            [Description("fcoe-networks")]
            FcoeNetworks

        }

        public enum EthernetNetworkTypes
        {
            [Description("Tagged")]
            Tagged,

            [Description("Tunnel")]
            Tunnel,

            [Description("Untagged")]
            Untagged

        }

        public enum FcFabricTypes
        {

            [Description("FabricAttach")]
            FabricAttach,

            [Description("DirectAttach")]
            DirectAttach

        }

        public enum EthernetNetworkPurpose
        {

            FaultTolerance,
            General,
            Management,
            VMMigration

        }

        //HPOneView.Networking.Networks.Ethernet
        public class EthernetNetwork
        {

            private string _type = ResourceTypeVersion.EthernetNetwork.ToName();
            private string _fabricUri;
            private string _ethernetNetworkType = EthernetNetworkTypes.Tunnel.ToString();
            private int _vlanId = 1;
            private string _connectionTemplateUri;
            private bool _privateNetwork;
            private string _purpose = EthernetNetworkPurpose.General.ToString();
            private bool _smartLink;
            private string _description;
            private string _name;
            private string _state;
            private string _status;
            private string _category = ResourceCategory.EthernetNetworks.ToName();
            private string _eTag;
            private string _created;
            private string _modified;
            private string _uri;

            public string type
            {

                get { return _type; }
                set
                {

                    if (value != ResourceTypeVersion.EthernetNetwork.ToName())
                    {

                        throw new Exception("Invalid resource type property value '" + value + "'");

                    }

                    else
                    {

                        _type = ResourceTypeVersion.EthernetNetwork.ToName();

                    }

                }

            }
            public string fabricUri
            {

                get { return _fabricUri; }

                set { _fabricUri = value; }

            }
            public string ethernetNetworkType
            {
                    
                get { return _ethernetNetworkType; }

                set { _ethernetNetworkType = value; }

            }
            public int vlanId
            {

                get { return _vlanId; }

                set
                {

                    //if (value == 0 && ethernetNetworkType == EthernetNetworkTypes.Tunnel || value <= 4094 && value >= 1)
                    if (value == 0 && ethernetNetworkType == EthernetNetworkTypes.Tunnel.ToName() || value <= 4094 && value >= 1 )
                    {

                        _vlanId = value;

                    }
                    //else if (value > 0 && ethernetNetworkType == EthernetNetworkTypes.Tunnel)
                    else if (value > 0 && ethernetNetworkType == EthernetNetworkTypes.Tunnel.ToName())
                    {
                    
                        throw new Exception("vlanId must be 0 when ethernetNeworkType property is 'Tunnel'.");
                    
                    }
                    else
                    {
                    
                        throw new Exception("vlanId must be between 1 and 4096. " + value + " is outside the allowed range.");
                    
                    }

                }

            }
            public string connectionTemplateUri
            {

                get { return _connectionTemplateUri; }

                set { _connectionTemplateUri = value; }

            }
            public bool privateNetwork
            {

                get { return _privateNetwork; }

                set { _privateNetwork = value; }

            }
            public string purpose
            {

                get { return _purpose; }

                set { _purpose = value; }

            }
            public bool smartLink
            {

                get { return _smartLink; }

                set { _smartLink = value; }

            }
            public string description
            {

                get { return _description; }

                set { _description = value; }

            }
            public string name
            {

                get { return _name; }

                set { _name = value; }

            }
            public string state
            {

                get { return _state; }

                set { _state = value; }

            }
            public string status
            {

                get { return _status; }

                set { _status = value; }

            }
            public string category
            {

                get { return _category; }

                set { _category = value; }

            }
            public string eTag
            {

                get { return _eTag; }

                set { _eTag = value; }

            }
            public string created
            {

                get { return _created; }

                set { _created = value; }

            }
            public string modified
            {

                get { return _modified; }

                set { _modified = value; }

            }
            public string uri
            {

                get { return _uri; }

                set { _uri = value; }

            }

            public static T ConvertValue<T, U>(U value) where U : IConvertible
            {
                return (T)Convert.ChangeType(value, typeof(T));
            }

        }

        //HPOneView.Networking.Networks.FibreChannel
        public class FibreChannelNetwork
        {

            private string _fabricType = FcFabricTypes.FabricAttach.ToName();
            private string _connectionTemplateUri;
            private string _linkStabilityTime;
            private string _managedSanUri;
            private bool _autoLoginRedistribution;
            private string _description;
            private string _name;
            private string _state;
            private string _status;
            private string _category = ResourceCategory.FcNetworks.ToName();
            private string _type = ResourceTypeVersion.FcNetwork.ToName();
            private string _eTag;
            private string _created;
            private string _modified;
            private string _uri;

            public string type
            {

                get { return _type; }
                set
                {

                    if (value != ResourceTypeVersion.FcNetwork.ToName())
                    {
                    
                        throw new Exception("Invalid resource type property value '" + value + "'");
                    
                    }
                    
                    else
                    {

                        _type = ResourceTypeVersion.FcNetwork.ToName();

                    }

                }

            }

            public string fabricType
            {

                get { return _fabricType; }
                set { _fabricType = value; }

            }

            public string connectionTemplateUri
            {

                get { return _connectionTemplateUri; }

                set { _connectionTemplateUri = value; }

            }

            public string linkStabilityTime
            {

                get { return _linkStabilityTime; }

                set { _linkStabilityTime = value; }

            }

            public string managedSanUri
            {

                get { return _managedSanUri; }

                set { _managedSanUri = value; }

            }

            public bool autoLoginRedistribution
            {

                get { return _autoLoginRedistribution; }

                set { _autoLoginRedistribution = value; }

            }

            public string description
            {

                get { return _description; }

                set { _description = value; }

            }

            public string name
            {

                get { return _name; }

                set { _name = value; }

            }

            public string state
            {

                get { return _state; }

                set { _state = value; }

            }

            public string status
            {

                get { return _status; }

                set { _status = value; }

            }

            public string category
            {

                get { return _category; }

                set
                {
                        
                        if (value != ResourceCategory.FcNetworks.ToName())
                    {

                        throw new Exception("Invalid resource category property value '" + value + "'");

                    }

                    else
                    {

                        _category = ResourceCategory.FcNetworks.ToName();

                    }

                }

            }

            public string eTag
            {

                get { return _eTag; }

                set { _eTag = value; }

            }

            public string created
            {

                get { return _created; }

                set { _created = value; }

            }

            public string modified
            {

                get { return _modified; }

                set { _modified = value; }

            }

            public string uri
            {

                get { return _uri; }

                set { _uri = value; }

            }

        }

        //HPOneView.Networking.Networks.FCoE
        public class FCoENetwork
        {

            private string _fabricUri;
            private int _vlanId;
            private string _connectionTemplateUri;
            private string _managedSanUri;
            private string _description;
            private string _name;
            private string _state;
            private string _status;
            private string _category = ResourceCategory.FcoeNetworks.ToName();
            private string _type = ResourceTypeVersion.FcoeNetwork.ToName();
            private string _eTag;
            private string _created;
            private string _modified;
            private string _uri;

            public string fabricUri
            {

                get { return _fabricUri; }

                set { _fabricUri = value; }

            }

            public int vlanId
            {

                get { return _vlanId; }

                set
                {

                    if (value <= 4094 && value > 1)
                    {

                        _vlanId = value;

                    }
                    else
                    {

                        throw new Exception("VLANID must be between 2 and 4094. " + value + " is outside the allowed range.");

                    }

                }

            }

            public string connectionTemplateUri
            {

                get { return _connectionTemplateUri; }

                set { _connectionTemplateUri = value; }

            }

            public string managedSanUri
            {

                get { return _managedSanUri; }

                set { _managedSanUri = value; }

            }

            public string description
            {

                get { return _description; }

                set { _description = value; }

            }

            public string name
            {

                get { return _name; }

                set { _name = value; }

            }

            public string state
            {

                get { return _state; }

                set { _state = value; }

            }

            public string status
            {

                get { return _status; }

                set { _status = value; }

            }

            public string category
            {

                get { return _category; }

                set
                {

                    if (value != ResourceCategory.FcoeNetworks.ToName())
                    {

                        throw new Exception("Invalid resource category property value '" + value + "'.  Expected Category: " + ResourceCategory.FcoeNetworks.ToName());

                    }

                    else
                    {

                        _category = ResourceCategory.FcoeNetworks.ToName();

                    }

                }

            }

            public string type
            {

                get { return _type; }
                set
                {

                    if (value != ResourceTypeVersion.FcoeNetwork.ToName())
                    {

                        throw new Exception("Invalid resource type property value '" + value + "'");

                    }

                    else
                    {

                        _type = ResourceTypeVersion.FcoeNetwork.ToName();

                    }

                }

            }

            public string eTag
            {

                get { return _eTag; }

                set { _eTag = value; }

            }

            public string created
            {

                get { return _created; }

                set { _created = value; }

            }

            public string modified
            {

                get { return _modified; }

                set { _modified = value; }

            }

            public string uri
            {

                get { return _uri; }

                set { _uri = value; }

            }

        }

        namespace QoS
        {

            public class BaseTrafficClass : Hashtable
            {

                private class _qosTrafficClass : Hashtable
                {

                    private int _maxBandwidth = 100;
                    private string _bandwidthShare = "0";
                    private int _egressDot1pValue = 0;
                    private bool _realTime = false;
                    private string _className = "Class";
                    private bool _enabled = false;

                    public int maxBandwidth
                    {
                        get { return _maxBandwidth; }
                        set { _maxBandwidth = value; }
                    }

                    public string bandwidthShare
                    {
                        get { return _bandwidthShare; }
                        set { _bandwidthShare = value; }
                    }

                    public int egressDot1pValue
                    {
                        get { return _egressDot1pValue; }
                        set { _egressDot1pValue = value; }
                    }

                    public bool realTime
                    {
                        get { return _realTime; }
                        set { _realTime = value; }
                    }

                    public string className
                    {
                        get { return _className; }
                        set { _className = value; }
                    }

                    public bool enabled
                    {
                        get { return _enabled; }
                        set { _enabled = value; }
                    }

                }

                private class _qosClassificationMapping : Hashtable
                {

                    private ArrayList _dot1pClassMapping;
                    private ArrayList _dscpClassMapping;

                    public ArrayList dot1pClassMapping //: ArrayList
                    {
                        get { return _dot1pClassMapping; }
                        set { _dot1pClassMapping = value; }
                    }

                    public ArrayList dscpClassMapping
                    {
                        get { return _dscpClassMapping; }
                        set { _dscpClassMapping = value; }
                    }

                }

                public BaseTrafficClass()
                {

                    _qosTrafficClass qosTrafficClass = new _qosTrafficClass();
                    _qosClassificationMapping qosClassificationMapping = new _qosClassificationMapping();

                }

            }

        }

    }

    namespace Appliance
    {

        public class Connection
        {

            private int _connectionId = 1;
            private string _name = null;
            private string _sessionId = null;
            private string _userName = null;
            private string _authLoginDomain = null;
            private bool _sslChecked = false;

            public int ConnectionId
            {

                get { return _connectionId; }
                set
                {

                    _connectionId = value;

                }

            }

            public string Name
            {
                get { return _name; }
                set { _name = value; }

            }

            public string SessionID
            {
                get { return _sessionId; }
                set { _sessionId = value; }
            }

            public string UserName
            {
                get { return _userName; }
                set { _userName = value; }
            }

            public string AuthLoginDomain
            {
                get { return _authLoginDomain; }
                set { _authLoginDomain = value; }
            }

            public bool SslChecked
            {

                get { return _sslChecked; }
                set { _sslChecked = value; }

            }

        }

        public class Task
        {

 //"associatedResource": 
 //{
 //    "associationType": "MANAGED_BY",
 //    "resourceCategory": "enclosures",
 //    "resourceName": "enclosure1234",
 //    "resourceUri": "/rest/enclosures/ABCD123"
 //},
 //"associatedTaskUri":"associatedTaskUri",
 //"category":"tasks",
 //"completedSteps":0,
 //"computedPercentComplete":0,
 //"created":"2014-04-08T10:07:35.815Z",
 //"data":null,
 //"eTag":null,
 //"expectedDuration":0,
 //"hidden":false,
 //"modified":"2014-04-08T10:07:35.815Z",
 //"name":"mytask1",
 //"owner":"Administrator",
 //"parentTaskUri":"/rest/tasks/myparenttask",
 //"percentComplete":0,
 //"progressUpdates":[
 // {
 //    "id" : 1,
 //    "statusUpdate" : "Some update message"
 //    "timestamp" : "TIMESTAMP"
 // }
 //],
 //"stateReason":null,
 //"taskErrors":[ 
 // {
 //    data
 //    details         
 //    errorCode
 //
 // }       
 //],
 //"taskOutput":[ ],
 //"taskState":"Interrupted",
 //"taskStatus":"myresults",
 //"taskType":"Appliance",
 //"totalSteps":0,
 //"type":"TaskResourceV2",
 //"uri":"/rest/tasks/FD73016A-827C-4AAC-8527-8469288A38B3",
 //"userInitiated":false            

            private Array _associatedResource = null;
            private string _associatedTaskUri = null;
            private string _category = "tasks";
            private int _completedSteps;
            private int _computedPercentComplete;
            private string _created = null;
            private string _data = null;
            private string _eTag = null;
            private int _expectedDuration;
            private bool _hidden;
            private string _modified;
            private string _name;
            private string _owner;
            private string _parentTaskUri;
            private int _percentComplete;
            private IDictionary _progressUpdates;
            private string _stateReason;
            private IDictionary _taskErrors;
            private string _taskOutput;
            private string _taskState;
            private string _taskStatus;
            private string _taskType;
            private int _totalSteps;
            private string _type = "TaskResourceV2";
            private string _uri;
            private bool _userInitiated;

            private class AssociatedResource //: Hashtable
            {

                public string associationType;
                public string resourceCategory;
                public string resourceName;
                public string resourceUri;

                public AssociatedResource()
                {

                    //return new AssociatedResource;

                }

            }

            //public IDictionary associatedResource
            //{
            //
            //    //get { return _associatedResource; }
            //    //set { _associatedResource = value; }
            //
            //}

            public string associatedTaskUri
            {
                get { return _associatedTaskUri; }
                set { _associatedTaskUri = value; }

            }

            public string category
            {
                get { return _category; }
                set { _category = value; }
            }

            public int completedSteps
            {
                get { return _completedSteps; }
                set { _completedSteps = value; }
            }

            public int computedPercentComplete
            {
                get { return _computedPercentComplete; }
                set { _computedPercentComplete = value; }
            }

            public string created
            {

                get { return _created; }
                set { _created = value; }

            }

            public string data
            {

                get { return _data; }
                set { _data = value; }

            }

            public string eTag
            {

                get { return _eTag; }
                set { _eTag = value; }

            }

        }

        //Exceptions
        public class ResourcePrivledgeException : Exception
        {

            public ResourcePrivledgeException() : base() { }
            public ResourcePrivledgeException(string message) : base(message) { }
            public ResourcePrivledgeException(string message, Exception e) : base(message, e) { }


            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }
            }
        }

        public class PasswordChangeRequired : Exception
        {

            public PasswordChangeRequired() : base() { }
            public PasswordChangeRequired(string message) : base(message) { }
            public PasswordChangeRequired(string message, Exception e) : base(message, e) { }


            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }
            }
        }

        public class NetworkConnectionException : Exception
        {

            public NetworkConnectionException() : base() { }
            public NetworkConnectionException(string message) : base(message) { }
            public NetworkConnectionException(string message, Exception e) : base(message, e) { }


            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

        public class NetworkConfigurationException : Exception
        {

            public NetworkConfigurationException() : base() { }
            public NetworkConfigurationException(string message) : base(message) { }
            public NetworkConfigurationException(string message, Exception e) : base(message, e) { }


            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

        public class FirmwareUpdateException : Exception
        {

            public FirmwareUpdateException() : base() { }
            public FirmwareUpdateException(string message) : base(message) { }
            public FirmwareUpdateException(string message, Exception e) : base(message, e) { }

            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

        public class TaskValidationException : Exception
        {

            public TaskValidationException() : base() { }
            public TaskValidationException(string message) : base(message) { }
            public TaskValidationException(string message, Exception e) : base(message, e) { }

            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

        public class AuthSessionException : Exception
        {

            public AuthSessionException() : base() { }
            public AuthSessionException(string message) : base(message) { }
            public AuthSessionException(string message, Exception e) : base(message, e) { }

            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

        public class AuthPrivilegeException : Exception
        {

            public AuthPrivilegeException() : base() { }
            public AuthPrivilegeException(string message) : base(message) { }
            public AuthPrivilegeException(string message, Exception e) : base(message, e) { }

            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

        public class PasswordMismatch : Exception
        {

            public PasswordMismatch() : base() { }
            public PasswordMismatch(string message) : base(message) { }
            public PasswordMismatch(string message, Exception e) : base(message, e) { }

            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

        public class UserResourceException : Exception
        {

            public UserResourceException() : base() { }
            public UserResourceException(string message) : base(message) { }
            public UserResourceException(string message, Exception e) : base(message, e) { }

            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

        public class LdapDirectoryException : Exception
        {

            public LdapDirectoryException() : base() { }
            public LdapDirectoryException(string message) : base(message) { }
            public LdapDirectoryException(string message, Exception e) : base(message, e) { }

            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

		public class LdapDirectoryGroupException : Exception
        {

            public LdapDirectoryGroupException() : base() { }
            public LdapDirectoryGroupException(string message) : base(message) { }
            public LdapDirectoryGroupException(string message, Exception e) : base(message, e) { }

            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

        public class GlobalSettingException : Exception
        {

            public GlobalSettingException() : base() { }
            public GlobalSettingException(string message) : base(message) { }
            public GlobalSettingException(string message, Exception e) : base(message, e) { }

            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }
            }

        }

        public class LicenseKeyException : Exception
        {

            public LicenseKeyException() : base() { }
            public LicenseKeyException(string message) : base(message) { }
            public LicenseKeyException(string message, Exception e) : base(message, e) { }

            private string strExtraInfo;
            public string ExtraErrorInfo
            {
                get
                {
                    return strExtraInfo;
                }

                set
                {
                    strExtraInfo = value;
                }

            }

        }

    }

    public class EnclosureResourceException : Exception
    {

        public EnclosureResourceException() : base() { }
        public EnclosureResourceException(string message) : base(message) { }
        public EnclosureResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class LogicalEnclosureResourceException : Exception
    {

        public LogicalEnclosureResourceException() : base() { }
        public LogicalEnclosureResourceException(string message) : base(message) { }
        public LogicalEnclosureResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class ResourceNotFoundException : Exception
    {

        public ResourceNotFoundException() : base() { }
        public ResourceNotFoundException(string message) : base(message) { }
        public ResourceNotFoundException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class EnclosureGroupResourceException : Exception
    {

        public EnclosureGroupResourceException() : base() { }
        public EnclosureGroupResourceException(string message) : base(message) { }
        public EnclosureGroupResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class BaselineResourceException : Exception
    {

        public BaselineResourceException() : base() { }
        public BaselineResourceException(string message) : base(message) { }
        public BaselineResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class NetworkResourceException : Exception
    {

        public NetworkResourceException() : base() { }
        public NetworkResourceException(string message) : base(message) { }
        public NetworkResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class LogicalInterconnectGroupResourceException : Exception
    {

        public LogicalInterconnectGroupResourceException() : base() { }
        public LogicalInterconnectGroupResourceException(string message) : base(message) { }
        public LogicalInterconnectGroupResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class LogicalInterconnectResourceException : Exception
    {

        public LogicalInterconnectResourceException() : base() { }
        public LogicalInterconnectResourceException(string message) : base(message) { }
        public LogicalInterconnectResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class InterconnectResourceException : Exception
    {

        public InterconnectResourceException() : base() { }
        public InterconnectResourceException(string message) : base(message) { }
        public InterconnectResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class InterconnectTypeResourceException : Exception
    {

        public InterconnectTypeResourceException() : base() { }
        public InterconnectTypeResourceException(string message) : base(message) { }
        public InterconnectTypeResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class InterconnectPortResourceException : Exception
    {

        public InterconnectPortResourceException() : base() { }
        public InterconnectPortResourceException(string message) : base(message) { }
        public InterconnectPortResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class UplinkSetResourceException : Exception
    {

        public UplinkSetResourceException() : base() { }
        public UplinkSetResourceException(string message) : base(message) { }
        public UplinkSetResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class ServerHardwareResourceException : Exception
    {

        public ServerHardwareResourceException() : base() { }
        public ServerHardwareResourceException(string message) : base(message) { }
        public ServerHardwareResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class StorageSystemResourceException : Exception
    {

        public StorageSystemResourceException() : base() { }
        public StorageSystemResourceException(string message) : base(message) { }
        public StorageSystemResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

	public class StorageVolumeResourceException : Exception
    {

        public StorageVolumeResourceException() : base() { }
        public StorageVolumeResourceException(string message) : base(message) { }
        public StorageVolumeResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

	public class SanManagerResourceException : Exception
    {

        public SanManagerResourceException() : base() { }
        public SanManagerResourceException(string message) : base(message) { }
        public SanManagerResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class ServerProfileResourceException : Exception
    {

        public ServerProfileResourceException() : base() { }
        public ServerProfileResourceException(string message) : base(message) { }
        public ServerProfileResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class ServerProfileConnectionException : Exception
    {

        public ServerProfileConnectionException() : base() { }
        public ServerProfileConnectionException(string message) : base(message) { }
        public ServerProfileConnectionException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class UnmanagedDeviceResourceException : Exception
    {

        public UnmanagedDeviceResourceException() : base() { }
        public UnmanagedDeviceResourceException(string message) : base(message) { }
        public UnmanagedDeviceResourceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class PowerDeliveryDeviceException : Exception
    {

        public PowerDeliveryDeviceException() : base() { }
        public PowerDeliveryDeviceException(string message) : base(message) { }
        public PowerDeliveryDeviceException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

    public class VcMigratorException : Exception
    {

        public VcMigratorException() : base() { }
        public VcMigratorException(string message) : base(message) { }
        public VcMigratorException(string message, Exception e) : base(message, e) { }

        private string strExtraInfo;
        public string ExtraErrorInfo
        {
            get
            {
                return strExtraInfo;
            }

            set
            {
                strExtraInfo = value;
            }

        }

    }

	public class ITempPolicy : ICertificatePolicy {
        public ITempPolicy() {}
        public bool CheckValidationResult(
            ServicePoint sPoint, X509Certificate cert,
            WebRequest wRequest, int certProb) {
            return true;
        }
    }

}

"@

$Global:CompileResults = $CSharpProvider.CompileAssemblyFromSource($Params,$Source)
$Assembly = $Global:CompileResults.CompiledAssembly

if ($Global:CompileResults.Errors -and (-not($Assembly))) {

	[System.String]$Exception = 'InvalidOperationException'
    [System.String]$ErrorId = 'CSharpCompileFailure'
    [System.Object]$TargetObject = 'CSharpSource'
    [System.Management.Automation.ErrorCategory]$ErrorCategory = 'InvalidResult'
    [System.String]$Message = "Line {0}, Column {1}. {2}" -f $Global:CompileResults.Errors[0].Line,$Global:CompileResults.Errors[0].Column,$Global:CompileResults.Errors[0].ErrorText
    
    $_exception = New-Object $Exception $Message
    $errorRecord = New-Object Management.Automation.ErrorRecord $_exception, $ErrorID, $ErrorCategory, $TargetObject
    throw $errorRecord

}

$debugMode = $False

#Note: Set $debugPreference to control debug logging
If ($debugmode) 
{

    $debugPreference = "Continue"         # Display requests and responses
    $VerbosePreference = "Continue" 

}
#Else{ $debugPreference = "SilentlyContinue" } # Hide debug messages

#region
[String]$script:AuthProviderSetting = "LOCAL"
${Global:ConnectedSessions}         = New-Object System.Collections.ArrayList
${Global:ResponseErrorObject}       = New-Object System.Collections.ArrayList
[TimeSpan]$script:defaultTimeout    = New-TimeSpan -Minutes 20
$script:FSOpenMode                  = [System.IO.FileMode]::Open
$script:FSRead                      = [System.IO.FileAccess]::Read
[MidpointRounding]$script:mode      = 'AwayFromZero' 
[String]$script:MaxXAPIVersion      = "200"
[String]$script:applMinVersion      = "200"
[String]$script:repository          = "https://api.github.com/repos/HewlettPackard/POSH-HPOneView/releases"

#------------------------------------
# Appliance Configuration
#------------------------------------
[String]$script:applEulaStatus         = "/rest/appliance/eula/status"
[String]$script:applEulaSave           = "/rest/appliance/eula/save"
[String]$script:applConfigUri          = "/rest/appliance/network-interfaces"
[string]$script:applDateTime           = '/rest/appliance/configuration/time-locale'
[String]$script:applGlobalSettingsUri  = "/rest/global-settings"
[String]$script:applXApiVersion        = "/rest/version"
[String]$script:applianceStartProgress = '/rest/appliance/progress'
[String]$script:applMacAddresses       = "/rest/appliance/network-interfaces/mac-addresses"
[String]$script:applBackup             = "/rest/backups"
[String]$script:applRestoreFile        = "/rest/backups/archive"
[String]$script:applRestore            = "/rest/restores"
[Hashtable]$script:progressStepEnum    = @{

	COMPLETED            = "Restore Completed";
	FAILED               = "Restore Failed";
	PREPARING_TO_RESTORE = "Preparing to Restore";
	RESTORING_DB         = "Restoring Database";
	RESTORING_FILES      = "Restoring Files";
	STARTING_SERVICES    = "Starting Services";
	UNKNOWN              = "The restore step is unknown"

}

[String]$script:applVersion              = "/rest/appliance/version"
[String]$script:applSupportDump          = "/rest/appliance/support-dumps"
[String]$script:applHealthStatus         = "/rest/appliance/health-status"
[String]$script:applRabbitmqUri          = "/rest/certificates/client/rabbitmq"
[String]$script:applKeypairUri           = "/rest/certificates/client/rabbitmq/keypair/default"
[String]$script:applCaUri                = "/rest/certificates/ca"
[String]$script:applUpdate               = "/rest/appliance/firmware/image"
[String]$script:applUpdatePending        = "/rest/appliance/firmware/pending"
[String]$script:applUpdateNotification   = "/rest/appliance/firmware/notification"
[String]$script:applUpdateMonitor        = "/cgi-bin/status/update-status.cgi"
[String]$script:applSnmpReadCommunity    = "/rest/appliance/device-read-community-string"
[String]$script:applianceRebootUri       = '/rest/appliance/shutdown?type=REBOOT'
[String]$script:applianceShutDownUri     = '/rest/appliance/shutdown?type=HALT'
[String]$script:applianceCsr             = '/rest/certificates/https/certificaterequest'
[String]$script:applianceSslCert         = '/rest/certificates/https'
[String]$Script:appliancePingTestUri     = '/rest/appliance/reachable'
[string]$script:applianceDebugLogSetting = '/logs/rest/debug/'
#------------------------------------
# Physical Resource Management
#------------------------------------
[String]$script:serversUri                   = "/rest/server-hardware"
[String]$script:serverHardwareTypesUri       = "/rest/server-hardware-types"
[String]$script:storageSystemUri             = "/rest/storage-systems"
[String]$script:storageVolumeUri             = "/rest/storage-volumes"
[String]$script:attachableVolumesUri         = '/rest/storage-volumes/attachable-volumes'
[String]$script:storageVolumeTemplateUri     = "/rest/storage-volume-templates"
[String]$script:storagePoolUri               = "/rest/storage-pools"
[String]$script:fcSanManagerProvidersUri     = "/rest/fc-sans/providers"  #list available SAN Manager plugins, and create SAN Manager
[Hashtable]$script:fcSanManagerSnmpAuthLevel = @{
	None        = "noauthnopriv";
	AuthOnly    = "authnopriv";
	AuthAndPriv = "authpriv"
}
[String]$script:fcSanManagersUri                 = "/rest/fc-sans/device-managers" #created SAN Managers
[String]$script:fcManagedSansUri                 = "/rest/fc-sans/managed-sans" #Discovered managed SAN(s) that the added SAN Manager will manage
[String]$script:enclosuresUri                    = "/rest/enclosures"
[String]$script:logicalEnclosuresUri             = "/rest/logical-enclosures"
[String]$script:enclosureGroupsUri               = "/rest/enclosure-groups"
[String]$script:enclosurePreviewUri              = "/rest/enclosure-preview"
[String]$script:fwUploadUri                      = "/rest/firmware-bundles"
[String]$script:fwDriversUri                     = "/rest/firmware-drivers"
[String]$script:powerDevicesUri                  = "/rest/power-devices"
[String]$script:powerDevicesDiscoveryUri         = "/rest/power-devices/discover"
[String]$script:powerDevicePotentialConnections  = "/rest/power-devices/potentialConnections?providerUri="
[String]$script:unmanagedDevicesUri              = "/rest/unmanaged-devices?sort=name:asc"
[PSCustomObject]$script:mpModelTable             = @{
	ilo2 = "RI7";
	ilo3 = "RI9";
	ilo4 = "RI10"
}
#------------------------------------
# Network Resource Management
#------------------------------------
[String]$script:networkSetsUri               = "/rest/network-sets"
[String]$script:ethNetworksUri               = "/rest/ethernet-networks"
[String]$script:fcNetworksUri                = "/rest/fc-networks"
[String]$script:fcoeNetworksUri              = "/rest/fcoe-networks"
[String]$script:connectionTemplatesUri       = "/rest/connection-templates"
[String]$script:logicalInterconnectGroupsUri = "/rest/logical-interconnect-groups"
[String]$script:logicalInterconnectsUri      = "/rest/logical-interconnects"
[String]$script:interconnectsUri             = "/rest/interconnects"
[String]$script:interconnectTypesUri         = "/rest/interconnect-types"
[String]$script:uplinkSetsUri                = "/rest/uplink-sets"
[String]$script:logicalDownlinksUri          = "/rest/logical-downlinks"
[String]$script:applVmacPoolsUri             = "/rest/id-pools/vmac"
[String]$script:applVmacPoolRangesUri        = "/rest/id-pools/vmac/ranges"
[String]$script:applVwwnPoolsUri             = "/rest/id-pools/vwwn"
[String]$script:applVwwnPoolRangesUri        = "/rest/id-pools/vwwn/ranges"
[String]$script:applVsnPoolsUri              = "/rest/id-pools/vsn"
[String]$script:applVsnPoolRangesUri         = "/rest/id-pools/vsn/ranges"
[String]$script:applVmacGenerateUri          = "/rest/id-pools/vmac/generate"
[String]$script:applVwwnGenerateUri          = "/rest/id-pools/vwwn/generate"
[String]$script:applVsnPoolGenerateUri       = "/rest/id-pools/vsn/generate"
$script:macAddressPattern                    = @('^([0-9a-f]{2}:){5}([0-9a-f]{2})$')
$script:wwnAddressPattern                    = @('^([0-9a-f]{2}:){7}([0-9a-f]{2})$')
$script:wwnLongAddressPattern                = @('^([0-9a-f]{2}:){15}([0-9a-f]{2})$')
[RegEx]$script:ip4regex                      = "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"
[Hashtable]$global:getUplinkSetPortSpeeds    = @{
    Speed0M   = "0";
    Speed100M = "100Mb";
    Speed10G  = "10Gb";
    Speed10M  = "10Mb";
    Speed1G   = "1Gb";
    Speed1M   = "1Mb";
    Speed20G  = "20Gb";
    Speed2G   = "2Gb";
    Speed2_5G = "2.5Gb";
    Speed40G  = "40Gb";
    Speed4G   = "4Gb";
    Speed8G   = "8Gb";
    Auto       = "Auto"
}

[Hashtable]$global:SetUplinkSetPortSpeeds = @{
    '0'    = "Speed0M";
    '100M' = "Speed100M";
	'100 ' = "Speed100M";
    '10G'  = "Speed10G";
	'10'   = "Speed10G";
    '10M'  = "Speed10M";
    '1G'   = "Speed1G";
    '1'    = "Speed1G";
    '1M'   = "Speed1M";
    '20G'  = "Speed20G";
    '2G'   = "Speed2G";
    '2'    = "Speed2G";
    '2.5G' = "Speed2_5G";
    '40G'  = "Speed40G";
    '4G'   = "Speed4G";
    '8G'   = "Speed8G";
    '4'    = "Speed4G";
    '8'    = "Speed8G";
    'Auto' = "Auto"
}

[Hashtable]$global:logicalInterconnectConsistencyStatusEnum = @{

	'CONSISTENT'     = "Consistent" 
	'NOT_CONSISTENT' = "Inconsistent with group" 

}
$Script:IngressDscpClassMappingValues = @('DSCP 18, AF21','DSCP 20, AF22','DSCP 22, AF23','DSCP 26, AF31','DSCP 28, AF32','DSCP 30, AF33','DSCP 34, AF41','DSCP 36, AF42','DSCP 38, AF43','DSCP 16, CS2','DSCP 24, CS3','DSCP 32, CS4','DSCP 10, AF11','DSCP 12, AF12','DSCP 14, AF13','DSCP 8, CS1','DSCP 0, CS0','DSCP 46, EF','DSCP 40, CS5','DSCP 48, CS6','DSCP 56, CS7')
#------------------------------------
#  Profile Management
#------------------------------------
$script:profilesUri                   = "/rest/server-profiles"
$script:profileIndexListUri           = "/rest/index/resources?sort=name:asc&category=server-profiles"
$script:profileAvailStorageSystemsUri = '/rest/server-profiles/available-storage-systems'
[pscustomobject]$script:profileSanManageOSType = @{
    CitrixXen = "Citrix Xen Server 5.x/6.x";
    AIX       = "AIX";
    IBMVIO    = "IBM VIO Server";
    RHEL4     = "RHE Linux (Pre RHEL 5)";
    RHEL3     = "RHE Linux (Pre RHEL 5)";
    RHEL      = "RHE Linux (5.x, 6.x)";
    RHEV      = "RHE Virtualization (5.x, 6.x)";
    VMware    = "ESX 4.x/5.x";
    Win2k3    = "Windows 2003";
    Win2k8    = "Windows 2008/2008 R2";
    Win2k12   = "Windows 2012 / WS2012 R2";
    OpenVMS   = "OpenVMS";
    Egenera   = "Egenera";
    Exanet    = "Exanet";
    Solaris9  = "Solaris 9/10";
    Solaris10 = "Solaris 9/10";
    Solaris11 = "Solaris 11";
    ONTAP     = "NetApp/ONTAP";
    OEL       = "OE Linux UEK (5.x, 6.x)";
    HPUX11iv1 = "HP-UX (11i v1, 11i v2)"
    HPUX11iv2 = "HP-UX (11i v1, 11i v2)";
    HPUX11iv3 = "HP-UX (11i v3)";
    SUSE      = "SuSE (10.x, 11.x)";
    SUSE9     = "SuSE Linux (Pre SLES 10)";
    Inform    = "InForm"
}
#------------------------------------
#  Index Search
#------------------------------------
$script:indexUri            = "/rest/index/resources" 
$script:associationsUri     = "/rest/index/associations"
$script:associationTreesUri = "/rest/index/trees"
#------------------------------------
#  Tasks
#------------------------------------
$script:allNonHiddenTaskUri = "/rest/tasks?filter=hidden=$false"
$script:taskUri             = "/rest/tasks"
$script:taskFinishedStates  = @(
	
	"Error",
	"Warning",
	"Completed",
	"Terminated",
	"Killed"
	
) 
#------------------------------------
#  Alerts and Events
#------------------------------------
$script:alertsUri              = "/rest/alerts"
$script:eventsUri              = "/rest/events"
$script:smtpNotificationConfig = "/rest/appliance/notifications/email-config"
$script:smtpTestNotification   = "/rest/appliance/notifications/send-email"
#------------------------------------
#  Licenses
#------------------------------------
$script:licensesUri = "/rest/licenses"
#------------------------------------
#  Security
#------------------------------------
$script:loginSessionsUri          = "/rest/login-sessions"
$script:activeUserSessionsUri     = '/rest/active-user-sessions'
$script:usersUri                  = "/rest/users"
$script:userRoleUri               = "/rest/users/role"
$script:authnProvidersUri         = "/rest/logindomains"
$script:authnProviderValidatorUri = "/rest/logindomains/validator"
$script:authnSettingsUri          = "/rest/logindomains/global-settings"
$script:authnDirectoryGroups      = "/rest/logindomains/groups"
$script:authnEgroupRoleMappingUri = "/rest/logindomains/grouptorolemapping"
$script:applAuditLogsUri          = "/rest/audit-logs"
$script:applAuditLogDownloadUri   = "/rest/audit-logs/download"
$Script:applianceRolesUri         = '/rest/roles'
$Script:OrganizationalUnitPattern = '^(?:(?:CN|OU|DC)\=[\w\s]+,)*(?:CN|OU|DC)\=[\w\s]+$'

#endregion

$script:WhiteListedURIs = @(

    $loginSessionsUri,
    $applUpdateMonitor,
    $applXApiVersion,
    "/ui-js/pages/",
    $applEulaStatus,
    $applEulaSave,
    ($usersUri + "/changePassword"),
    "/startstop/rest/component?fields=status",
	$applianceStartProgress

)

#######################################################
# Resource Objects
#

function NewObject 
{

    [CmdletBinding()]
    param
	(

		[switch]$AllApiResponse,
	    [switch]$LIG,
	    [switch]$QosConfiguration,
	    [switch]$DefaultFCoELosslessQosTrafficClassifiers,
	    [switch]$DefaultNoFCoELosslessQosTrafficClassifiers,
	    [switch]$DefaultBestEffortTrafficClass,
	    [switch]$FCoELossLessTrafficClass,
	    [switch]$BaseTrafficClass,
		[switch]$Ping,
		[switch]$ligUplinkSetObject,
		[switch]$liUplinkSetObject,
		[switch]$UplinkSetLogicalLocation,
        [switch]$UplinkSetLocation,
		[switch]$UplinkSetLocationEntry,
		[switch]$UplinkSetLogicalLocationEntry,
		[switch]$ApplianceVersion,
		[switch]$EnclosureGroup,
		[switch]$InterconnectBayMapping,
		[switch]$EthernetNetwork,
		[switch]$BulkEthernetNetworks,
		[switch]$FCNetwork,
		[switch]$FCoENetwork,
		[switch]$NetworkSet,
		[switch]$ProfileConnection,
		[switch]$ServerProfileStorageVolume,
		[switch]$EphemeralStorageVolume,
		[switch]$ProfileConnectionFcBootTarget,
		[switch]$ServerProfile,
		[switch]$ServerProfileTemplate,
		[switch]$ServerProfileLocalStorage,
		[switch]$EnclosureImport,
		[switch]$ServerImport,
		[switch]$SanManager,
		[switch]$SanManagerConnectInfo,
		[switch]$AddStorageVolume,
		[switch]$StorageVolume,
		[switch]$StorageSystemCredentials,
		[switch]$StorageSystemManagedPort,
		[switch]$AlertFilter,
		[switch]$ApplianceDebug,
		[switch]$PowerDeliveryDeviceAdd,
		[switch]$UserAccount,
		[switch]$DirectoryGroup,
		[switch]$IDPoolRange,
		[switch]$AuthDirectory,
		[switch]$AuthDirectoryServer,
		[switch]$SelfSignedCert,
		[switch]$ApplianceCSR,
		[switch]$UpdateAlert,
		[switch]$SmtpConfig,
		[switch]$CustomBaselineRestore,
	    [switch]$vcMigration

	)

	Begin
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

	}

	Process
	{

		switch($PSBoundParameters.Keys)
		{

			'CustomBaselineRestore'
			{

				Return [PSCustomObject]@{

					baselineUri        = $null;
					hotfixUris         = New-Object System.Collections.ArrayList;
					customBaselineName = $null

				}

			}

			'SmtpConfig'
			{

				Return [PSCustomObject]@{
        
				    type               = "EmailNotification";
				    senderEmailAddress = $null;
				    password           = $null;
				    smtpServer         = $null;
				    smtpPort           = 1;
				    alertEmailDisabled = $false
				
				}

			}

			'UpdateAlert'
			{

				Return [PSCustomObject] @{ 
			
					alertState     = $null;
					assignedToUser = $null;
					notes          = $null;
					eTag           = $null
				
				} 

			}

			'SelfSignedCert'
			{
			
				Return [PSCustomObject]@{

					type               = "CertificateDtoV2";
					country            =  $null;
					state              =  $null;
					locality           =  $null;
					organization       =  $null;
					commonName         =  $null;
					organizationalUnit =  $null;
					alternativeName    =  $null;
					contactPerson      =  $null;
					email              =  $null;
					surname            =  $null;
					givenName          =  $null;
					initials           =  $null;
					dnQualifier        =  $null

				}	
			
			}

			'ApplianceCSR'
			{

				Return [PSCustomObject]@{

					type               = "CertificateDtoV2";
					country            =  $null;
					state              =  $null;
					locality           =  $null;
					organization       =  $null;
					commonName         =  $null;
					organizationalUnit =  $null;
					alternativeName    =  $null;
					contactPerson      =  $null;
					email              =  $null;
					surname            =  $null;
					givenName          =  $null;
					initials           =  $null;
					dnQualifier        =  $null;
					unstructuredName   =  $null;
					challengePassword  =  $null

				}	

			}

			'AuthDirectory'
			{

				Return [PSCustomObject]@{
					
					type                = 'LoginDomainConfigVersion200'
					authProtocol        = 'AD';
					baseDN              = $null;
					orgUnits            = New-Object System.Collections.ArrayList
					userNamingAttribute = 'CN';
					name                = $null;
					credential          = [PSCustomObject]@{
						
						userName = $null; 
						password = $null
					
					};
					directoryServers    = New-Object System.Collections.ArrayList;

				}

			}

			'DirectoryGroup'
			{

				Return [PSCustomObject]@{

					type                = 'Group2RolesMappingPerGroupValidationDto';
					group2rolesPerGroup = [PSCustomObject]@{
					
						type        = 'Group2RolesMappingPerGroupDto';
						loginDomain = $null;
						egroup      = $null;
						roles       = New-Object System.Collections.ArrayList;

					}
					credentials = [PSCustomObject]@{

						userName = $null;
						password = $null

					}

				}

			}

			'AuthDirectoryServer'
			{

				Return [PSCustomObject]@{

					type                                 = 'LoginDomainDirectoryServerInfoDto'
					directoryServerCertificateBase64Data = $null;
					directoryServerIpAddress             = $null;
					directoryServerSSLPortNumber         = "636";

				}

			}

			'IDPoolRange'
			{

				Return [PsCustomObject]@{ 

					type          = "Range"; 
					rangeCategory = "CUSTOM";
					startAddress  = $null; 
					endAddress    = $null

				}

			}

			'UserAccount'
			{

				Return [PsCustomObject]@{

				    type         = "UserAndRoles";
				    userName     = $null; 
				    fullName     = $null; 
				    password     = $null; 
				    emailAddress = $emailAddress; 
				    officePhone  = $null; 
				    mobilePhone  = $null; 
				    enabled      = $True;
				    roles        = $null

				}

			}

			'PowerDeliveryDeviceAdd'
			{

				Return [PSCustomObject]@{

				    hostname = $null;
				    username = $null;
				    password = $null;
				    force    = $null

				}

			}
			
			'ApplianceDebug'
			{

				Return [PSCustomObject]@{

				    scope      = $null;
				    loggerName = $null;
				    level      = $null

				}

			}

			'AlertFilter'
			{

				Return [PSCustomObject]@{

				    disabled        = $False;
				    filter          = $null;
				    displayFilter   = $null;
				    userQueryFilter = $null;
				    emails          = $null;

				}

			}

			'ServerProfile'
            {

                Return [PSCustomObject]@{

					type                  = "ServerProfileV5"; 
					name                  = $null; 
					description           = $null; 
					affinity              = $null;
					hideUnusedFlexNics    = $true;
					bios                  = [PSCustomObject]@{

						manageBios         = $false;
						overriddenSettings = $null

					}; 
					firmware                 = [PSCustomObject]@{

						manageFirmware       = $false;
						firmwareBaselineUri  = $null;
						forceInstallFirmware = $false
                            
					};
					boot           = [PSCustomObject]@{
                       
						manageBoot = $false; 
						order      = New-Object System.Collections.ArrayList
                           
					};
					bootMode                 = $null;
					localStorage             = $null
					serialNumberType         = 'Virtual'; 
					macType                  = 'Virtual';
					wwnType                  = 'Virtual';
					connections              = New-Object System.Collections.ArrayList; 
					serialNumber             = $null;
					serverHardwareUri        = $null;
					serverHardwareTypeUri    = $null;
					serverProfileTemplateUri = $null;
					enclosureGroupUri        = $null;
					enclosureUri             = $null;
					sanStorage               = $null;
					uuid                     = $null;
                }

            }

			'ServerProfileTemplate'
			{

				Return [PSCustomObject]@{

					type                  = "ServerProfileTemplateV1"; 
					name                  = $null; 
					description           = $null; 
					affinity              = $null;
					hideUnusedFlexNics    = $true;
					bios                  = [PSCustomObject]@{

						manageBios         = $false;
						overriddenSettings = $null

					}; 
					firmware                 = [PSCustomObject]@{

						manageFirmware       = $false;
						firmwareBaselineUri  = $null;
						forceInstallFirmware = $false
                                    
					};
					boot           = [PSCustomObject]@{
                               
						manageBoot = $false; 
						order      = New-Object System.Collections.ArrayList
                                   
					};
					bootMode              = $null;
					localStorage          = $null
					serialNumberType      = 'Virtual'; 
					macType               = 'Virtual';
					wwnType               = 'Virtual';
					connections           = New-Object System.Collections.ArrayList; 
					serverHardwareTypeUri = $null;
					enclosureGroupUri     = $null;
					sanStorage            = $null;

				}

			} 

			'ServerProfileLocalStorage'
			{

				Return [PSCustomObject]@{

					manageLocalStorage = $false;
				    initialize         = $false;
				    logicalDrives      = New-Object System.Collections.ArrayList

				}

			}

			'ServerProfileLocalStorageLogicalDrives'
			{

				Return [PSCustomObject]@{ 

				    bootable  = $false;
				    raidLevel = $null
				
				}

			}

			'EnclosureImport'
			{

				Return [PSCustomObject]@{

                    hostname             = $null;
                    username             = $null;
                    password             = $null;
                    licensingIntent      = 'OneVeiw';
					force                = $false;
                    enclosureGroupUri    = $null;
                    firmwareBaselineUri  = $null;
                    forceInstallFirmware = $false;
                    updateFirmwareOn     = "EnclosureOnly";
					state                = $null
                
				}

			}

			'ServerImport'
			{

				Return [PSCustomObject]@{

                    hostname             = $null;
                    username             = $null;
                    password             = $null;
					force                = $false;
                    licensingIntent      = 'OneVeiw';
					configurationState   = $null
                
				}

			}

			'StorageSystemCredentials'
			{

				Return [PSCustomObject]@{
					
					ip_hostname = $null; 
					username    = $null; 
					password    = $null
				
				}

			}

			'StroageSystemManagedPort'
			{

				Return [PSCustomObject]@{

					type               = "StorageTargetPortV2"; 
					portName           = $Null; 
					actualNetworkUri   = $Null; 
					portWwn            = $Null; 
					expectedNetworkUri = $Null; 
					groupName          = $Null; 
					name               = $Null
				}

			}

			'StorageVolume'
			{

				Return [PSCustomObject]@{

				   isPermanent = $true;
				   name        = $null;
				   description = $null;
				   type        = "StorageVolume";
				   templateUri = $null;
				   provisioningParameters = @{

				       storagePoolUri    = $null;
				       requestedCapacity = $null;
				       provisionType     = "Thin";
				       shareable         = $false

				   }

        		}

			}

			'ServerProfileStorageVolume'
			{

				Return [PsCustomObject]@{
            
				    id                     = 1;
				    volumeUri              = $null;
				    volumeStoragePoolUri   = $null;
				    volumeStorageSystemUri = $null;
				    lunType                = '';
				    storagePaths           = New-Object System.Collections.ArrayList;
				    ApplianceConnection    = $null;

				}   

			}

			'AddStorageVolume'
			{

				Return [PSCustomObject]@{

					type                   = "AddStorageVolumeV2";
					name                   = $null;
					description            = $null;
					storageSystemUri       = $null;
					wwn                    = $null;
					provisioningParameters = [PSCustomObject]@{

						shareable = $false
					}

				}

			}

			'EphemeralStorageVolume'
			{

				Return [PsCustomObject]@{
            
                id                             = 1;
                volumeStoragePoolUri           = $null;
                volumeStorageSystemUri         = $null;
                volumeName                     = $null;
                volumeProvisionType            = 'Thin';
                volumeProvisionedCapacityBytes = '107374182400';
                permanent                      = $true;
                volumeShareable                = $false;
                ApplianceConnection            = $null;

            }

			}

			'ProfileConnection'
			{

				Return [PSCustomObject]@{
            
				    id            = 1;
					functionType  = 'Ethernet';
				    name          = $null;
				    portId        = $null; 
				    networkUri    = $null; 
				    requestedMbps = 2000; 
				    boot          = [PSCustomObject]@{

				        priority = 'NotBootable'
						targets  = New-Object System.Collections.ArrayList

				    };
					macType             = $null;
					mac		            = $null;
					wwpnType            = $null;
					wwnn	            = $null;
					wwpn	            = $null;
				    ApplianceConnection = $null

				}

			}

			'ProfileConnectionFcBootTarget'
			{

				Return [PSCustomObject]@{

                    arrayWwpn = $null;
                    lun       = $null

                }

			}

			'SanManager'
			{

				Return [PSCustomObject]@{
			
					"connectionInfo" = New-Object System.Collections.ArrayList
					
				}

			}

			'SanManagerConnectInfo'
			{

				Return [PSCustomObject]@{
				
					name  = $null;
					Value = $null
				
				}

			}

			'EthernetNetwork'
			{

				Return [pscustomobject]@{
						    
					type                = "ethernet-networkV3"; 
					vlanId              = 1; 
					ethernetNetworkType = 'Tagged'; 
					purpose             = 'General'; 
					name                = $null; 
					smartLink           = $false;
					privateNetwork      = $false

				}

			}

			'BulkEthernetNetworks'
			{

				Return [pscustomobject]@{

					type           = "bulk-ethernet-network"; 
					vlanIdRange    = $null; 
					purpose        = 'General'; 
					namePrefix     = $null; 
					smartLink      = $false; 
					privateNetwork = $false;
					bandwidth      = @{
							        
						typicalBandwidth = 1;
						maximumBandwidth = 10000
							        
					}

				}

			}

			'FCNetwork'
			{

				[pscustomobject]@{

					type                    = "fc-networkV2"; 
					name                    = $Name; 
					linkStabilityTime       = 30; 
					autoLoginRedistribution = $true; 
					fabricType              = 'FabricAttach'; 
					connectionTemplateUri   = $null;
					managedSanUri           = $null
					    
				}

			}

			'FCoENetwork'
			{

				Return [pscustomobject]@{
					    
					type                  = "fcoe-network"; 
					name                  = $null; 
					vlanId                = 1; 
					connectionTemplateUri = $null;
					managedSanUri         = $null

				}
				
			}

			'NetworkSet'
			{

				Return [PSCustomObject] @{

					type             = "network-set"; 
					name             = $null; 
					networkUris      = System.Collections.ArrayList; 
					nativeNetworkUri = $null; 
	    		
				}

			}

			'EnclosureGroup'
			{

				Return [PSCustomObject]@{

					type                        = "EnclosureGroupV200";
					name                        = $null;
					enclosureTypeUri            = '/rest/enclosure-types/c7000'; 
					stackingMode                = 'Enclosure';
					interconnectBayMappingCount = 8;
					interconnectBayMappings     = [System.Collections.ArrayList]@();
					configurationScript         = $null;
					powerMode                   = 'RedundantPowerFeed';
					ipRangeUris                 = [System.Collections.ArrayList]@();
					enclosureCount              = 1

				}

			}

			'InterconnectBayMapping'
			{

				Return [PSCustomObject]@{interconnectBay = 1; logicalInterconnectGroupUri = $null}

			}

			'ApplianceVersion'
			{

				Return [PSCustomObject]@{

					applianceName    = $null;
					softwareVersion  = $null; 
					major            = $null;
					minor            = $null;
					xapiVersion      = $null;
					modelNumber      = $null

				}

			}

			'AllApiResponse'
			{

				Return [PSCustomObject]@{

					type        = [string]$null;
					nextPageUri = [string]$null;
					start       = [int]0;
					prevPageUri = [string]$null;
					total       = [int]0;
					count       = [int]0;
					members     = New-Object System.Collections.ArrayList;
					eTag        = [string]$null;
					created     = [string]$null;
					modified    = [string]$null;
					category    = [string]$null;
					uri         = [string]$null

				}

			}

			#Default LIG Object
			"LIG"
			{
			
				Return [PSCustomObject]@{
					name                    = $Null;
					uplinkSets              = New-Object System.Collections.ArrayList; 
					interconnectMapTemplate = [PSCustomObject]@{interconnectMapEntryTemplates = New-Object System.Collections.ArrayList};
					internalNetworkUris     = New-Object System.Collections.ArrayList; 
					ethernetSettings = @{

						type                        = "EthernetInterconnectSettingsV3";
						enableIgmpSnooping          = $Null;
						igmpIdleTimeoutInterval     = $Null; 
						enableFastMacCacheFailover  = $Null;
						macRefreshInterval          = $Null;
						enableNetworkLoopProtection = $Null;
						enablePauseFloodProtection  = $Null;
				        
					};
					fcoeSettings     = @{
						
						fcoeMode = "NotApplicable"
						
					};
					snmpConfiguration       = $Null;
					qosConfiguration        = [PSCustomObject]@{
						
						type                     = "qos-aggregated-configuration";
						activeQosConfig          = $Null;
						inactiveFCoEQosConfig    = $null;
						inactiveNonFCoEQosConfig = $null;

							
					};
					stackingMode            = "Enclosure";
					enclosureType           = "C7000"
					type                    = "logical-interconnect-groupV3"
				}

			}
			
			#Default qosConfiguration Object for LIG
			"QosConfiguration"
			{
				
				Return [PSCustomObject]@{
				
					type                       = "QosConfiguration";
					configType                 = "Passthrough";
					qosTrafficClassifiers      = [System.Collections.ArrayList]@()
					uplinkClassificationType   = $Null; #Leave Null to support default 'Passthrough'
					downlinkClassificationType = $Null; #Leave Null to support default 'Passthrough'
				
				}

			}

			#Default With FCoE Lossless Traffic Classifiers Object
			"DefaultFCoELosslessQosTrafficClassifiers"
			{
			
				Return @(

					#1
					[PSCustomObject]@{ 
					qosTrafficClass = [PSCustomObject]@{
			
			            maxBandwidth     = 100;
			            bandwidthShare   = "65";
			            egressDot1pValue = 0;
			            realTime         = $false;
			            className        = "Best effort";
			            enabled          = $true;
			
			        };
							
					qosClassificationMapping = [PSCustomObject]@{
			
						dot1pClassMapping = [System.Collections.ArrayList]@(1,0);
			            dscpClassMapping  = [System.Collections.ArrayList]@(
			
							"DSCP 10, AF11",
							"DSCP 12, AF12",
							"DSCP 14, AF13",
							"DSCP 8, CS1",
							"DSCP 0, CS0"
			
						)
			
					}
			
				},
							
					#2
					[PSCustomObject]@{ 
					qosTrafficClass = [PSCustomObject]@{
			
						maxBandwidth     = 100;
						bandwidthShare   = "0";
						egressDot1pValue = 0;
						realTime         = $false;
						className        = "Class1";
						enabled          = $false;
			
			        };
								
					qosClassificationMapping = [PSCustomObject]@{
						
						dot1pClassMapping = New-Object System.Collections.ArrayList;
						dscpClassMapping  = New-Object System.Collections.ArrayList
							
					}
			
				},
				
					#3
					[PSCustomObject]@{ 
					qosTrafficClass = [PSCustomObject]@{
			
			            maxBandwidth     = 100;
			            bandwidthShare   = "0";
			            egressDot1pValue = 0;
			            realTime         = $false;
			            className        = "Class2";
			            enabled          = $false;
			
			        };
								
					qosClassificationMapping = [PSCustomObject]@{
						
						dot1pClassMapping = New-Object System.Collections.ArrayList;
						dscpClassMapping  = New-Object System.Collections.ArrayList
							
					}
			
				},
				
					#4
					[PSCustomObject]@{ 
					qosTrafficClass = [PSCustomObject]@{
			
			            maxBandwidth     = 100;
			            bandwidthShare   = "0";
			            egressDot1pValue = 0;
			            realTime         = $false;
			            className        = "Class3";
			            enabled          = $false;
			
			        };
								
					qosClassificationMapping = [PSCustomObject]@{
						
						dot1pClassMapping = New-Object System.Collections.ArrayList;
						dscpClassMapping  = New-Object System.Collections.ArrayList
							
					}
			
				},
				
					#5
					[PSCustomObject]@{ 
					qosTrafficClass = [PSCustomObject]@{
			
			            maxBandwidth     = 100;
			            bandwidthShare   = "0";
			            egressDot1pValue = 0;
			            realTime         = $false;
			            className        = "Class4";
			            enabled          = $false;
			
			        };
								
					qosClassificationMapping = [PSCustomObject]@{
						
						dot1pClassMapping = New-Object System.Collections.ArrayList;
						dscpClassMapping  = New-Object System.Collections.ArrayList
							
					}
			
				},
				
					#6
					[PSCustomObject]@{ 
					qosTrafficClass = [PSCustomObject]@{
			
			            maxBandwidth     = 100;
			            bandwidthShare   = "fcoe";
			            egressDot1pValue = 3;
			            realTime         = $false;
			            className        = "FCoE lossless";
			            enabled          = $true;
			
			        };					
							
					qosClassificationMapping = [PSCustomObject]@{
			
						dot1pClassMapping = [System.Collections.ArrayList]@(3);
						dscpClassMapping  = [System.Collections.ArrayList]@()
			
					}
			
				},
				
					#7
					[PSCustomObject]@{ 
					qosTrafficClass = [PSCustomObject]@{
			
			            maxBandwidth     = 100;
			            bandwidthShare   = "25";
			            egressDot1pValue = 2;
			            realTime         = $false;
			            className        = "Medium";
			            enabled          = $true;
			
			        };
								
					qosClassificationMapping = [PSCustomObject]@{
			
						dot1pClassMapping = [System.Collections.ArrayList]@(4,3,2);
						dscpClassMapping  = [System.Collections.ArrayList]@(
			
							"DSCP 18, AF21",
							"DSCP 20, AF22",
							"DSCP 22, AF23",
							"DSCP 26, AF31",
							"DSCP 28, AF32",
							"DSCP 30, AF33",
							"DSCP 34, AF41",
							"DSCP 36, AF42",
							"DSCP 38, AF43",
							"DSCP 16, CS2",
							"DSCP 24, CS3",
							"DSCP 32, CS4"
			
						)
			
					}
			
				},
				
					#8
					[PSCustomObject]@{ 
					qosTrafficClass = [PSCustomObject]@{
			
			            maxBandwidth     = 10;
			            bandwidthShare   = "10";
			            egressDot1pValue = 5;
			            realTime         = $true;
			            className        = "Real time";
			            enabled          = $true;
			
			        };
								
					qosClassificationMapping = [PSCustomObject]@{
			
						dot1pClassMapping = [System.Collections.ArrayList]@(5,6,7);
			            dscpClassMapping  = [System.Collections.ArrayList]@(
			
							"DSCP 46, EF",
							"DSCP 40, CS5",
							"DSCP 48, CS6",
							"DSCP 56, CS7"
			
						)
			
					}
			
				}
				
				)

			}

			#Default With No FCoE Lossless Traffic Classifiers Object
			"DefaultNoFCoELosslessQosTrafficClassifiers" 
			{
				
				Return @(

					#1
					[PSCustomObject]@{ 
						qosTrafficClass = [PSCustomObject]@{

						    maxBandwidth     = 100;
						    bandwidthShare   = "65";
						    egressDot1pValue = 0;
						    realTime         = $false;
						    className        = "Best effort";
						    enabled          = $true;

						};
								
						qosClassificationMapping = [PSCustomObject]@{

							dot1pClassMapping = [System.Collections.ArrayList]@(1,0);
						    dscpClassMapping  = [System.Collections.ArrayList]@(

								"DSCP 10, AF11",
								"DSCP 12, AF12",
								"DSCP 14, AF13",
								"DSCP 8, CS1",
								"DSCP 0, CS0"

							)

						}

					},
											
									#2
									[PSCustomObject]@{ 
						qosTrafficClass = [PSCustomObject]@{

							maxBandwidth     = 100;
							bandwidthShare   = "0";
							egressDot1pValue = 0;
							realTime         = $false;
							className        = "Class1";
							enabled          = $false;

					    };
									
						qosClassificationMapping = [PSCustomObject]@{
							
							dot1pClassMapping = New-Object System.Collections.ArrayList;
							dscpClassMapping  = New-Object System.Collections.ArrayList
								
						}

					},
								
									#3
									[PSCustomObject]@{ 
						qosTrafficClass = [PSCustomObject]@{

					        maxBandwidth     = 100;
					        bandwidthShare   = "0";
					        egressDot1pValue = 0;
					        realTime         = $false;
					        className        = "Class2";
					        enabled          = $false;

					    };
									
						qosClassificationMapping = [PSCustomObject]@{
							
							dot1pClassMapping = New-Object System.Collections.ArrayList;
							dscpClassMapping  = New-Object System.Collections.ArrayList
								
						}

					},
								
									#4
									[PSCustomObject]@{ 
						qosTrafficClass = [PSCustomObject]@{

					        maxBandwidth     = 100;
					        bandwidthShare   = "0";
					        egressDot1pValue = 0;
					        realTime         = $false;
					        className        = "Class3";
					        enabled          = $false;

					    };
									
						qosClassificationMapping = [PSCustomObject]@{
							
							dot1pClassMapping = New-Object System.Collections.ArrayList;
							dscpClassMapping  = New-Object System.Collections.ArrayList
								
						}

					},
								
									#5
									[PSCustomObject]@{ 
						qosTrafficClass = [PSCustomObject]@{

					        maxBandwidth     = 100;
					        bandwidthShare   = "0";
					        egressDot1pValue = 0;
					        realTime         = $false;
					        className        = "Class4";
					        enabled          = $false;

					    };
									
						qosClassificationMapping = [PSCustomObject]@{
							
							dot1pClassMapping = New-Object System.Collections.ArrayList;
							dscpClassMapping  = New-Object System.Collections.ArrayList
								
						}

					},
								
									#6
									[PSCustomObject]@{ 
						qosTrafficClass = [PSCustomObject]@{

					        maxBandwidth     = 100;
					        bandwidthShare   = "0";
					        egressDot1pValue = 0;
					        realTime         = $false;
					        className        = "Class5";
					        enabled          = $false;

					    };					
								
						qosClassificationMapping = [PSCustomObject]@{
							
							dot1pClassMapping = New-Object System.Collections.ArrayList;
							dscpClassMapping  = New-Object System.Collections.ArrayList
								
						}

					},
								
									#7
									[PSCustomObject]@{ 
						qosTrafficClass = [PSCustomObject]@{

					        maxBandwidth     = 100;
					        bandwidthShare   = "25";
					        egressDot1pValue = 2;
					        realTime         = $false;
					        className        = "Medium";
					        enabled          = $true;

					    };
									
						qosClassificationMapping = [PSCustomObject]@{

							dot1pClassMapping = [System.Collections.ArrayList]@(4,3,2);
							dscpClassMapping  = [System.Collections.ArrayList]@(

								"DSCP 18, AF21",
								"DSCP 20, AF22",
								"DSCP 22, AF23",
								"DSCP 26, AF31",
								"DSCP 28, AF32",
								"DSCP 30, AF33",
								"DSCP 34, AF41",
								"DSCP 36, AF42",
								"DSCP 38, AF43",
								"DSCP 16, CS2",
								"DSCP 24, CS3",
								"DSCP 32, CS4"

							)

						}

					},
								
									#8
									[PSCustomObject]@{ 
						qosTrafficClass = [PSCustomObject]@{

					        maxBandwidth     = 10;
					        bandwidthShare   = "10";
					        egressDot1pValue = 5;
					        realTime         = $true;
					        className        = "Real time";
					        enabled          = $true;

					    };
									
						qosClassificationMapping = [PSCustomObject]@{

							dot1pClassMapping = [System.Collections.ArrayList]@(5,6,7);
					        dscpClassMapping  = [System.Collections.ArrayList]@(

								"DSCP 46, EF",
								"DSCP 40, CS5",
								"DSCP 48, CS6",
								"DSCP 56, CS7"

							)

						}

					}
				
				)

			}

			#Default BestEffort Traffic Class
			"DefaultBestEffortTrafficClass"
			{
				
				Return [PSCustomObject]@{ 

					qosTrafficClass = [PSCustomObject]@{

					    maxBandwidth     = 100;
					    bandwidthShare   = "65";
					    egressDot1pValue = 0;
					    realTime         = $false;
					    className        = "Best effort";
					    enabled          = $true;

					};
								
					qosClassificationMapping = [PSCustomObject]@{

						dot1pClassMapping = [System.Collections.ArrayList]@(1,0);
					    dscpClassMapping  = [System.Collections.ArrayList]@(

							"DSCP 10, AF11",
							"DSCP 12, AF12",
							"DSCP 14, AF13",
							"DSCP 8, CS1",
							"DSCP 0, CS0"

						)

					}

				}

			}

			#FCoE Lossless Traffic Class
			"FCoELossLessTrafficClass"
			{

				Return [PSCustomObject]@{ 

					qosTrafficClass = [PSCustomObject]@{
				
				        maxBandwidth     = 100;
				        bandwidthShare   = "fcoe";
				        egressDot1pValue = 3;
				        realTime         = $false;
				        className        = "FCoE lossless";
				        enabled          = $true;
				
				    };					
								
					qosClassificationMapping = [PSCustomObject]@{
				
						dot1pClassMapping = [System.Collections.ArrayList]@(3);
						dscpClassMapping  = New-Object System.Collections.ArrayList
				
					}
				
				}

			}
			
			#Basic, not enabled Traffic Class
			"BaseTrafficClass"
			{
				
				Return [PSCustomObject]@{ 
					
					qosTrafficClass = [PSCustomObject]@{
					
						maxBandwidth     = 100;
						bandwidthShare   = "0";
						egressDot1pValue = 0;
						realTime         = $false;
						className        = "Class";
						enabled          = $false;
					
					};
									
					qosClassificationMapping = [PSCustomObject]@{
							
						dot1pClassMapping = New-Object System.Collections.ArrayList;
						dscpClassMapping  = New-Object System.Collections.ArrayList
							
					}

				}

			}

			"Ping"
			{

				Return [PSCustomObject]@{

					type        = "PingDto";
					address     = "example.com";
					noOfPackets = 5

				}

			}

			"liUplinkSetObject"
			{
			
				Return [PSCustomObject]@{

					type                = "uplink-setV3";
					name                = $Name; 
					networkUris         = New-Object System.Collections.ArrayList;
					portConfigInfos     = New-Object System.Collections.ArrayList;
					networkType         = $null; 
					primaryPortLocation = @{
						
						locationEntries = New-Object System.Collections.ArrayList
					
					};
					fcNetworkUris       = New-Object System.Collections.ArrayList;
					fcoeNetworkUris     = New-Object System.Collections.ArrayList;				
					connectionMode                 = $null; 
					ethernetNetworkType            = $null; 
					lacpTimer                      = $null;
					#manualLoginRedistributionState = $null;
					nativeNetworkUri               = $null;
					logicalInterconnectUri         = $null

				}
			
			}

			"ligUplinkSetObject"
			{

				Return [PSCustomObject]@{

					logicalPortConfigInfos = New-Object System.Collections.ArrayList;
					networkUris            = New-Object System.Collections.ArrayList;
					name                   = $null; 
					mode                   = $null; 
					networkType            = "Ethernet";
					primaryPort            = @{
						
						locationEntries = New-Object System.Collections.ArrayList
					
					};
					ethernetNetworkType    = $null; 
					lacpTimer              = $null;
					nativeNetworkUri       = $null

				}

			}

			'UplinkSetLogicalLocation'
			{
				
				Return [PSCustomObject]@{
					
					desiredSpeed    = $null;
					logicalLocation = [PSCustomObject]@{
						                
						locationEntries =  @(
						
							[PSCustomObject]@{
						                    
								type          = "Enclosure";
								relativeValue = 1

							},
							[PSCustomObject]@{

								type          = "Bay";
								relativeValue = 1
						
							},
							[PSCustomObject]@{

								type          = "Port";
								relativeValue = 1
						
							}

						)
					
					}
					
				}

			}

			'UplinkSetLocation'
			{
				
				Return [PSCustomObject]@{

					desiredSpeed = $null;
					location     = [PSCustomObject]@{
						                
						locationEntries = @(
                        
                            [PSCustomObject]@{
						                    
						        type  = "Enclosure";
						        value = 1

						    },
						    [PSCustomObject]@{

						        type  = "Bay";
						        value = 1

						    },
						    [PSCustomObject]@{

						        type  = "Port";
						        value = 1

						    }

                        )

					}
					
				}

			}

			'UplinkSetLogicalLocationEntry'
			{

				Return [PSCustomObject]@{
						                    
					type          = $Null;
					relativeValue = 1

				}

			}
				
			'UplinkSetLocationEntry'
			{

				Return [PSCustomObject]@{
						                    
					type  = $Null;
					value = 1

				}

			}

            'vcMigration'
            {
                Return [PSCustomObject]@{

                enclosureGroupUri           = $Null;
			    logicalInterconnectGroupUri = $Null;
                iloLicenseType              = $licensingIntent;
                credentials                 = [PSCustomObject]@{
			    				            
                     oaIpAddress            = $OAIPAddress;
                     oaUsername             = $OAUserName;
                     oaPassword             = $OAPassword;
                     vcmUsername            = $VCMUserName;
                     vcmPassword            = $VCMPassword;
                     type                   = "EnclosureCredentials"
                				            
                };				            
                category                    = "migratable-vc-domains";
                type                        = "migratable-vc-domains"

                }
            }

		}

	}

}

#######################################################
# Basic Support Functions
#

function New-ErrorRecord 
{

    <#  
    .Synopsis
    Creates an custom ErrorRecord that can be used to report a terminating or non-terminating error.  
    
    .Description
    Creates an custom ErrorRecord that can be used to report a terminating or non-terminating error.  
    
    .Parameter Exception      
    The Exception that will be associated with the ErrorRecord. 
     
    .Parameter ErrorID      
    A scripter-defined identifier of the error. This identifier must be a non-localized string for a specific error type.  
    
    .Parameter ErrorCategory      
    An ErrorCategory enumeration that defines the category of the error.  The supported Category Members are (from: http://msdn.microsoft.com/en-us/library/system.management.automation.errorcategory(v=vs.85).aspx) :
        
        • AuthenticationError - An error that occurs when the user cannot be authenticated by the service. This could mean that the credentials are invalid or that the authentication system is not functioning properly. 
        • CloseError - An error that occurs during closing. 
        • ConnectionError - An error that occurs when a network connection that the operation depends on cannot be established or maintained. 
        • DeadlockDetected - An error that occurs when a deadlock is detected. 
        • DeviceError - An error that occurs when a device reports an error. 
        • FromStdErr - An error that occurs when a non-Windows PowerShell command reports an error to its STDERR pipe. 
        • InvalidArgument - An error that occurs when an argument that is not valid is specified. 
        • InvalidData - An error that occurs when data that is not valid is specified. 
        • InvalidOperation - An error that occurs when an operation that is not valid is requested. 
        • InvalidResult - An error that occurs when a result that is not valid is returned. 
        • InvalidType - An error that occurs when a .NET Framework type that is not valid is specified. 
        • LimitsExceeded - An error that occurs when internal limits prevent the operation from being executed. 
        • MetadataError - An error that occurs when metadata contains an error.  
        • NotEnabled - An error that occurs when the operation attempts to use functionality that is currently disabled. 
        • NotImplemented - An error that occurs when a referenced application programming interface (API) is not implemented. 
        • NotInstalled - An error that occurs when an item is not installed. 
        • NotSpecified - An unspecified error. Use only when not enough is known about the error to assign it to another error category. Avoid using this category if you have any information about the error, even if that information is incomplete. 
        • ObjectNotFound - An error that occurs when an object cannot be found. 
        • OpenError - An error that occurs during opening. 
        • OperationStopped - An error that occurs when an operation has stopped. For example, the user interrupts the operation. 
        • OperationTimeout - An error that occurs when an operation has exceeded its timeout limit. 
        • ParserError - An error that occurs when a parser encounters an error. 
        • PermissionDenied - An error that occurs when an operation is not permitted. 
        • ProtocolError An error that occurs when the contract of a protocol is not being followed. This error should not happen with well-behaved components. 
        • QuotaExceeded An error that occurs when controls on the use of traffic or resources prevent the operation from being executed. 
        • ReadError An error that occurs during reading. 
        • ResourceBusy An error that occurs when a resource is busy. 
        • ResourceExists An error that occurs when a resource already exists. 
        • ResourceUnavailable An error that occurs when a resource is unavailable. 
        • SecurityError An error that occurs when a security violation occurs. This field is introduced in Windows PowerShell 2.0. 
        • SyntaxError An error that occurs when a command is syntactically incorrect. 
        • WriteError An error that occurs during writing. 
    
    .Parameter TargetObject      
    The object that was being processed when the error took place.  
    
    .Parameter Message      
    Describes the Exception to the user.  
    
    .Parameter InnerException      
    The Exception instance that caused the Exception association with the ErrorRecord.  
	.Parameter TargetType
    To customize the TargetType value, specify the appropriate Target object type.  Values can be "Array", "PSObject", "HashTable", etc.  Can be provided by ${ParameterName}.GetType().Name.
    
    .Example     
     #>

    [CmdletBinding()]
    param(

        [Parameter(Mandatory = $true, Position = 0)]
        [System.String]$Exception,

        [Parameter(Mandatory = $true, Position = 1)]
        [Alias('ID')]
        [System.String]$ErrorId,

        [Parameter(Mandatory = $true, Position = 2)]
        [Alias('Category')]
        [ValidateSet('AuthenticationError','ConnectionError','NotSpecified', 'OpenError', 'CloseError', 'DeviceError',
            'DeadlockDetected', 'InvalidArgument', 'InvalidData', 'InvalidOperation',
                'InvalidResult', 'InvalidType', 'MetadataError', 'NotImplemented',
                    'NotInstalled', 'ObjectNotFound', 'OperationStopped', 'OperationTimeout',
                        'SyntaxError', 'ParserError', 'PermissionDenied', 'ResourceBusy',
                            'ResourceExists', 'ResourceUnavailable', 'ReadError', 'WriteError',
                                'FromStdErr', 'SecurityError')]
        [System.Management.Automation.ErrorCategory]$ErrorCategory,

        [Parameter(Mandatory = $true, Position = 3)]
        [System.Object]$TargetObject,

        [Parameter()]
        [System.String]$Message,

        [Parameter()]
        [System.Exception]$InnerException,
        [Parameter(Mandatory = $false)]
        [System.String]$TargetType = "String"
    )

    Process 
	{

        # ...build and save the new Exception depending on present arguments, if it...
        $_exception = if ($Message -and $InnerException) {
            # ...includes a custom message and an inner exception
            New-Object $Exception $Message, $InnerException
        } elseif ($Message) {
            # ...includes a custom message only
            New-Object $Exception $Message
        } else {
            # ...is just the exception full name
            New-Object $Exception
        }

        # now build and output the new ErrorRecord
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Building ErrorRecord object"

        $record = New-Object Management.Automation.ErrorRecord $_exception, $ErrorID,$ErrorCategory, $TargetObject

        $record.CategoryInfo.TargetType = $TargetType

        Return $record
    }

}

function Enable-HPOVMSDSC 
{

	# .ExternalHelp HPOneView.120.psm1-help.xml

    [CmdletBinding()]

    Param ()

	Begin { }

	Process 
	{

		$RegKey = "HKCU:\Software\Hewlett-Packard\HPOneView"

		if (-not(Test-Path $RegKey)) { New-Item -Path $RegKey -force | Write-Verbose }

		$UseMSDSC = [bool](Get-ItemProperty -LiteralPath $RegKey -ea silentlycontinue).'UseMSDSC'

		if (-not($UseMSDSC)) { New-ItemProperty -Path $RegKey -Name UseMSDSC -Value 1 -Type DWORD | write-verbose }

		else { Set-ItemProperty -Path $RegKey -Name UseMSDSC -Value 1 -Type DWORD | write-verbose }

	}

	End { }

}

function Disable-HPOVMSDSC 
{

	# .ExternalHelp HPOneView.120.psm1-help.xml

    [CmdletBinding()]

    Param ()

	Begin { }

	Process 
	{

		$RegKey = "HKCU:\Software\Hewlett-Packard\HPOneView"

		if (-not(Test-Path $RegKey)) { New-Item -Path $RegKey -force | Write-Verbose }

		$UseMSDSC = [bool](Get-ItemProperty -LiteralPath $RegKey -ea silentlycontinue).'UseMSDSC'

		if (-not($UseMSDSC)) { New-ItemProperty -Path $RegKey -Name UseMSDSC -Value 0 -Type DWORD | write-verbose }

		else { Set-ItemProperty -Path $RegKey -Name UseMSDSC -Value 0 -Type DWORD | write-verbose }

	}

	End { }

}

function RestClient 
{

<#

    .SYNOPSIS 
    Internal Private Class for building a RestClient using [System.Net.HttpWebRequest]

    .DESCRIPTION 
    This is a private, internal class/function to create a new [System.Net.HttpWebRequest] object with pre-defined properties of the HttpWebReqeuest connection.  This class will set the following attributes, which the caller can overload the values with their own after the resource has been created:

        Timeout = 20000
        ContentType = "application/json"
        Accept = "application/json"
	    Headers.Item("X-API-Version") = $script:MaxXAPIVersion
        Headers.Item("accept-language") = "en_US"
        Headers.Item("accept-encoding") = "gzip, deflate"
        Headers.Item("auth") =${Global:ConnectedSessions}.sessionID  NOTE: Only if the sessionID exists.
        AutomaticDecompression = "GZip,Deflate,None"

    The URI of the HttpWebRequest object will automatically include the connected (or requested if the first call is Connect-HPOVMgmt) appliance address or name ($script:HPOneViewAppliance).  This value can be overloaded, but the Auth token that may be included as an HTTP header item could be invalid.

    .INPUTS
    None.

    .OUTPUTS
    New [System.Net.HttpWebRequest] object.

    .PARAMETER URI
    The URI of the request.  Do not include the appaliance hostname or IP Address, only the cononical URI value (i.e. /rest/server-hardware).

    .PARAMETER Method
    Optional.  Provide the HTTP method for the request.  The default value is 'GET'.  Only the following values are allowed:

        GET
        PUT
        POST
        DELETE
        PATCH (to be supported in a future release)

    .PARAMETER Appliance
    Optional.  Provide the appliance hostname or FQDN.  The default is the value of '$script:HPOneViewAppliance'
#>

    [CmdletBinding()]
    Param 
	(

        [parameter(Mandatory = $False, Position = 0)]
        [ValidateScript({if ("GET","POST","DELETE","PATCH","PUT" -match $_) {$true} else { Throw "'$_' is not a valid Method.  Only GET, POST, DELETE, PATCH, or PUT are allowed." }})]
        [string]$method = "GET",

        [parameter(Mandatory, Position = 1, HelpMessage = "Enter the resource URI (ex. /rest/enclosures)")]
        [ValidateScript({if ($_.startswith('/')) {$true} else {throw "-URI must being with a '/' (eg. /rest/server-hardware) in its value. Please correct the value and try again."}})]
        [string]$uri,

        [parameter(Mandatory, Position = 2)]
        [ValidateNotNullorEmpty()]
        [string]$Appliance = $Null

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        $url = $Appliance + $uri

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Building new [System.Net.HttpWebRequest] object for $method https://$url"

    }

	Process 
    {

        [System.Net.HttpWebRequest]$restClient              = [System.Net.HttpWebRequest]::Create("https://$url")
        [String]$restClient.Method                          = $method
        [int]$restClient.Timeout                            = 20000
        [String]$restClient.ContentType                     = "application/json"
        [String]$restClient.Accept                          = "application/json"
		[String]$restClient.Headers.Item("X-API-Version")   = $script:MaxXAPIVersion
        [String]$restClient.Headers.Item("accept-language") = "en_US"
        [String]$restClient.Headers.Item("accept-encoding") = "gzip, deflate"
        [String]$restClient.AutomaticDecompression          = "GZip,Deflate,None"
 
        # Set the callback to check for null certificate and thumbprint matching.
		#This method is only supported in PowerShell 4 or greater
        $restClient.ServerCertificateValidationCallback = {

            $_WebRequest = [System.Net.WebRequest]$args[0]
 
            $_certificate = [System.Security.Cryptography.X509Certificates.X509Certificate2]$args[1]

            try 
			{ 
				
				$_san = ($_certificate.Extensions | Where-Object {$_.Oid.Value -eq "2.5.29.17"}).Format(0) -split ", " 
			
			}

            catch 
			{ 
				
				$_san = $null 
			
			}

            $_chain = New-Object Security.Cryptography.X509Certificates.X509Chain 

            [void]$_chain.ChainPolicy.ApplicationPolicy.Add("1.3.6.1.5.5.7.3.1")

            $_status = $_chain.Build($_certificate)

            if ($_chain.ChainStatus) { $_chainstatus = $_chain.ChainStatus | % { $_.Status.ToString() } }

            $_certObject = [HPOneView.PKI.SslCertificate] @{

                    Certificate             = $_WebRequest.ServicePoint.Certificate;
                    Issuer                  = $_WebRequest.ServicePoint.Certificate.Issuer;
                    Subject                 = $_WebRequest.ServicePoint.Certificate.Subject;
                    SubjectAlternativeNames = $_san;
                    CertificateIsValid      = $_status;
                    ErrorInformation        = $_chainstatus

            }

			# // Check _san as well?  DnsNameList is likely not enough, and is failing cert chain validation in some cases with DCS.
            if (($_certificate.DnsNameList -contains $_WebRequest.Host -or $_certObject.SubjectAlternativeNames -match $_WebRequest.Host) -and (-not($_status)) -and ($_chainstatus -contains "UntrustedRoot"))
            {

                if (-not(($Global:ConnectedSessions | ? Name -eq $_WebRequest.Host).SslChecked))
                {

                    $_backgroundcolor = [System.Console]::BackgroundColor 
                    $Host.UI.WriteLine([System.ConsoleColor]::Yellow,$_backgroundcolor,"`n$($_certObject | Out-String)")
                    $Host.UI.WriteWarningLine("The appliance SSL Certificate is UNTRUSTED.  Use the Import-HPOVSSLCertificate to import the appliance Self-Signed certificate to your user accounts local Trusted Root Certification Authorities store to not display this warning when you first connect to your appliance.")
					$Host.UI.WriteLine("")

                    ($Global:ConnectedSessions | ? Name -eq $_WebRequest.Host).SslChecked = $true

                }
            
                return $true
            
			}

            #If Cert IS valid, but cannot validate with Root CA, can validate with Subordinate CA and unable to validate revocation, display warning
			elseif ((-not ($_status)) -and ($_certificate.ErrorInformation -contains "PartialChain" -and $_certificate.ErrorInformation -contains "RevocationStatusUnknown" -and $_certificate.ErrorInformation -contains "OfflineRevocation")) 
			{ 

                $Host.UI.WriteLine([System.ConsoleColor]::Yellow,$_backgroundcolor,"`n$($_certObject | Out-String)")

                $Host.UI.WriteWarningLine("The appliance SSL Certificate is UNTRUSTED.  This system does not trust the CA issuer, and is unable to verify the Certificate Authorities Revocation List (CRL) or the Revocation List Destination (CLD) is not contained within the certificate.")
				$Host.UI.WriteLine("")
                
            }

			#If Cert IS valid, but cannot validate with Root CA and unable to validate revocation, display warning
			elseif ((-not ($_status)) -and ($_certificate.ErrorInformation -contains "RevocationStatusUnknown" -and $_certificate.ErrorInformation -contains "OfflineRevocation")) 
			{				 
                
				$Host.UI.WriteLine([System.ConsoleColor]::Yellow,$_backgroundcolor,"`n$($_certObject | Out-String)")
                
				$Host.UI.WriteWarningLine("The appliance SSL Certificate is UNTRUSTED.  This system is unable to verify the Certificate Authorities Revocation List (CRL) or the Revocation List Destination (CLD) is not contained within the certificate.  If you are using an Enterprise Certificate Authority (i.e. Windows Server CA), please make sure the CRL is published as part of the issued certificate (CRL is an Extension that needs to be enabled prior to issuing certificates).")
				$Host.UI.WriteLine("")

			}

            #Cert is trusted and a Global ConnectedSession exists
            elseif ($_status -and ($Global:ConnectedSessions | ? Name -eq $_WebRequest.Host))
            {

                ($Global:ConnectedSessions | ? Name -eq $_WebRequest.Host).SslChecked = $true
            
                return $_status

            }

            elseif ($_status)
            {

                #$Host.UI.WriteLine("Reached final ElseIf and cert is trusted.")
                return $_status

            }

            else 
			{

				$Host.UI.WriteLine([System.ConsoleColor]::Red,[System.ConsoleColor]::Black,"`n$($_certObject | Out-String)")

            }

            return $false

        }

    }

    End 
	{

        Return [System.Net.HttpWebRequest]$restClient

    }

}

function Send-HPOVRequest 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param 
	(

        [parameter(Position = 0, Mandatory = $true, HelpMessage = "Enter the resource URI (ex. /rest/enclosures)")]
        [ValidateScript({if ($_.startswith('/')) {$true} else {throw "-URI must being with a '/' (eg. /rest/server-hardware) in its value. Please correct the value and try again."}})]
        [string]$uri,

        [parameter(Position = 1, Mandatory = $false)]
        [string]$method = "GET",
        
        [parameter(Position = 2, Mandatory = $false)]
        [object]$body = $null,

        [parameter(Position = 3, Mandatory = $false)]
        [int]$start = 0,

        [parameter(Position = 4, Mandatory = $false)]
        [int]$count = 0,

        [parameter(Position = 5, Mandatory = $false)]
        [hashtable]$addHeader,

        [parameter(Mandatory = $false, HelpMessage = "Enter the hostname or an array of hostnames")]
		[Alias('Appliance','ApplianceConnection')]
        [Object]$Hostname = ${Global:ConnectedSessions}

    )

    Begin 
	{ 

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] BEGIN"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

        #Collection to return all responses from all specified appliance connections
		$AllResponses = New-Object System.Collections.ArrayList

    }

    Process 
	{

        $c = 1

		if (-not($PSboundParameters['Hostname']) -and (-not([bool]($Hostname | Measure-Object).count)))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession ObjectNotFound 'Hostname' -Message "No appliance Hostname parameter provided and no valid appliance session(s) found." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

		}

        ForEach ($ApplianceHost in $Hostname) 
        {

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] PROCESS"

			if (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Prior Global Response Error Object for '$($ApplianceHost.Name)' found. Clearing."

				$_ResponseObject = (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name)

				[void]${Global:ResponseErrorObject}.Remove($_ResponseObject)

			}
            
            #If the value is String, we assume this is the Appliance Hostname, so look up the Connection details in ${Global:ConnectedSessions}
            if ($ApplianceHost -is [String] -and (${Global:ConnectedSessions} | ? { $_.Name -eq $ApplianceHost })) 
            {

                $ApplianceHost = ${Global:ConnectedSessions} | ? { $_.Name -eq $ApplianceHost }

            }

            elseif ($ApplianceHost -is [String])
            {

                [PSCustomObject]$ApplianceHost = @{Name = $ApplianceHost}

            }

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($ApplianceHost.Name)' appliance connection request. $c of $($Hostname.count)"

            #Need to check for authenticated session when the URI passed is not value of $script:loginSessionsUri
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Requested URI '$uri' to '$($ApplianceHost.Name -join ',')'"

            if ($script:WhiteListedURIs -contains $uri) 
            {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] We have reached the URI Whitelist condition block. Unauth request allowed for '$uri'."

            }
			    
            #Else, require authentication
            elseif (-not($ApplianceHost.SessionID)) 
            {

                $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Send-HPOVRequest' -Message "No valid session ID found for '$($ApplianceHost.Name)'.  The call to '$uri' requires authentication.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }
    
            #Pagination handling:
			$AllMembers = New-Object System.Collections.ArrayList

            #See if the caller specified a count, either in the URI or as a param
            #(if so, we will let them handle pagination manually)
            [bool]$manualPaging = $false

            if ($uri.ToLower().Contains("count=") -or $uri.ToLower().Contains("count =")) 
            {

                $manualPaging = $true

            }

            elseif ($count -gt 0) 
            {

                $manualPaging = $true

                #add start & count params to the URI
                if (-not ($uri -contains "?")) 
                {

                    $uri += "?"    

                }

                $uri += ("start=" + $start + "&")

                $uri += ("count=" + $count)

            }

            elseif ($start -gt 0) 
            {

                #start specified, but no count -- just set the start param & auto-page from there on:
                $manualPaging = $false

                if (-not ($uri -contains "?")) 
                {

                    $uri += "?"   
                 
                }

                $uri += ("start=" + $start)
            }

            do 
            {

                #Used to keep track of async task response
                $taskRecieved = $False

                [System.Net.HttpWebRequest]$req = RestClient $method $uri $ApplianceHost.Name

                #Add Auth Session token if it exists                
                if ($ApplianceHost.SessionID -and $ApplianceHost.SessionID -ne 'TemporaryConnection') 
				{ 
					
					$req.Headers.Item("auth") = $ApplianceHost.SessionID 
				
				}

                
                #Increase timeout for synchronOut call for Support Dumps to be generated as they are not an Async task.
                if ($uri -match "support-dump") 
				{ 
                
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Increase HttpWebRequest timeout to 200s, as a Support Dump is being requested."
                    $req.Timeout = 200000 
                    
                }

                #Handle additional headers being passed in for updated API (storage volume removal)
                #Variable defined as a hashtable in case other API pass more than one additional header
                if($addHeader)
				{

                    $addHeader.GetEnumerator() | ForEach-Object { $req.Headers.Item($_.key) = $_.value }

                }

                #Send the request with a messege
                if ($body) 
				{
                
                    if (($method -eq "PUT" -or $method -eq "PATCH") -and $body.etag) 
					{

		    			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] HTTP Method is $method and eTag value found $($body.etag).  Setting 'If-Match' HTTP Header."

                        #Handle eTags from connection manager
                        $req.Headers.Item("If-match") = $body.etag

                    }

                    #Remove any found ApplianceConnection property(ies) to not generate REST API Error
                    elseif ($method -eq "PUT" -or $method -eq "PATCH")
                    {

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] HTTP Method is $method. Removing 'ApplianceConnection' NoteProperty from object(s)."
                        $body = $body | % { Select-Object -InputObject $_ -Property * -ExcludeProperty ApplianceConnection }

                    }

		    		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Body object found. Converting to JSON."
					
					#Remove ApplianceConnection NoteProperty
					$NewBody = New-Object System.Collections.ArrayList

					if ($body -is [Array]) 
					{

						$body | % 
						{
    
							$TmpObject = New-Object PSObject -property $_
        
							[void] $NewBody.Add($TmpObject)
    
						}    

					}

					elseif ($body -is [Hashtable]) 
					{

						$newBody = New-Object PSObject -property $body

					}

					else
					{

						$newBody = $body

					}

					if ($newBody.ApplianceConnection) { $newBody = $newBody | % { Select-Object -InputObject $_ -Property * -ExcludeProperty ApplianceConnection } }

                    #Create a new stream writer to write the json to the request stream.
		    		$js = $newBody | ConvertTo-Json -Depth 99 -Compress #| write-verbose

		    		#Needed to remove \r character that ConvertTo-JSON adds which /rest/logindirectories does not support for the directory server SSL certificate
                    if ($newBody.type -eq "LoginDomainConfigVersion2Dto") { $js = $js -replace "\\r",$null }

		            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request Body: $($js)"

                    #Send the messege
		            $stream = New-Object IO.StreamWriter $req.GetRequestStream()
		            $stream.AutoFlush = $True
		            $stream.WriteLine($js)
		            $stream.Close()

                }

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request: $($method) https://$($ApplianceHost.Name)$($uri)"
   
                #Write Verbose the headers if needed
                $i = 0
                foreach ($h in $req.Headers) 
				{ 

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request Header $($i+1): $($h) = $($req.Headers[$i])"
                    $i++ 

				}

                #Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] [System.Net.HttpWebRequest] object details: $($req | select * -ExcludeProperty headers | out-string)"

                try 
				{

                    #just to be sure this is cleared, if an exception is thrown
                    $LastWebResponse = $null 

                    #Get response from appliance
                    [System.Net.WebResponse]$LastWebResponse = $req.GetResponse()

                    #Display the response status if verbose output is requested
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Status: $([int]$LastWebResponse.StatusCode) {$([String]$LastWebResponse.StatusDescription)}"

                    $i = 0
                    foreach ($h in $LastWebResponse.Headers) 
					{ 
						
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Header $($i+1): $($h) = $($LastWebResponse.Headers[$i])"
						
						$i++ 
					
					}
                    
                    $rs = $LastWebResponse.GetResponseStream()

                    #Read the response
                    $reader = New-Object System.IO.StreamReader($rs)
                    $responseJson = $reader.ReadToEnd()
                    $rs.Close()
                    $reader.Close()

                    $resp = ConvertFrom-json $responseJson

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response: $($resp | fl * -force | out-string)"

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Manual Pagination: $($manualPaging)"

                    #If asynchronOut (HTTP status=202), make sure we return a Task object:
                    #if ([int]$LastWebResponse.StatusCode -eq 202 -and ($resp.category -eq $Null) -and ($LastWebResponse.Headers.Item('Location'))) 
					if ([int]$LastWebResponse.StatusCode -eq 202 -and $LastWebResponse.Headers.Item('Location'))
                    {

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Async Task (HTTP 202) received"

                        #AsynchronOut operation -- in some cases we get the Task object returned in the body.
                        #In other cases, we only get the Task URI in the Location header.
                        #In either case, return a Task object with as much information as we know
                        if ($LastWebResponse.Headers.Item('Location')) 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Async Task Location found in HTTP headers: $($LastWebResponse.Headers.Item('Location'))"

                            #Return custom task resource if response does not contain actual task resource
                            if (-not($resp.category -eq "tasks")) 
							{

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Task Resource Object to return to caller."

                                #Only have the Task URI - generate a Task object to be returned:
                                [string]$taskUri = $LastWebResponse.Headers.Item('Location')

                                #First, make sure the task URI is relative:
                                $pos = $taskUri.IndexOf($script:taskUri)

                                if ($pos -gt 0) 
								{

                                    $taskUri = $taskUri.Substring($pos)

                                }

                                $resp = Send-HPOVRequest -appliance $ApplianceHost.Name -uri $taskUri -method GET

		    					#Handle previOut Send-HPOVRequest call
                                if ([int]$LastWebResponse.statusCode -eq 200) 
								{
                                    
                                    #Change the statusCode from 200 to 202, as wewant to reply to the caller with HTTP 202 as Async Task status.
                                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating HTTP statusCode property to 202"

                                    $resp | select * -ExcludeProperty statusCode | Add-Member -NotePropertyName statusCode -NotePropertyValue 202

                                }

                            }

		    				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding 'HPOneView.Appliance.TaskResource' to PSObject TypeNames for task object"

		    				$resp | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.TaskResource") }

                        }

                        elseif (-not($resp)) 
						{

                            $errorRecord = New-ErrorRecord InvalidOperationException RestAPIError InvalidResult 'Send-HPOVRequest' -Message 'SEND-HPOVREQUEST: REST API ERROR: The operation is asynchronOut, but neither a Task resource or URI was returned!' #-verbose
                            throw $errorRecord
                        
                        }

                    }

		    		#Handle Task Objects that have been directly accessed via task URI and not created async tasks (HTTP 202)
		    		if (([int]$LastWebResponse.StatusCode -eq 200 -or [int]$LastWebResponse.StatusCode -eq 202) -and ($resp.category -eq "tasks") -and (-not($resp.PSObject.TypeNames -match "HPOneView.Appliance.TaskResource"))) 
					{
		    			
		    			$resp | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.TaskResource") }

		    		}

                    #User Logoff success message
                    if (([int]$LastWebResponse.StatusCode -eq 204) -and ($uri -eq $script:loginSessionsUri))
                    {

                        $resp = [PSCustomObject]@{ Message = "User logoff successful." }

                    }

					elseif ([int]$LastWebResponse.StatusCode -eq 204 -and $method -eq "DELETE")
					{
						
						$resp = [PSCustomObject]@{StatusCode = [int]$LastWebResponse.StatusCode; Message = "Resource deleted successfully." }
						
					}

					# // Need to update this to add members collection into $_AllMembers as an ArrayList
                    #Handle multi-page result sets
                    if ($resp.members -and (-not($manualPaging))) 
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response members and automatic pagination"

                        $resp.members | % { 
							
							Add-Member -InputObject $_ -NotePropertyName ApplianceConnection -NotePropertyValue ([PSCustomObject]@{ Name = $ApplianceHost.Name; ConnectionId = $ApplianceHost.ConnectionId }) -Force 

							[void]$AllMembers.Add($_) 
						
						}

                        write-verbose "total stored '$($AllMembers.count)'"

                        write-verbose "nextPageURI: '$($AllMembers.nextPageUri)'"

                        if ($resp.nextPageUri) 
						{ 

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Pagination has occurred. Received $($resp.count) resources of $($resp.total)"

                            $uri = $resp.nextPageUri

                        }

                        else 
						{ 

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Reached end of pagination. Building AllResults"

                            $_AllResults = [PsCustomObject]@{
								
								members     = $AllMembers; 
								count       = $AllMembers.Count;
								total       = $AllMembers.Count;
								category    = $resp.category; 
								eTag        = $resp.eTag;
								nextPageUri = $resp.nextPageUri;
								start		= $resp.start;
								prevPageUri	= $resp.prevPageUri;
								created		= $resp.created;
								modified	= $resp.modified;
								uri			= $resp.uri
							
							}

							[void]$AllResponses.Add($_AllResults)
                            
                        }

                    }
					
					elseif ($resp.members -and $manualPaging )
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response members and manual paging"

						$resp.members | % { 
							
							Add-Member -InputObject $_ -NotePropertyName ApplianceConnection -NotePropertyValue ([PSCustomObject]@{ Name = $ApplianceHost.Name; ConnectionId = $ApplianceHost.ConnectionId }) -Force 

						}

						[void]$AllResponses.Add($resp)

					}

					elseif ($resp)
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response object, no paging needed."

						Add-Member -InputObject $resp -NotePropertyName ApplianceConnection -NotePropertyValue ([PSCustomObject]@{ Name = $ApplianceHost.Name; ConnectionId = $ApplianceHost.ConnectionId }) -Force 

						[void]$AllResponses.Add($resp)

					}

                } 
       
                catch [System.Net.WebException] 
                { 

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Net.WebException Error caught"
                    
                    if ($_.Exception.InnerException -match "System.Net.WebException: Unable to connect to the remote server") 
					{ 
                    
                        $errorRecord = New-ErrorRecord HPOneView.Appliance.NetworkConnectionException ApplianceNotResponding ResourceUnavailable 'Connect-HPOVMgmt' -Message "Unable to connect to '$Appliance' due to timeout." #-verbose
                        $PSCmdLet.ThrowTerminatingError($errorRecord)

                    }

                    if ($_.Exception.InnerException) 
					{

                        if ($_.Exception.InnerException.Response) 
						{

                            $LastWebResponse = $_.Exception.InnerException.Response

                        }

                        else 
						{

                            Write-Error $_.Exception.InnerException.Message

                        }

                    } 
                
                    else 
					{

                        if ($_.Exception.Response) 
						{

                            $LastWebResponse = $_.Exception.Response

                        }

                        else 
						{

                            Write-Error $_.Exception.Message

                        }

                    }

                    if ($LastWebResponse) 
					{

                        $rs = $LastWebResponse.GetResponseStream()

                        $reader = New-Object System.IO.StreamReader($rs)
                        $ErrorResponse = $reader.ReadToEnd() | ConvertFrom-JSON

						#$ErrorResponse = ConvertFrom-JSON $responseJson

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ERROR RESPONSE: $($ErrorResponse | out-string)"

                        #Set Global Response Error Object
						if (-not(${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name))
						{
						
							$_NewResponseErrorObject = [PSCustomObject]@{

								Name            = $ApplianceHost.Name
								LastWebResponse = $LastWebResponse
								ErrorResponse   = $ErrorResponse

							}

							[void]${Global:ResponseErrorObject}.Add($_NewResponseErrorObject)
						
						}

						else
						{

							(${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).LastWebResponse = $LastWebResponse
							(${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse   = $ErrorResponse

						}                       
                        
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Status: HTTP $([int](${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).LastWebResponse.StatusCode) [$((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).LastWebResponse.StatusDescription)]"

                        foreach ($h in (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).LastWebResponse.Headers) 
						{ 
							
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Header: $($h) = $((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).LastWebResponse.Headers[$i])"
							
							$i++ 
						
						}

                        switch ([int](${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).LastWebResponse.StatusCode) 
						{

                            # Generic HTTP 400 error
                            400 
							{
                                
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] HTTP 400 error caught."

                                #Hande initial authentication errors
                                if ((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.errorCode -eq "AUTHN_AUTH_DIR_FAIL") 
								{
                                    
                                    ${Global:ConnectedSessions}.Remove($ApplianceHost)
                                    $errorRecord = New-ErrorRecord HPOneView.Appliance.AuthSessionException InvalidUsernameOrPassword AuthenticationError 'Send-HPOVRequest' -Message "$((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message)  $((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.recommendedActions)"
                                    $pscmdlet.ThrowTerminatingError($errorRecord)

                                }
		    					
		    					#Handle invalid user session
		    					elseif ((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.errorCode -eq "AUTHN_LOGOUT_FAILED") 
								{

		    						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User session no longer valid, likely due to session timeout. Clearing library runtime global and script variables."

                                    ${Global:ConnectedSessions}.Remove($ApplianceHost)

                                    $errorRecord = New-ErrorRecord HPOneView.Appliance.AuthSessionException InvalidUserSession AuthenticationError "Appliance:$($ApplianceHost.Name)" -Message "$($global:ResponseErrorObject.($ApplianceHost.Name).details)"
                                    Throw $errorRecord

                                }
                                else 
								{

                                    if ((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.errorSource) 
									{ 
										
										$source = (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.errorSource 
									
									}

                                    else 
									{ 
										
										$source = 'Send-HPOVRequest' 
									
									}

                                    $errorRecord = New-ErrorRecord InvalidOperationException InvalidOperation InvalidOperation $source -Message "$((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message) $((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.details)"
                                    $pscmdlet.ThrowTerminatingError($errorRecord)

                                }

                            }

                            #User is unauthorized
                            401 
							{

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] HTTP 401 error caught."
                                
                                if ((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.details -cmatch "User not authorized for this operation" -or (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message -cmatch "insufficient privilege for operation") 
								{

		    						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message) Request was '$method' at '$uri'."

                                    $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthPrivilegeException InsufficientPrivilege AuthenticationError 'Send-HPOVRequest' -Message "[Send-HPOVRequest]: $((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message).  Request was '$method' at '$uri'. " #-verbose
                                    Throw $errorRecord

                                }

                                else 
								{

                                    [void]${Global:ConnectedSessions}.Remove($ApplianceHost)

                                    $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidOrTimedoutSession AuthenticationError 'Send-HPOVRequest' -Message "[Send-HPOVRequest]: Your session has timed out or is not valid. Please use Connect-HPOVMgmt to authenticate to your appliance." #-verbose
                                    Throw $errorRecord

                                }

                            }

		    				403 
							{
		    					
		    					$resp = $Null

		    					if ((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.errorCode -eq "PASSWORD_CHANGE_REQUIRED") 
								{ 
									
									$errorRecord = New-ErrorRecord HPOneview.Appliance.PasswordChangeRequired PasswordExpired PermissionDenied "URI" -Message ((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message + " " + (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.recommendedActions) 
								
								}
		    					
								else 
								{ 
									
									$errorRecord = New-ErrorRecord HPOneview.Appliance.ResourcePrivledgeException ResourcePrivledge PermissionDenied "URI" -Message ((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message + " " + (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.recommendedActions) 
								
								}

                                Throw $errorRecord

                            }

		    				404 
							{
		    					
		    					$resp = $Null

                                $errorRecord = New-ErrorRecord HPOneview.ResourceNotFoundException ResourceNotFound ObjectNotFound "URI" -Message ("The request resource '$uri' could not be found. " + (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.recommendedActions)
                                Throw $errorRecord

                            }
                        
                            405 
							{
                        
                                $errorRecord = New-ErrorRecord InvalidOperationException (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.errorCode InvalidOperation "$($Method):$($uri)" -Message ("[Send-HPOVRequest]: The requested HTTP method is not valid/supported.  " + (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.details + " URI: $uri")
                                Throw $errorRecord

                            }

                            { @(409, 412) -contains $_ } 
							{
                        
                                $errorRecord = New-ErrorRecord InvalidOperationException $(${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.errorCode InvalidOperation 'Send-HPOVRequest' -Message ("[Send-HPOVRequest]: $((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message) $((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.recommendedActions)")
                                Throw $errorRecord

                            }

		    				500 
							{

		    					if ((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.details) 
								{ 
									
									$message = (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.details 
								
								}

		    					else 
								{ 
									
									$message = (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message 
								
								}
		    					
		    					if (-not($message.Substring($message.length - 1) -eq ".")) { $message += "." }
		    					
		    					$errorRecord = New-ErrorRecord InvalidOperationException $(${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.errorCode InvalidOperation 'Send-HPOVRequest' -Message ("[Send-HPOVRequest]: $message $((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.recommendedActions)") #-InnerException $global:ResponseErrorObject
                                Throw $errorRecord

		    				}

                            #Wait for appliance startup here by calling Wait-HPOVApplianceStart
                            { @(503, 0) -contains $_ } 
							{
                                
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] HTTP $([int]$LastWebResponse.StatusCode) error caught."

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Calling Wait-HPOVApplianceStart"

								Try
								{

									Wait-HPOVApplianceStart -Appliance $ApplianceHost.Name

								}

								Catch
								{

									$PSCmdlet.ThrowTerminatingError($_)

								}
                                

                                #appliance startup should have finished.
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Returning caller back to: $($method.ToUpper()) $uri"

                                if ($addHeader) 
								{ 
									
									return (Send-HPOVRequest -uri $uri -method $method -body $body -addHeader $addHeader -Hostname $ApplianceHost.Name) 
								
								}

                                else 
								{ 
									
									return (Send-HPOVRequest -uri $uri -method $method -body $body -Hostname $ApplianceHost.Name) 

								}

                            }

                            501 
							{

                                $errorRecord = New-ErrorRecord InvalidOperationException (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.errorCode SyntaxError 'Send-HPOVRequest' -Message ("[Send-HPOVRequest]: " + (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message + " " + (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.recommendedActions) -InnerException (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.details #-verbose
                                Throw $errorRecord

                            }
                            
                        } 

                    }

                    else 
					{

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Returning Null"

                        return $null

                    }

                }

            } until ($manualPaging -or (-not($resp.nextPageUri)))

            $c++

        } #Continue with next appliance

    }

    End 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] END"

		Return $AllResponses

    }

}

function ConvertTo-Object
{
	    
    [CmdletBinding()]
    Param 
	(

         [parameter(Position = 0, Mandatory)]
         [ValidateNotNullOrEmpty()]
         [System.Collections.ArrayList]$Objects

    )

    Begin
    {

        $NewObjects = New-Object System.Collections.ArrayList

    }

	Process
	{
		
		#Write-verbose "Objects is '$($Objects.GetType().Fullname)' type." #-verbose
		
		ForEach($_obj in $Objects)
		{

			#Write-verbose "_obj is '$($_obj.GetType().Fullname)' type." #-verbose

			#Write-verbose "Processing: $($_obj.name)" #-verbose

			switch ($_obj.category)
			{

				"ethernet-networks"
				{
				
					#[HPOneView.Networking.EthernetNetwork]$_newObj = $_obj

					$_obj.PSObject.TypeNames.Insert(0,'HPOneView.Networking.EthernetNetwork')
				
				}

				"fc-networks"
				{
				
					#[HPOneView.Networking.FibreChannelNetwork]$_newObj = $_obj
					$_obj.PSObject.TypeNames.Insert(0,'HPOneView.Networking.FibreChannelNetwork')
				
				}

				"fcoe-networks"
				{
				
					#[HPOneView.Networking.FCoENetwork]$_newObj = $_obj
					$_obj.PSObject.TypeNames.Insert(0,'HPOneView.Networking.FCoENetwork')

				}

                default
                {
                
                    #$_newObj = $_obj

                }

			}


            #Write-verbose "_newObj is '$($_newObj.GetType().Fullname)' type." #-verbose

			#[void]$NewObjects.Add($_newObj)
			[void]$NewObjects.Add($_obj)

		}

	}

	End
	{

		Return $NewObjects

	}

}
 
function Ping-HPOVAddress
{
    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdletBinding()]
    Param 
	(

		#allow via pipeline
		[parameter(Position = 0, Mandatory, ValueFromPipeline, HelpMessage = "Device FQDN or IP Address to PING from the HP OneView Appliance.")]
		[ValidateNotNullOrEmpty()]
		[string]$Address,

		[parameter(Position = 1, Mandatory = $False, HelpMessage = "Number of packets to send.")]
		[ValidateNotNullOrEmpty()]
		[int]$Packets = 5,

		[parameter(Mandatory = $False, HelpMessage = "Run as Async")]
		[switch]$Async,

		#Only allow a single appliance connection
		[parameter(Position = 2, Mandatory= $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		#Allow targets to be passed via pipeline
		if (-not($PSBoundParameters['Address'])) { $PipelineInput = $True }

		$_TaskCollection = New-Object System.Collections.ArrayList

    }

	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			$_PingObject = NewObject -Ping

			$_PingObject.address = $Address

			if ($PSBoundParameters['Packets'])
			{

				$_PingObject.noOfPackets = $Packets

			}

			Try
			{

				$_resp = Send-HPOVRequest $appliancePingTestUri POST $_PingObject -Hostname $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			if (-not($PSBoundParameters['Async']))
			{

				$_resp = Wait-HPOVTaskComplete $_resp

				Write-Host " "
				$_resp.progressUpdates.statusUpdate | Out-Host
				Write-Host " "

			}
					
			[void]$_TaskCollection.Add($_resp)

		}

	}

	End
	{

		Return $_TaskCollection

	}

}

function Wait-HPOVApplianceStart 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdletBinding()]
    Param 
	(

		[parameter(Position = 0, Mandatory, HelpMessage = "Provide the Appliance IP Address or Host Name to monitor.")]
		[Alias('Appliance')] 
		[ValidateNotNullOrEmpty()]
		[string]$Hostname = $null
    
	)

    Begin 
	{
		
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller" 
    
    }

    Process 
	{

        do 
		{
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Services not started. Monitoring startup progress"
            
            $waitRequest  = $Null
            $waitResponse = $Null

            [System.Net.httpWebRequest]$waitRequest = RestClient -uri $applianceStartProgress -appliance $Hostname

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] REQUEST: $($waitRequest.Method) $($waitRequest.RequestUri)"

            $i = 0

            foreach ($h in $waitRequest.Headers) 
			{ 
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request Header $($i+1): $($h) = $($waitRequest.Headers[$i])"
				
				$i++ 
			
			}

            try 
			{

                #Get response from appliance
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting response..."

                $waitResponse = $waitRequest.GetResponse()

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received HTTP\$([int]$waitResponse.StatusCode) status."

                #This will trigger when the GetResponse() does not generate an HTTP Error Code and get trapped by the Catch statement below
                If ($_displayflag) 
				{

                    write-host "]"

                    #Reset flag so we don't display the ending brace
                    $_displayflag = $False

                }

                #Read the response
                $reader = New-Object System.IO.StreamReader($waitResponse.GetResponseStream())
                $responseJson = $reader.ReadToEnd()
                $reader.Close()

                $resp = ConvertFrom-json $responseJson

				$percentComplete = [Math]::Round(($resp.complete / $resp.total) * 100,$mathMode)
                
                #Handle the call from -Verbose so Write-Progress does not get borked on display.
                if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
				{ 
                    
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Skipping Write-Progress display."
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Percent Complete: $percentComplete%"
                    start-sleep -s 2

                }
                  
                else 
				{

                    #Display progress-bar
                    Write-Progress -activity "Appliance services starting" -Status "$percentComplete%" -percentComplete $percentComplete

                    start-sleep -s 2

                }

            }

            #Catch if we haven't received HTTP 200, as we should display a nice message stating services are still beginning to start
            catch [Net.WebException] 
			{

                if ($waitResponse) 
				{

                    $rs = $waitResponse.GetResponseStream()

                    $reader = New-Object System.IO.StreamReader($rs)

                    $responseJson = $reader.ReadToEnd()

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ERROR RESPONSE: $($responseJson | ConvertFrom-Json | out-string)"

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Status: HTTP_$([int]$waitResponse.StatusCode) $($waitResponse.StatusDescription)"

                    foreach ($h in $waitResponse.Headers) 
					{ 
						
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Header: $($h) = $($waitResponse.Headers[$i])"
						
						$i++ 
					
					}

                }

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] EXCEPTION CAUGHT! HTTP Status Code: $([int]$waitResponse.StatusCode)"

				#Handle WebExcpetion errors that are not HTTP Status Code 503 or 0, and throw error
				if ([int]$waitResponse.StatusCode -ne 503 -and [int]$waitResponse.StatusCode -ne 0)
				{

					Throw $_.Exception.Message

				}

                write-verbose "$($waitResponse| Out-string)"

                #Only want to display this message once.
                if (-not($_displayflag)) 
				{

                    Write-host "Waiting for services to begin starting [" -nonewline

                }

                if (-not ([int]$waitResponse.StatusCode -eq 200)) 
				{

                    Write-host "*" -nonewline -ForegroundColor Green

                    $_displayflag = $true

                    start-sleep -s 5

                }

                $waitRequest = $null
            }

        } until ($resp.complete -eq $resp.total -and [int]$waitResponse.StatusCode -eq 200)

    }

    end 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Web Services have started successfully"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Pausing 10 seconds to let web services finish their final startup"

        start-sleep -s 10

    }

}

function Connect-HPOVMgmt 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param
	(

         [parameter(Mandatory, HelpMessage = "Enter the appliance DNS name or IP",Position=0)]
         [ValidateNotNullOrEmpty()]
         [alias('Appliance')]
         [string]$Hostname,

         [parameter(Mandatory = $false, HelpMessage = "Enter the authentication domain",Position=3)]
         [ValidateNotNullOrEmpty()]
         [alias('authProvider')]
         [string]$AuthLoginDomain = 'LOCAL',

         [parameter(Mandatory, HelpMessage = "Enter the user name",Position=1)]
         [ValidateNotNullOrEmpty()]
         [alias("u",'user')]
         [string]$UserName,

         [parameter(Mandatory = $false, HelpMessage = "Enter the password:",Position=2)]
         [alias("p")]
         [ValidateNotNullOrEmpty()]
         [String]$password

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		#Check if user provided AuthLoginDomain and see if AuthProvider is set in registry (format 'AuthProvider#{ApplianceName}')
		if (-not($PSboundParameters['AuthLoginDomain']))
		{

			$RegQueryAuthProvider = Get-ItemProperty "HKCU:\Software\Hewlett-Packard\HPOneView" "AuthProvider#$Hostname" -ErrorAction SilentlyContinue
			
			If (-not($RegQueryAuthProvider)) 
			{ 
				
				Set-ItemProperty -Path HKCU:\Software\Hewlett-Packard\HPOneView -Name "AuthProvider#$Hostname" -Value LOCAL -Type STRING | write-verbose 
			
			}
			
			else
			{

				$AuthLoginDomain = (Get-ItemProperty HKCU:\SOFTWARE\Hewlett-Packard\HPOneView "AuthProvider#$Hostname" -ea SilentlyContinue)."AuthProvider#$Hostname"

			}

		}
        
        #Check to see if a connection to the appliance exists
        if ((${Global:ConnectedSessions}.Name -contains $Hostname) -and ((${Global:ConnectedSessions} | ? { $_.name -eq $Hostname}).SessionID)) 
        {

            Write-Warning "You are already connected to $Hostname"
            continue
                
        }

        #Create the connection object for tracking
        else 
        {

			# Look for Connection where Name exists but SessionID does not, and remove the object from $ConnectedSessions
			if ((${Global:ConnectedSessions}.Name -contains $Hostname) -and (-not(${Global:ConnectedSessions} | ? { $_.name -eq $Hostname}).SessionID)) 
			{

				write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found incomplete session object in $ConnectedSessions for '$Hostname'. Removing."

				#Found incomplete session connection. must remove it from the collection first.
				$_ndx = [array]::IndexOf(${Global:ConnectedSessions}, (${Global:ConnectedSessions}.Name -contains $Hostname))

				[void]$TaskCollection.RemoveAt($_ndx)
			        
			}

            write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating Session Container"

            [HPOneView.Appliance.Connection]$ApplianceConnection = New-Object HPOneView.Appliance.Connection

            #Figure out ConnectionId
            if (${Global:ConnectedSessions})
            {

                $tmpConnectionId = 1

                While (${Global:ConnectedSessions}.ConnectionId -contains $tmpConnectionId) 
                {

                    $tmpConnectionId++

                }

                $ApplianceConnection.ConnectionId = $tmpConnectionId
            
            }

			#Store the entire auth request for later deletion when issuing Disconnect-HPOVmgmt
            $ApplianceConnection.Name            = $Hostname
            $ApplianceConnection.UserName        = $UserName
            $ApplianceConnection.AuthLoginDomain = $AuthLoginDomain

            [void] ${Global:ConnectedSessions}.Add($ApplianceConnection)

            write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(${Global:ConnectedSessions} | out-string)"
            
        }

        if (-not($password))
        {

            [SecureString]$password = read-host -AsSecureString "Password"
            $decryptPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($password))
            
        }

        else 
        {

            $decryptPassword = $password

        }

        #Check to make sure the appliance X-API-Version is at least the supported minimum
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Checking X-API Version"
            
        try 
        {
            
            $applianceVersion = (Send-HPOVRequest $script:applXApiVersion -Hostname $Hostname).currentVersion

            if ($applianceVersion -and $applianceVersion -lt $script:applMinVersion ) 
            {

				[void] ${Global:ConnectedSessions}.Remove($ApplianceConnection)

                #Display terminating error
                $errorRecord = New-ErrorRecord System.NotImplementedException LibraryTooNew OperationStopped $Hostname -Message "The appliance you are connecting to supports an older version of this library.  Please visit https://github.com/HewlettPackard/POSH-HPOneView for a supported version of the library." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

        }
        catch [HPOneView.Appliance.NetworkConnectionException] 
        {

			[void] ${Global:ConnectedSessions}.Remove($ApplianceConnection)

            $errorRecord = New-ErrorRecord HPOneView.Appliance.NetworkConnectionException ApplianceNotResponding ResourceUnavailable 'Connect-HPOVMgmt' -TargetType "CMDLET" -Message "Unable to connect to '$Appliance' due to timeout." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        catch 
        {

			[void] ${Global:ConnectedSessions}.Remove($ApplianceConnection)
            write-error $_ -TargetObject "Connect-HPOVMgmt" -ErrorAction Stop 

        }

    }

    Process 
    {

        $authinfo = @{
        
            userName        = $UserName
            password        = $decryptPassword
            authLoginDomain = $AuthLoginDomain
            
        }

        try 
        {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending auth request"
            
            $resp = Send-HPOVRequest $script:loginSessionsUri POST $authinfo -Hostname $Hostname

        } 

        catch [HPOneView.Appliance.AuthSessionException] 
        {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid Username, Password or Auth Directory"

			#Remove Connection from global tracker
			[void] ${Global:ConnectedSessions}.Remove($ApplianceConnection)

            $errorRecord = New-ErrorRecord HPOneView.Appliance.AuthSessionException InvalidUsernameOrPassword AuthenticationError 'Connect-HPOVMgmt' -Message $_.Exception.Message 
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

		catch [HPOneview.Appliance.PasswordChangeRequired] 
        {

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Password needs to be changed. Use Set-HPOVInitialPassword if this is first time setup, or Set-HPOVUserPassword to update your own accounts password."

			[void] ${Global:ConnectedSessions}.Remove($ApplianceConnection)

			#Throw terminating error
			$errorRecord = New-ErrorRecord HPOneview.Appliance.PasswordChangeRequired PasswordExpired PermissionDenied 'Username' -Message ($global:ResponseErrorObject.message + " " + $global:ResponseErrorObject.recommendedActions + " Use Set-HPOVInitialPassword if this is first time setup, or Set-HPOVUserPassword to update your own accounts password.")
			$PSCmdlet.ThrowTerminatingError($errorRecord)   
        
        }
		    
        catch [Net.WebException] 
        {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response: $($resp)"

			[void] ${Global:ConnectedSessions}.Remove($ApplianceConnection)

            $errorRecord = New-ErrorRecord System.Net.WebException ApplianceNotResponding OperationStopped $Hostname -Message "The appliance at $Hostname is not responding on the network.  Check for firewalls or ACL's prohibiting access to the appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    end 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Authentication Response: $($resp | out-string)"

        #If a sessionID is returned, then the user has authenticated
        if ($resp.sessionID) 
        {
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Session token received: $($resp.sessionID)"
            
			(${Global:ConnectedSessions} | ? { $_.Name -EQ $Hostname } ).SessionID = $resp.sessionID
    
            #Get list of supported Roles from the appliance
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of supported roles from appliance."

            $roles = Send-HPOVRequest $Script:applianceRolesUri -Hostname $Hostname

            try 
			{ 
				
				$_ApplianceSecurityRoles = (Send-HPOVRequest $Script:applianceRolesUri -Hostname $Hostname).members.roleName 

				(${Global:ConnectedSessions} | ? { $_.Name -EQ $Hostname } ) | Add-Member -NotePropertyName ApplianceSecurityRoles -NotePropertyValue $_ApplianceSecurityRoles  -force
			
			}

            catch [HPOneview.Appliance.AuthPrivilegeException] 
			{ 
				
				(${Global:ConnectedSessions} | ? { $_.Name -EQ $Hostname } ) | Add-Member -NotePropertyName ApplianceSecurityRoles -NotePropertyValue $null -force
			
			}

			Return $ApplianceConnection

        }

        else 
        { 
                              
            Return $resp 

        }

    }

}

function Show-HPOVAppliance 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param()

    Begin 
	{

		Write-Warning "Show-HPOVAppliance CMDLET is deprecated.  Please update your scripts to use the `${Global:ConnectedSessions} global variable."

    }

    Process 
	{

    
    }

    End 
	{

		Return ${Global:ConnectedSessions}

    }

}

function Disconnect-HPOVMgmt 
{
    
    # .ExternalHelp HPOneView.120.psm1-help.xml
    
    [CmdletBinding()]
    Param
	(
    
        [parameter(Position = 0, Mandatory = $false, HelpMessage = "Enter the hostname or an array of hostnames")]
		[Alias('Appliance','ApplianceSession')]
        [Object]$Hostname = [System.Collections.ArrayList]${Global:ConnectedSessions}.Clone()
    
    )

    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"
		
		# // Clean up here, and add ConnectionTracker filtering if user provided connection name
		if (-not($Hostname))
        { 
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession ResourceUnavailable 'Disconnect-HPOVMgmt' -Message "No valid logon session available.  Please use Connect-HPOVMgmt to connecto to an appliance, and then use Disconnect-HPOVmgmt to terminate your session." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)
            
        }

    }

    Process 
    {

        if (-not($PSBoundParameters['Hostname']))
        {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No hostname(s) or connection(s) provided. Processing all connected sessions."

        }

        ForEach ($_Connection in $Hostname)
        {

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Connection: $($_Connection | fl * | Out-String)"

            if ($_Connection -is [String])
            {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Hostname provide, looking in global connection tracker for connection."

                [HPOneView.Appliance.Connection]$_Connection = ${Global:ConnectedSessions} | ? { $_.Name -eq $_Connection }

            }

        
            if ($_Connection -eq $Null)
            {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User Session not found in " + '${Global:ConnectedSessions}'
                
				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException UnableToLogoff ObjectNotFound 'Disconnect-HPOVMgmt' -Message "User session not found in library connection tracker (`${Global:ConnectedSessions}). Did you accidentially remove it,or have you not created a session to an appliance?"
                $PSCmdlet.WriteError($errorRecord)

            }
           
            else
            {


                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Attempting to logoff user '$($_Connection.Username)' from '$($_Connection.Name)'."

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending Delete Session ID request"

		        try 
                {
                
                    $Resp = Send-HPOVRequest $script:loginSessionsUri DELETE $_Connection.SessionId -Hostname $_Connection.Name

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing connection from global connection tracker"

                    $Global:ConnectedSessions.Remove($_Connection)
                    
                }
                
                #Need to clean up
                catch
                {
                
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]  Unable to complete logoff. Displaying error"
                    $PSCmdlet.ThrowTerminatingError($_)
                
                }

            }

        }

	}

    End
    {

    
    }

}

function Test-HPOVAuth
{

	[CmdletBinding()]
    Param
	(
    
        [parameter(Position = 0, Mandatory = $false, ValueFromPipeline, HelpMessage = "Enter the hostname or an array of hostnames")]
        [Object]$Appliance
    
    )

    Begin 
    {

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Caller: $Caller"

		if ($PSBoundParameters['Appliance'])
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify Auth for $Appliance"

		}

		else
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] -Appliance value via pipeline."
			
			$PipelineInput = $True

		}

	}

	Process
	{

		if ($PipelineInput)
		{
	
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify Auth for $($Appliance.Name)"

		}
		
		Switch ($Appliance.GetType().FullName)
		{

			'HPOneView.Appliance.Connection'
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Recieved HPOneView.Appliance.Connection Object: $($Appliance | Out-String)"

				If (-not(${Global:ConnectedSessions} | ? name -eq $Appliance.Name))
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError "$($Caller):$($Appliance.Name)" -Message "No Appliance connection session found for '$($Appliance.Name)' within `${Global:ConnectedSessions} global variable.  This CMDLET requires at least one active connection to an appliance.  Please use Connect-HPOVMgmt to establish a connection, then try your command agian." #-verbose

				}

			}

			'System.String'
			{

				if (-not(${Global:ConnectedSessions} | ? name -eq $Appliance))
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError "$($Caller):$($Appliance)" -Message "No connection session found for '$($Appliance)' within `${Global:ConnectedSessions} global variable.  This CMDLET requires at least one active connection to an appliance.  Please use Connect-HPOVMgmt to establish a connection, then try your command agian." #-verbose

				}

				elseif (${Global:ConnectedSessions} | ? name -eq $Appliance)
				{
					
					$Appliance = ${Global:ConnectedSessions} | ? name -eq $Appliance

				}

			}

		}

	    If ($errorRecord)
		{ 

            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

		Else
		{

			Return $Appliance

		}

	}

}

function New-HPOVResource 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param
    (

		[parameter(Position = 0, Mandatory = $true, HelpMessage = "Enter the URI string of the resource type to be created")]
		[ValidateNotNullOrEmpty()]
		[string] $uri,

		[parameter(Position = 1, Mandatory = $true, HelpMessage = "Enter the resource object definition")]
		[ValidateNotNullOrEmpty()]
		[object] $resource,

		[parameter(Mandatory, ValueFromPipeline, HelpMessage = "Enter the hostname or an array of hostnames")]
        	[Object]$ApplianceConnection = $null
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		Try 
		{
		
			$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

		}

		Catch [HPOneview.Appliance.AuthSessionException] 
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $ApplianceConnection -Message $_.Exception.Message -InnerException $_.Exception
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		Catch 
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		$_NewResourceCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		Try
		{

			$_resp = Send-HPOVRequest $uri POST $resource -Hostname $ApplianceConnection

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		[void]$_NewResourceCollection.Add($_resp)

    }

	End
	{

		Return $_NewResourceCollection

	}

}

function Set-HPOVResource 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml
    [CmdletBinding()]
    Param 
	(

		[parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true, HelpMessage = "Enter the resource object that has been modifed")]
		[ValidateNotNullOrEmpty()]
		[ValidateScript({$_.Uri})]
		[object]$resource,

		[parameter(Mandatory = $false)]
		[string]$force = $false,

		[parameter(Mandatory, ValueFromPipeline, HelpMessage = "Enter the hostname or an array of hostnames")]
        [Object]$ApplianceConnection = $null
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		Try 
		{
		
			$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

		}

		Catch [HPOneview.Appliance.AuthSessionException] 
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $ApplianceConnection -Message $_.Exception.Message -InnerException $_.Exception
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}


		Catch 
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		$_SetResourceCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		$uri = $resource.uri

        if ($force -eq $true) { $uri += "?force=true" }

		Try
		{

			$_resp = Send-HPOVRequest $uri PUT $resource -Hostname $ApplianceConnection

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		[void]$_SetResourceCollection.Add($_resp)

    }

	End
	{

		Return $_SetResourceCollection

	}

}

function Remove-HPOVResource 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml
     
    [CmdletBinding()]
    Param 
	(

		[parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true, HelpMessage = "Provide the Object, Name or URI of the resource object to delete/remove.")]
		[ValidateNotNullorEmpty()]
		[Alias("ro",'nameOruri','uri','name')]
		[object]$Resource,

		[parameter(Mandatory = $false)]
		[switch]$force,

		[parameter(Mandatory, ValueFromPipeline, HelpMessage = "Enter the hostname or object of the appliance connection")]
		[ValidateNotNullorEmpty()]
		[Object]$ApplianceConnection = $null
	
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		Try 
		{
		
			$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

		}

		Catch [HPOneview.Appliance.AuthSessionException] 
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $ApplianceConnection -Message $_.Exception.Message -InnerException $_.Exception
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		Catch 
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		$_RemoveResourceCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{
         
        switch ($Resource.GetType().Name) 
		{ 

            "PSCustomObject"  
			{ 
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resource object passed."
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Name: $($Resource.name)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] URI: $($Resource.uri)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Type: $($Resource.type)"

                [void]$_RemoveResourceCollection.Add($Resource)
                
            }
         
            "String"
			{
                
                #nameOrUri value is a URI
                if ($Resource.StartsWith("/rest"))
				{

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resource URI passed '$($Resource)', getting object"

					Try
					{

						$_resource = Send-HPOVRequest $Resource -Hostname $ApplianceConnection

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}
					
					[void]$_RemoveResourceCollection.Add($_resource)

                }

                #It's a string value
                else 
				{
                    
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resource name provided: $($Resource)"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Querying appliance index for resource."

                    #Use Index filtering to locate object
					Try
					{

						$_resources = Send-HPOVRequest ($indexUri + "?filter=name='$Resource'") -Hostname $ApplianceConnection

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found $($_resources.count) resources."

                    if($_resources.members)
					{

                        #Error should only be displayed if a Name was provided, and it wasn't globally unique on the appliance (i.e. Server Profile and Ethernet Network with the same name, which is completely valid.)
                        if($_resources.count -gt 1)
						{
                            
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resources found: $($_resources.members | % { $_.name + " of type " + $_.category })"

                            $errorRecord = New-ErrorRecord InvalidOperationException ResourceNotUnique LimitsExceeded 'Resource' -Message "'$Resource' is not unique.  Located $($_resources.count) resources with the same value." #-verbose
                            $pscmdlet.ThrowTerminatingError($errorRecord)

                        }

                        else 
						{ 
                        
                            [void]$_RemoveResourceCollection.Add($_resources.members)

                        }

                    }

                    else 
					{ 

                        $errorRecord = New-ErrorRecord InvalidOperationException ResourceNotFound ObjectNotFound 'Resource' -Message "Resource '$Resource' not found. Please check the resource value provided and try the call again." #-verbose
                        $pscmdlet.ThrowTerminatingError($errorRecord)

                    }

                }

            }   
			  
        }

	}
    
	End
	{

		$n = 1

		ForEach ($_resource in $_RemoveResourceCollection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_resource.name)', $n of $($_RemoveResourceCollection.Count)"

            if ([bool]$force) 
			{ 
				
				$_resource.uri += "?force=true" 
			
			}

            Try
			{
								
				Send-HPOVRequest $_resource.uri DELETE

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$n++

        }

    }

}

function Set-DefaultDisplay ($resources, [string[]]$defProps) 
{
<#
     .DESCRIPTION 
     Handy internal utility function to set default display properties
#>
    $defDisplayProps = New-Object -TypeName System.Management.Automation.PSPropertySet -ArgumentList DefaultDisplayPropertySet, $defProps
    $PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]$defDisplayProps 

    ForEach ($resource in $resources) 
	{

        Add-Member -InputObject $resource -MemberType MemberSet -Name PSStandardMembers -Value $PSStandardMembers -Force

    }

}

function ConvertFrom-HTML 
{

    [CmdletBinding()]
    param
	(

        [Parameter(Position = 0, ValueFromPipeline = $True, Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [System.String] $html,

        [switch]$NoClobber
        
    )

    Begin { }

    Process 
	{
        
        # remove line breaks, replace with spaces
        if (-not ($NoClobber.ispresent)) { $html = $html -replace "(`r|`n|`t)", " " }
        
        # remove invisible content
        @('head', 'style', 'script', 'object', 'embed', 'applet', 'noframes', 'noscript', 'noembed') | % {$html = $html -replace "<$_[^>]*?>.*?</$_>", "" }
        
        # Condense extra whitespace
        $html = $html -replace "( )+", " "
        
        # Add line breaks
        @('div','p','blockquote','h[1-9]') | % { $html = $html -replace "</?$_[^>]*?>.*?</$_>", ("`n" + '$0' )} 

        # Add line breaks for self-closing tags
        @('div','p','blockquote','h[1-9]','br') | % { $html = $html -replace "<$_[^>]*?/>", ('$0' + "`n")} 
        
        #strip tags 
        $html = $html -replace "<[^>]*?>", ""
         
        # replace common entities
        @(
            @("&amp;bull;", " * "),
            @("&amp;lsaquo;", "<"),
            @("&amp;rsaquo;", ">"),
            @("&amp;(rsquo|lsquo);", "'"),
            @("&amp;(quot|ldquo|rdquo);", '"'),
            @("&amp;trade;", "(tm)"),
            @("&amp;frasl;", "/"),
            @("&amp;(quot|#34|#034|#x22);", '"'),
            @('&amp;(amp|#38|#038|#x26);', "&amp;"),
            @("&amp;(lt|#60|#060|#x3c);", "<"),
            @("&amp;(gt|#62|#062|#x3e);", ">"),
            @('&amp;(copy|#169);', "(c)"),
            @("&amp;(reg|#174);", "(r)"),
            @("&amp;nbsp;", " "),
            @("&amp;(.{2,6});", ""),
            @("&nbsp;", " ")
        ) | % { $html = $html -replace $_[0], $_[1] }

    }

    End 
	{
    
        return $html

    }

}


#######################################################
# Appliance Configuration: 
#

Function Get-HPOVApplianceCertificateStatus 
{

    # .ExternalHelp HPOneView.120.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = 'Default')]

	Param 
	(
		
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)
    
    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_ApplianceStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"
			
			Try
			{

				$_status = Send-HPOVRequest $applianceSslCert -Hostname $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$_status.PSObject.TypeNames.insert(0,'HPOneView.Appliance.ApplianceSslCertificateStatus')

			[void]$_ApplianceStatus.Add($_status)

		}

	}

	End 
	{

		Return $_ApplianceStatus	

	}

}

Function New-HPOVApplianceSelfSignedCertificate 
{

    # .ExternalHelp HPOneView.120.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = 'Default', ConfirmImpact = 'High')]

	Param 
	(

		[parameter(Mandatory = $true, ParameterSetName = 'Default', Position = 0)]
        [Alias('C')]
        [ValidateNotNullOrEmpty()]
        [string]$Country,

        [Parameter(Mandatory = $true, ParameterSetName = 'Default', Position = 1)]
        [Alias('ST','Province')]
		[ValidateNotNullOrEmpty()]	
		[string]$State,

        [Parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 2)]
		[Alias('L','Locality')]	
		[ValidateNotNullOrEmpty()]
		[string]$City,

        [parameter(Mandatory = $true, ParameterSetName = 'Default', Position = 3)]
        [Alias('O')]
		[ValidateNotNullOrEmpty()]
		[string]$Organization,

        [parameter(Mandatory = $true, ParameterSetName = 'Default', Position = 4)]
        [Alias('CN')]
		[ValidateNotNullOrEmpty()]
		[string]$CommonName,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 5)]
		[Alias('OU')]	
		[ValidateNotNullOrEmpty()]
        [string]$OrganizationalUnit,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 6)]
		[Alias('SAN')]	
		[ValidateNotNullOrEmpty()]
        [string]$AlternativeName,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 7)]
		[Alias('Contact')]	
		[ValidateNotNullOrEmpty()]
        [string]$ContactName,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 8)]
		[ValidateNotNullOrEmpty()]
        [string]$Email,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 9)]
		[Alias('Sur')]	
		[ValidateNotNullOrEmpty()]
        [string]$Surname,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 10)]
		[Alias('Giv')]	
		[ValidateNotNullOrEmpty()]
        [string]$GivenName,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 11)]
		[ValidateNotNullOrEmpty()]
        [string]$Initials,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 12)]
		[ValidateNotNullOrEmpty()]
        [string]$DNQualifier,

		[parameter(Mandatory)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = $null

	)

	Begin
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

        $_TaskStatus = New-Object System.Collections.ArrayList

	}

	Process 
	{	
			
		$_SelfSignedCertObject = NewObject -SelfSignedCert

		$_SelfSignedCertObject.country            =  $Country
		$_SelfSignedCertObject.state              =  $State
		$_SelfSignedCertObject.locality           =  $City
		$_SelfSignedCertObject.organization       =  $Organization
		$_SelfSignedCertObject.commonName         =  $ContactName
		$_SelfSignedCertObject.organizationalUnit =  $OrganizationalUnit
		$_SelfSignedCertObject.alternativeName    =  $AlternativeName
		$_SelfSignedCertObject.contactPerson      =  $ContactName
		$_SelfSignedCertObject.email              =  $Email
		$_SelfSignedCertObject.surname            =  $Surname
		$_SelfSignedCertObject.givenName          =  $GivenName
		$_SelfSignedCertObject.initials           =  $Initials
		$_SelfSignedCertObject.dnQualifier        =  $DNQualifier

		Try
		{

			Write-Warning 'Updates to the certificate will require the appliance internal web server to be restarted. There will be a temporary service interruption estimated to last 30 seconds.'

			if ($pscmdlet.ShouldProcess($ApplianceConnection.Name,"generate new self-signed certificate"))
			{    

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing: $($_SelfSignedCertObject | out-string)"

				$_resp = Send-HPOVRequest $applianceCsr POST $_SelfSignedCertObject -HostName $ApplianceConnection
        
			}

			else 
			{

				if ($PSBoundParameters['whatif'].ispresent) 
				{ 

					write-warning "-WhatIf was passed, would have proceeded 'New Self-Signed Certificate for Appliance $($ApplianceConnection.Name)'."

					$_resp = $null

				}

				else 
				{

					#If here, user chose "No", end processing

					$_resp = $Null

				}

			}

			[void]$_TaskStatus.Add($_resp)

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

	}

	End 
	{

		Return $_TaskStatus

	}

}

Function New-HPOVApplianceCsr 
{

    # .ExternalHelp HPOneView.120.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = 'Default')]

	Param 
	(

		[parameter(Mandatory = $true, ParameterSetName = 'Default', Position = 0)]
        [Alias('C')]
        [ValidateNotNullOrEmpty()]
        [string]$Country,

        [Parameter(Mandatory = $true, ParameterSetName = 'Default', Position = 1)]
        [Alias('ST','Province')]
		[ValidateNotNullOrEmpty()]	
		[string]$State,

        [Parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 2)]
		[Alias('L','Locality')]	
		[ValidateNotNullOrEmpty()]
		[string]$City,

        [parameter(Mandatory = $true, ParameterSetName = 'Default', Position = 3)]
        [Alias('O')]
		[ValidateNotNullOrEmpty()]
		[string]$Organization,

        [parameter(Mandatory = $true, ParameterSetName = 'Default', Position = 4)]
        [Alias('CN')]
		[ValidateNotNullOrEmpty()]
		[string]$CommonName,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 5)]
		[Alias('OU')]	
		[ValidateNotNullOrEmpty()]
        [string]$OrganizationalUnit,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 6)]
		[Alias('SAN')]	
		[ValidateNotNullOrEmpty()]
        [string]$AlternativeName,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 7)]
		[Alias('Contact')]	
		[ValidateNotNullOrEmpty()]
        [string]$ContactName,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 8)]
		[ValidateNotNullOrEmpty()]
        [string]$Email,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 9)]
		[Alias('Sur')]	
		[ValidateNotNullOrEmpty()]
        [string]$Surname,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 10)]
		[Alias('Giv')]	
		[ValidateNotNullOrEmpty()]
        [string]$GivenName,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 11)]
		[ValidateNotNullOrEmpty()]
        [string]$Initials,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 12)]
		[ValidateNotNullOrEmpty()]
        [string]$DNQualifier,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 13)]
        [string]$ChallengePassword,

        [parameter(Mandatory = $false, ParameterSetName = 'Default', Position = 14)]
		[Alias('UN')]	
		[ValidateNotNullOrEmpty()]
        [string]$UnstructuredName,

		[parameter(Mandatory)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = $null

	)

	Begin
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

        $_TaskStatus = New-Object System.Collections.ArrayList

		#Handle runtime, none-script use
		if ($PSBoundParameters['ChallengePassword'] -and $ChallengePassword -eq '*'  ) 
		{

			Do 
			{

				[SecureString]$ChallengePassword        = Read-Host "Challenge Password:" -AsSecureString

				[SecureString]$ChallengePasswordConfirm = Read-Host "Confirm Challenge Password:" -AsSecureString

				$pwd1_text = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($ChallengePassword))

				$pwd2_text = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($ChallengePasswordConfirm))

				if (-not($pwd1_text -ceq $pwd2_text)) 
				{

					Write-Error "Passwords to not match. Please try again." -ea Continue

					$PasswordsMatch = $False

				}

				else { $PasswordsMatch = $True }

			} Until ($PasswordsMatch)

		}	

    }

	Process 
	{

		$_CsrObject = NewObject -ApplianceCSR

		$_CsrObject.country            =  $Country
		$_CsrObject.state              =  $State
		$_CsrObject.locality           =  $City
		$_CsrObject.organization       =  $Organization
		$_CsrObject.commonName         =  $ContactName
		$_CsrObject.organizationalUnit =  $OrganizationalUnit
		$_CsrObject.alternativeName    =  $AlternativeName
		$_CsrObject.contactPerson      =  $ContactName
		$_CsrObject.email              =  $Email
		$_CsrObject.surname            =  $Surname
		$_CsrObject.givenName          =  $GivenName
		$_CsrObject.initials           =  $Initials
		$_CsrObject.dnQualifier        =  $DNQualifier
		$_CsrObject.unstructuredName   =  $UnstructuredName
		$_CsrObject.challengePassword  =  $ChallengePassword

		Try
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing: $($_CsrObject | out-string)"

			$_resp = Send-HPOVRequest $applianceCsr POST $_CsrObject -HostName $ApplianceConnection
				
			[void]$_TaskStatus.Add($_resp)

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}


	}

	End 
	{

		Return $_TaskStatus

	}

}

Function Install-HPOVApplianceCertificate 
{

    # .ExternalHelp HPOneView.120.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = 'Default')]

	Param 
	(

		[parameter(Mandatory = $true, ParameterSetName = 'Default', Position = 0, ValueFromPipeline = $true)]
        [Alias('PrivateKey')]
		[ValidateNotNullOrEmpty()]
        [Object]$Certificate,

		[parameter(Mandatory)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = $null

	)

	Begin
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

        $_TaskStatus = New-Object System.Collections.ArrayList

    }

	Process 
	{

			
		#handle new line so as not to bork ConvertTo-Json in Send-HPOVRequest
		$_TempCertificate += ($Certificate | Out-String) -join "\n"

		$_CertificateObject = [PSCustomObject]@{

			type       = "CertificateDataV2";
			base64Data = $_TempCertificate

		}

		Try
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing: $($_CsrObject | out-string)"

			$_resp = Send-HPOVRequest $applianceCsr PUT $_CertificateObject -HostName $ApplianceConnection
				
			[void]$_TaskStatus.Add($_resp)

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

	}

	End 
	{

		Return $_TaskStatus

	}

}

function Get-HPOVPendingUpdate 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param 
	(

		[parameter(Mandatory = $false,ParameterSetName = 'Default')]
		[ValidateNotNullorEmpty()]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			#Check to see if ane existing update is present.  Report to user if it is, and tell them to use -InstallNow
			Try
			{
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Checking if pending update exists"

				$_PendingUpdate = Send-HPOVRequest $applUpdatePending -Hostname $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			if ($_PendingUpdate)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Update found $($_PendingUpdate.fileName), $($_PendingUpdate.version)"

				$_PendingUpdate.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.Update.Pending')

			}

			$_PendingUpdate

		}

	}

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Finished"

    }

}

function Install-HPOVUpdate 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = 'Update',SupportsShouldProcess = $True, ConfirmImpact = 'High')]
	Param 
	(

		[parameter(Position = 0, Mandatory = $true, ParameterSetName = 'Update')]
        [parameter(Position = 0, Mandatory = $true, ParameterSetName = 'Stage')]
        [Alias('f')]
        [ValidateScript({Test-Path $_})]
        [string]$File,
        
        [Parameter(Position = 1, Mandatory = $false, ParameterSetName = 'Update')]
        [parameter(Position = 0, Mandatory = $false, ParameterSetName = 'StageInstall')]
        [string]$Eula,

        [Parameter(Mandatory = $false, ParameterSetName = 'Update')]
        [Parameter(Mandatory = $false, ParameterSetName = 'Stage')]
        [Parameter(Mandatory = $false, ParameterSetName = 'List')]
        [switch]$DisplayReleaseNotes,

        [parameter(Mandatory = $true, ParameterSetName = 'Stage')]
        [switch]$Stage,

        [parameter(Mandatory = $true, ParameterSetName = 'StageInstall')]
        [switch]$InstallNow,
        
        [parameter(Mandatory = $true, ParameterSetName = 'List')]
        [Alias('list')]
        [switch]$ListPending,

		[parameter(Mandatory = $false,ParameterSetName = "Update")]
		[parameter(Mandatory = $false,ParameterSetName = "Stage")]
		[parameter(Mandatory = $false,ParameterSetName = "List")]
		[ValidateNotNullorEmpty()]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_StatusCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			#Check to see if ane existing update is present.  Report to user if it is, and tell them to use -InstallNow
			Try
			{
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Checking if pending update exists"

				$_PendingUpdate = Send-HPOVRequest $applUpdatePending -Hostname $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
			
			if ($_PendingUpdate)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Update found $($_PendingUpdate.fileName), $($_PendingUpdate.version)"

				$_PendingUpdate.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.Update.Pending')

			}

			Switch ($PsCmdlet.ParameterSetName) 
			{
				
				#List staged update
				"List" 
				{

				    #If the request is to install a staged update, we need to handle no response.  If request is Update, then no pending update will exist yet.
				    If (-not($_PendingUpdate)) 
					{

				        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - No pending update found. Return is Null"

				        $errorRecord = New-ErrorRecord InvalidOperationException PendingUpdateNotFound ObjectNotFound 'Install-HPOVUpdate' -Message "No pending update found. Please first upload update and try again."
				        $pscmdlet.ThrowTerminatingError($errorRecord)

				    }

					$_PendingUpdate
				    
				    If ($PSBoundParameters['DisplayReleaseNotes'])
					{
                        
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Displaying Release Notes"

						#Display Release Notes
						Try
						{

							Send-HPOVRequest "/rest/appliance/firmware/document-content/$($upload.fileName)/release" -Hostname $_Connection | ConvertFrom-HTML

						}
							
						Catch
						{

							$PScmdlet.ThrowTerminatingError($_)

						}

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Done. Displayed update release notes."

					}
				    
				    Return
				}

				#Stage Update
				"Stage" 
				{              

					if (-not($_PendingUpdate)) 
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Stage Only"
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - UPLOAD FILE: $($File)"

						Try 
						{
                    
							#Upload update
							$FileName = Get-Item $File

							$_upload = Upload-File $applUpdate $File $_Connection.Name
                    
						}

						Catch 
						{
                        
							$errorRecord = New-ErrorRecord InvalidOperationException StageUpdateFailed InvalidResult 'Install-HPOVUpdate' -Message $_.Exception.Message #-verbose
							$pscmdlet.ThrowTerminatingError($errorRecord)

						}

						If ($PSBoundParameters['DisplayReleaseNotes'])
						{
                        
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Displaying Release Notes"

							#Display Release Notes
							Try
							{

								Send-HPOVRequest "/rest/appliance/firmware/document-content/$($upload.fileName)/release" -Hostname $_Connection | ConvertFrom-HTML

							}
							
							Catch
							{

								$PScmdlet.ThrowTerminatingError($_)

							}

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Done. Displayed update release notes."

						}

						Return $_upload

					}

					else 
					{
                    
						$errorRecord = New-ErrorRecord HPOneView.Appliance.FirmwareUpdateException PendingUpdateConflict ResourceExists 'Install-HPOVUpdate' -Message "An existing appliance update has been staged. Version: $($pendingUpdate.version) Filename: $($pendingUpdate.fileName)  Please use the -InstallUpdate parameter to proceed with the update, or use Remove-HPOVPendingUpdate cmdlet to remove the staged update." #-verbose
						Throw $errorRecord

					}

				}

				#Upload update then install update below.
				"Update" 
				{

					if ($_PendingUpdate) 
					{

						$errorRecord = New-ErrorRecord InvalidOperationException PendingUpdateFound ResourceExists 'Install-HPOVUpdate' -Message "A pending update was found.  File name: $($pendingUpdate.fileName); Update Version: $($pendingUpdate.version). Please remove the update before continuing and try again."
						$pscmdlet.ThrowTerminatingError($errorRecord)
					
					}
					                
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - UPLOAD FILE: $($File)"

					Try 
					{
					
						#Upload update
						$FileName = Get-Item $File

						$pendingUpdate = Upload-File $script:applUpdate $File $_Connection.Name

						#Pause for 30 seconds? need to make sure appliance has finished processing update file before invoking update
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Sleeping for 5 seconds."

						Start-Sleep -Seconds 5
                
					}

					Catch 
					{

						$errorRecord = New-ErrorRecord InvalidOperationException UploadUpdateFailed InvalidResult 'Install-HPOVUpdate' -Message $_.Exception.Message #-verbose
						$pscmdlet.ThrowTerminatingError($errorRecord)

					}

				}

			}

			#Process pending update
			if (($PsCmdlet.ParameterSetName -eq "StageInstall") -or ($PsCmdlet.ParameterSetName -eq "Update" )) 
			{

			    #If the request is to install a staged update, we need to handle no response.  If request is Update, then no pending update will exist yet.
			    If ((-not($_PendingUpdate)) -and ($PsCmdlet.ParameterSetName -eq "StageInstall")) 
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - No pending update found. Return is Null"
			        
			        $errorRecord = New-ErrorRecord InvalidOperationException StorageSystemResourceNotFound ObjectNotFound 'Install-HPOVUpdate' -Message "No pending update found. Please first upload update and try again."
			        $pscmdlet.ThrowTerminatingError($errorRecord)

			    }


				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Install Now"

				$_PendingUpdate

			    If ($Eula -ne "accept") 
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - EULA NOT Accepted"
			        
			        #Display eula of update
			        
			        (New-Object System.Net.WebClient).DownloadString("https://$($_Connection.ApplianceConnection.Name)/ui-js/pages/upgrade/eula_content.html") | ConvertFrom-HTML -NoClobber

			        Do { $acceptEula = Read-Host "Accept EULA (Must type ACCEPT)" } Until ($acceptEula -eq "Accept")

			    }
			        
			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - EULA Accepted"

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Beginning update $($_PendingUpdate.fileName)"

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Estimated Upgrade Time $($_PendingUpdate.estimatedUpgradeTime) minutes"

			    #Check to see if the update requires an appliance reboot.
			    if ($_PendingUpdate.rebootRequired) 
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Appliance reboot required $($_PendingUpdate.rebootRequired)"

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Prompting for confirmation"

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Is confirmation overridden $([bool]$confirm)"

					Write-Warning "Reboot required for the update."

			        #If it does require a reboot, then we need to prompt for confirmation. Overriden by -confirm:$false
			        if ($pscmdlet.ShouldProcess($_Connection.Name,"upgrade appliance using $($_PendingUpdate.fileName)")) 
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Appliance reboot required and user selected YES or passed -Confirm:`$false, executing Invoke-Upgrade"

						Try
						{

							$_resp = Invoke-Upgrade $_PendingUpdate

						}

						Catch
						{

							$PSCmdlet.ThrowTerminatingError($_)

						}
						
					}

					else 
					{

						if ($PSBoundParameters['whatif']) 
						{ 

			                write-warning "-WhatIf was passed, would have initiated appliance update."

			                $resp = $null

			            }

			            else 
						{

			    	        #If here, user chose "No", end processing
			    	        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - User selected NO."

			                $resp = $Null

			            }

					}

			    }

			    else
				{
					 
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Appliance reboot NOT required, executing Invoke-Upgrade"
					
					Try
					{

						$_resp = Invoke-Upgrade $_PendingUpdate

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

			    }

				$resp

			}

		}

	}

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Finished"

    }

}

function Invoke-Upgrade  
{
	[CmdletBinding()]
	Param 
	(

		[parameter(Mandatory = $true)]
		[ValidateNotNullorEmpty()]
		[Object]$PendingUpdate

	)

    Begin 
	{
	
	    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		$_FinalStatus = $null

	}

	Process 
	{

		Try
		{

			$_updateTask = Send-HPOVRequest ("$script:applUpdatePending"+"?file=$($pendingUpdate.fileName)") PUT -Hostname $PendingUpdate.ApplianceConnection.Name

		}
		
		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

        $sw = [System.Diagnostics.Stopwatch]::StartNew()

        #Loop to display progress-bar
        Do 
		{

            #Connect to update monitor web process
			Try
			{

				$_MonitorUpdate = Send-HPOVRequest $applUpdateMonitor -Hostname $PendingUpdate.ApplianceConnection.Name

			}
		
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
                        
            #Remove % from value in order to get INT
            if ($_MonitorUpdate.percentageCompletion) 
			{ 
				
				$percentComplete = $monitorUpdate.percentageCompletion.replace("%","") 
			
			}
            
			else 
			{ 
				
				$percentComplete = 0 
			
			}
                        
            #Remove " State = " to get proper status
            if ($_MonitorUpdate.status) 
			{ 
				
				$updateStatus = $monitorUpdate.status -replace " ","" -replace "State=","" 
			
			}

            else 
			{ 
				
				$updateStatus = "Starting" 
			
			}

			$sw = [System.Diagnostics.Stopwatch]::StartNew()		    
            
			#Handle the call from -Verbose so Write-Progress does not get borked on display.
            if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
			{ 
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Skipping Write-Progress display."  

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Update Status: Installing appliance update $($PendingUpdate.version), $updateStatus $percentComplete% [$($sw.elapsed.minutes)min $($sw.elapsed.seconds)sec]"  
			
			}
                          
		    else 
			{ 
				
				Write-Progress -id 1 -activity "Installing appliance update $updateVersion " -status "$updateStatus $percentComplete% [$($sw.elapsed.minutes)min $($sw.elapsed.seconds)sec]" -percentComplete $percentComplete 
			
			}

			if ($updateStatus -eq "UpdateReboot") 
			{

				#Handle the call from -Verbose so Write-Progress does not get borked on display.
				if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
				{ 

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] pausing for 5 minutes while appliance reboots. Invoking Start-Sleep"
					
					Start-Sleep -Seconds 300

				}

				else 
				{ 
					
					$time = 300

					foreach ($i in (1..$time)) 
					{

					    $percentage = $i / $time
				        
						Write-Progress -id 1 -activity "Installing appliance update $updateVersion " -status "$updateStatus $percentComplete% [$($sw.elapsed.minutes)min $($sw.elapsed.seconds)sec]" -percentComplete $percentComplete

						Write-Progress -id 2 -parent 1 -activity "Appliance Rebooting" -status "Pausing for 5 minutes" -percentComplete ($percentage * 100) -SecondsRemaining ($time - $i)

					    Start-Sleep 1

					}
						
					Write-Progress -id 2 -parent 1 -activity "Appliance Rebooting" -status "Pausing for 5 minutes" -Completed			
					
				}

			}

        } Until ([int]$percentComplete -eq 100)
                
        $sw.Stop()

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Upgrade operation took $($sw.elapsed.minutes)min, $($sw.elapsed.seconds)sec."

        #Retrieve final update status
        Try
		{

			$_FinalStatus = Send-HPOVRequest $applUpdateNotification -Hostname $PendingUpdate.ApplianceConnection.Name

		}

		Catch
		{

			$PScmdlet.ThrowTerminatingError($_)

		}

        Write-Progress -activity "Installing appliance update $updateVersion " -status $updateStatus -percentComplete $percentComplete

		Write-Progress -activity "Installing appliance update $updateVersion " -status $updateStatus -Completed

    }

	End 
	{

		Return $_FinalStatus

    }

}

function Remove-HPOVPendingUpdate 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = 'Default', SupportsShouldProcess = $True,ConfirmImpact = 'High')]
	Param 
	(
	
		[parameter(Mandatory = $false, ParameterSetName = "Default")]
		[ValidateNotNullorEmpty()]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	
	)

    Begin 
	{
    
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}
    
    }

    Process 
	{ 

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			#Check to see if ane existing update is present.  Report to user if it is, and tell them to use -InstallNow
			Try
			{
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Checking if pending update exists"

				$_PendingUpdate = Send-HPOVRequest $applUpdatePending -Hostname $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
			
			if ($_PendingUpdate)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Update found $($_PendingUpdate.fileName), $($_PendingUpdate.version)"

				$_PendingUpdate.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.Update.Pending')

				$_PendingUpdate

				if ($pscmdlet.ShouldProcess($_Connection.Name,'remove pending update, $($pendingUpdate.fileName) from appliance')) 
				{

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing pending update from applinace."

				    

					Try
					{
						
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Checking if pending update exists"

						$_resp = Send-HPOVRequest $applUpdatePending DELETE -Hostname $_Connection

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}

				else 
				{

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No pending update found"

				}

			}

		}

	}

    End 
	{ 
    

    }

}

function Get-HPOVVersion 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param
	(

		[parameter(Mandatory = $false)]
        [switch]$ApplianceVer,

		[parameter(Mandatory = $false)]
        [switch]$CheckOnline,

		[parameter(Position = 0, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)
	
	Begin 
	{
	
		
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		ForEach ($_connection in $ApplianceConnection)
		{

			switch ($_connection.GetType().Name)
			{

				'Connection' 
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing HPOneView.Appliance.Connection: $($_Connection.Name)"
				
					[void]$_Connections.Add($_connection.Name)
				
				}

				'String'
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing: $_Connection"

					[void]$_Connections.Add($_connection)

				}

			}

		}

		$_ApplianceVersionCollection = New-Object System.Collections.ArrayList
	
	}
    
    Process 
	{

        $versionInfo = [PSCustomObject]@{ 

            "OneViewPowerShellLibrary" = $script:ModuleVersion.ToString();
            "libraryLoadedPath"        = (split-path -parent (get-module -Name HPOneView.200).path)

        }

		$versionInfo | % { $_.PSObject.TypeNames.insert(0,'HPOneView.Appliance.Version.Base') }
		
		$versionInfo

        #If the user provided the -Appliance switch, display the appliance and X-API versions
        If ($PSBoundParameters['ApplianceVer'])
		{

			ForEach ($_connection in $ApplianceConnection)
			{
			
				$_applianceversioninfo = NewObject -ApplianceVersion

				$applVersionInfo = Send-HPOVRequest $script:applVersion -Hostname $_connection

				$_applianceversioninfo.applianceName    = $_connection
				$_applianceversioninfo.softwareVersion  = $applVersionInfo.softwareVersion 
				$_applianceversioninfo.major            = $applVersionInfo.major
				$_applianceversioninfo.minor            = $applVersionInfo.minor
				$_applianceversioninfo.xapiVersion      = (Get-HPOVXApiVersion -ApplianceConnection $_connection).currentVersion
				$_applianceversioninfo.modelNumber      = $applVersionInfo.modelNumber
				
				$_applianceversioninfo.PSObject.TypeNames.insert(0,'HPOneView.Appliance.Version.Extended')
			
				[void]$_ApplianceVersionCollection.Add($_applianceversioninfo)
			
			}

			if ($_ApplianceVersionCollection.Count -gt 0)
			{

				$_ApplianceVersionCollection

			}

        }

        if ($PSboundParameters['CheckOnline']) 
		{

            try 
			{ 
                
                $resp = Invoke-RestMethod -Method GET -Uri $script:repository

                $versionMajorMinor = "$($ModuleVersion.major).$($ModuleVersion.minor)"

                #filter for versions that match Major and Minor release, and exclude the HP VCM to OneView Migration Tool
                $matchedVersions = $resp | ? { $_.tag_name -like "v$versionMajorMinor*" -and (-not($_.tag_name.startswith('HPVCtoOV'))) -and (-not($_.tag_name.startswith('HPSIMtoOV'))) } 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found versions online: $($matchedVersions.tag_name -join ", ")"

                $newerVersion = $false

                #Compare the releases
                $matchedVersions | % { 
    
                    if ($newerVersion) { write-verbose "Found previOut version to compare: $newerVersion" }

                    [version]$version = $_.tag_name -replace "v","" 

                    write-verbose "Comparing $version to $([version]$versionInfo.OneViewPowerShellLibrary)" 
        
                    #Compare found version with library
                    if (-not($newerVersion) -and $version.build -gt ([version]$versionInfo.OneViewPowerShellLibrary).build) 
					{
            
                        [version]$newerVersion = $version
                        $newerVersionObj = $_

						write-verbose "Newer version found: $newerVersion" 

                    }

                    elseif ($newerVersion.Build -lt $version.Build -and $version.build -gt ([version]$versionInfo.OneViewPowerShellLibrary).build) 
					{

                        [version]$newerVersion = $version
                        $newerVersionObj = $_

						write-verbose "Newer version found: $newerVersion" 

                    }
    
                }

                if ($newerVersion) 
				{ 

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found $([string]$version)"

                    if ($ReleaseNotes) { $newerVersionObj.body -replace "## ","" -replace "\*","  • " }

                    $caption = "Please Confirm";
                    $message = "You currently have v$($versionInfo.OneViewPowerShellLibrary) installed.  The HP OneView PowerShell Library v$([string]$newerVersion) was found that is newer.  Do you want to download the current version of the HP OneView POSH Library (will open your web browser for you to download)?";
                    $yes = new-Object System.Management.Automation.Host.ChoiceDescription "&Yes","Open your browser to download latest HP OneView POSH Library version.";
                    $no = new-Object System.Management.Automation.Host.ChoiceDescription "&No","No, you will do this later.";
                    $choices = [System.Management.Automation.Host.ChoiceDescription[]]($yes,$no);
                    $answer = $host.ui.PromptForChoice($caption,$message,$choices,0) 

                    switch ($answer){

                        0 {

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Launching users browser to '$($newerVersionObj.html_url)'"
                            start "$($newerVersionObj.html_url)"
                            break
        
                        }

                    }     
    
                }

                else 
				{ 
                
                    Write-Host " "
                    Write-Host "Library is already up-to-date." 
                    
                }

            }

            catch 
			{

                $errorMessage = "$($_[0].exception.message). $($_[0].exception.InnerException.message)"
                $errorRecord = New-ErrorRecord HPOneView.Library.UpdateConnectionError $_.exception.status ConnectionError 'CheckOnline' -TargetType 'Switch' -Message "$($_[0].exception.message)." -InnerException $_.exception.InnerException #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

        }

    }

}

function Get-HPOVHealthStatus 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param 
	(

		[parameter(Position = 0, Mandatory = $false)]
		[Alias('appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{ 

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{

				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_HealthStatusCollection = New-Object System.Collections.ArrayList

	}

    Process 
	{

		ForEach ($_connection in $ApplianceConnection)
		{

			$healthStatus = Send-HPOVRequest $applHealthStatus -Hostname $_connection

			$healthStatus.members  | % { 
				
				$_.PSObject.TypeNames.Insert(0,"HPOneView.Appliance.HealthStatus") 
			
				[void]$_HealthStatusCollection.Add($_)

			}

		}
    
    }

    End 
	{

        Return $_HealthStatusCollection | Sort-Object ApplianceConnection.Name,resourceType

    }

}

function Get-HPOVXApiVersion 
{
	
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param 
	(

		[parameter(Position = 0, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{ 

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		$_Connections = New-Object System.Collections.ArrayList

		ForEach ($_connection in $ApplianceConnection)
		{

			switch ($_connection.GetType().Name)
			{

				'Connection' 
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing HPOneView.Appliance.Connection: $($_Connection.Name)"
				
					[void]$_Connections.Add($_connection.Name)
				
				}

				'String'
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing: $_Connection"

					[void]$_Connections.Add($_connection)

				}

			}

		}

		$_XAPICollection = New-Object System.Collections.ArrayList

	}

    Process 
	{

		ForEach ($_connection in $_Connections)
		{

			$_XAPIVersion = Send-HPOVRequest $applXApiVersion -Hostname $_connection

			$_XAPIVersion | % { $_.PSObject.TypeNames.insert(0,'HPOneView.Appliance.XAPIVersion') }

			[void]$_XAPICollection.Add($_XAPIVersion)
        
		}

    }

    End 
	{ 
	
		Return $_XAPICollection
	
	}

}

function Get-HPOVEulaStatus 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
    Param
    (

		[parameter(Position = 0, Mandatory, HelpMessage = "Provide the IP Address or FQDN of the Appliance to connect to.")]
        [ValidateNotNullOrEmpty()]
		[string]$Appliance = $null

    )

	Begin 
	{ 

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		# // TODO Need to create temporary Global:ConnectedSessions after validating it doesn't exist for appliance connection being created.
		# otherwise, cmdlet will fail when making call to REstClient and it performs the SSL validation and flag value in SSLChecked property
		# need to do the same with Set-HPOVEulaStatus
		#Check to see if a connection to the appliance exists
        if (-not(${Global:ConnectedSessions}.Name -contains $Appliance) -and (-not(${Global:ConnectedSessions} | ? Name -eq $Appliance).SessionID))
        {

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Appliance Session not found. Running FTS sequence?"

            write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating temporary Session object"

            [HPOneView.Appliance.Connection]$_ApplianceConnection = New-Object HPOneView.Appliance.Connection

            $_ApplianceConnection.ConnectionId = 99
			$_ApplianceConnection.Name         = $Appliance
			$_ApplianceConnection.SessionID    = 'TemporaryConnection'
			$_ApplianceConnection.SslChecked   = $true

			[void]${Global:ConnectedSessions}.Add($_ApplianceConnection)

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($_ApplianceConnection | out-string)"
            
        }

		else
		{

			$_ApplianceConnection = ${Global:ConnectedSessions} | ? Name -eq $Appliance

		}

    }

    Process 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting EULA Status from '$($_ApplianceConnection.Name)'."

		Try
		{

			$_eulastatus = Send-HPOVRequest $applEulaStatus -Hostname $_ApplianceConnection.Name

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		if ((${Global:ConnectedSessions} | ? Name -eq $_ApplianceConnection.Name).SessionID -eq 'TemporaryConnection')
		{

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing temporary Session object"

			[void]${Global:ConnectedSessions}.Remove($_ApplianceConnection)

		}
		
	}

    End 
	{ 

        Return $_eulastatus
	
    }

}

function Set-HPOVEulaStatus 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param
    (

		[parameter(Position = 0, Mandatory, HelpMessage = "Provide the IP Address or FQDN of the Appliance to connect to.")]
        [ValidateNotNullOrEmpty()]
		[string]$Appliance = $null,

        [parameter(Position = 1, Mandatory, HelpMessage = "Set to 'yes' to allow HP support access to the appliance, otherwise set to 'no'.")]
        [ValidateNotNullOrEmpty()]
		[ValidateSet('Yes', 'No')]
        [string]$SupportAccess

    )

	Begin 
	{ 

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		#Check to see if a connection to the appliance exists
        if (-not(${Global:ConnectedSessions}.Name -contains $Appliance) -and (-not(${Global:ConnectedSessions} | ? Name -eq $Appliance).SessionID))
        {

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Appliance Session not found. Running FTS sequence?"

            write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating temporary Session object"

            [HPOneView.Appliance.Connection]$_ApplianceConnection = New-Object HPOneView.Appliance.Connection

			$_ApplianceConnection.ConnectionId = 99
			$_ApplianceConnection.Name         = $Appliance
			$_ApplianceConnection.SessionID    = 'TemporaryConnection'
			$_ApplianceConnection.SslChecked   = $true

            [void]${Global:ConnectedSessions}.Add($_ApplianceConnection)

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($_ApplianceConnection | out-string)"
            
        }

		else
		{

			$_ApplianceConnection = ${Global:ConnectedSessions} | ? Name -eq $Appliance

		}
    
    }

    Process 
	{

		$body = [PSCustomObject]@{
			
			supportAccess = $supportAccess
		
		}

		Try
		{

			$_eulastatus = Send-HPOVRequest $applEulaSave POST $body -Hostname $_ApplianceConnection.Name

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		if ((${Global:ConnectedSessions} | ? Name -eq $_ApplianceConnection.Name).SessionID -eq 'TemporaryConnection')
		{

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing temporary Session object"

			[void]${Global:ConnectedSessions}.Remove($_ApplianceConnection)

		}
		
	}

    End 
	{ 
	
		Return $_eulastatus
	
    }

}

function Get-HPOVApplianceNetworkConfig 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdLetBinding()]
    Param 
	(

        [parameter(Mandatory = $false)]
        [alias("x", "export", 'exportFile')]
        [ValidateScript({split-path $_ | Test-Path})]
        [String]$Location,
		
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$ApplianceNetworkConfiguration = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($_connection in $ApplianceConnection)
		{
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance Connection $($_connection.Name)"

			Try
			{
			
				$_appliancenetconfig = Send-HPOVRequest $applConfigUri -Hostname $_connection.Name

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
		
		
			$_appliancenetconfig | % { $_.PSObject.TypeNames.Insert(0,"HPOneView.Appliance.ApplianceServerConfiguration") }
			$_appliancenetconfig.applianceNetworks | % { $_.PSObject.TypeNames.Insert(0,"HPOneView.Appliance.ApplianceServerConfiguration.ApplianceNetworks") }
		
			[void]$ApplianceNetworkConfiguration.Add($_appliancenetconfig)

		}
    
	}

	End 
	{

		If ($PSBoundParameters['exportFile']) 
		{

			ForEach ($ApplianceConfig in $ApplianceNetworkConfiguration)
			{

				$_filename = $ApplianceConfig.ApplianceConnection.Name + ".json"

				ForEach ($nic in $ApplianceConfig.applianceNetworks) 
				{

					if ($nic.ipv4Type -eq "DHCP") { $nic.app1Ipv4Addr = $null }

					if ($nic.ipv6Type -eq "DHCP") { $nic.app1Ipv6Addr = $null }
				
				}

				$ApplianceConfig = $ApplianceConfig | Select * -ExcludeProperty ApplianceConnection

				$ApplianceConfig | convertto-json  > ($Location + '\' + $_filename)

			}

			
		}
		
		Else 
		{
		
			Return $ApplianceNetworkConfiguration.applianceNetworks

		}

    }

}

function Get-HPOVApplianceDateTime
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdLetBinding()]
    Param 
	(
		
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$ApplianceDateTime = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($_connection in $ApplianceConnection)
		{
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance Connection $($_connection.Name)"

			Try
			{
			
				$_appliancedatetime = Send-HPOVRequest $applDateTime -Hostname $_connection.Name

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
		
		
			$_appliancedatetime | % { $_.PSObject.TypeNames.Insert(0,"HPOneView.Appliance.ApplianceServerDateTime") }
		
			[void]$ApplianceDateTime.Add($_appliancedatetime)

		}
    
	}

	End 
	{

		Return $ApplianceDateTime	

    }

}

function Set-HPOVApplianceNetworkConfig 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
       
    [CmdletBinding(DefaultParameterSetName="primary")]
	Param 
	(
        
		[parameter(Position = 0, mandatory=$true, ParameterSetName="secondary")]
        [ValidateScript({$_ -ne "eth0"})]
		[string]$Device,

        [parameter(Position = 1, mandatory=$true, ParameterSetName="secondary")]
        [ValidateSet("Management", "Deployment")]
		[string]$InterfaceName,

		[parameter(Position = 0,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 2,mandatory=$true, ParameterSetName="secondary")]
		[string]$Hostname = $null,

		[parameter(Position = 1,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 3,mandatory=$false, ParameterSetName="secondary")]
		[string]$Ipv4Type = $null,

		[parameter(Position = 2,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 4,mandatory=$false, ParameterSetName="secondary")]
		[string]$Ipv4Addr = $null,

		[parameter(Position = 3,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 5,mandatory=$false, ParameterSetName="secondary")]
		[string]$Ipv4Subnet = $null,

		[parameter(Position = 4,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 6,mandatory=$false, ParameterSetName="secondary")]
		[string]$Ipv4Gateway = $null,

		[parameter(Position = 5,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 7,mandatory=$false, ParameterSetName="secondary")]
		[string]$Ipv6Type = $null,

		[parameter(Position = 6,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 8,mandatory=$false, ParameterSetName="secondary")]
		[string]$Ipv6Addr = $null,

		[parameter(Position = 7,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 9,mandatory=$false, ParameterSetName="secondary")]
		[string]$ipv6Subnet = $null,

		[parameter(Position = 8,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 10,mandatory=$false, ParameterSetName="secondary")]
		[string]$Ipv6Gateway = $null,

		[parameter(mandatory=$false, ParameterSetName="primary")]
        [parameter(mandatory=$false, ParameterSetName="secondary")]
        [alias('overrideDhcpDns')]
		[switch]$OverrideIpv4DhcpDns,

		[parameter(mandatory=$false, ParameterSetName="primary")]
        [parameter(mandatory=$false, ParameterSetName="secondary")]
		[switch]$OverrideIpv6DhcpDns,

		[parameter(Position = 9,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 11,mandatory=$false, ParameterSetName="secondary")]
		[string]$DomainName = $null,

		[parameter(Position = 10,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 12,mandatory=$false, ParameterSetName="secondary")]
		[Array]$SearchDomains = @(),

		[parameter(Position = 11,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 13,mandatory=$false, ParameterSetName="secondary")]
        [alias('nameServers')]
		[Array]$IpV4nameServers = @(),

		[parameter(Position = 12,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 14,mandatory=$false, ParameterSetName="secondary")]
		[Array]$IpV6nameServers = @(),

		[parameter(Position = 13,mandatory=$false, ParameterSetName="primary")]
        [parameter(Position = 15,mandatory=$false, ParameterSetName="secondary")]
        [Array]$NtpServers = @(),

        [parameter(mandatory=$true, ParameterSetName="importFile", HelpMessage="Enter the full path and file name for the input file.")]
        [alias("i", "import")]
        [ValidateScript({Test-Path $_})]
        [Object]$importFile,

		[parameter(Mandatory = $true)]
		[ValidateNotNullorEmpty()]
		[object]$ApplianceConnection = $null

    )

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$colStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

        #Locate the Enclosure Group specified
        write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Starting"

        # Get the current config (to get ETag & ensure we don't overwrite anything):
		Try
		{

			$_currentconfig = Get-HPOVApplianceNetworkConfig -ApplianceConnection $ApplianceConnection

		}
        
		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

        Switch ($PsCmdlet.ParameterSetName) 
		{
    
            "primary" 
			{
                
				[int]$i = 0
                
				$_deviceIndex = $null
                
				For ($i -eq 0; $i -le ($_currentconfig.applianceNetworks.Count - 1); $i++)
                {

                    if($_currentconfig.applianceNetworks[$i].interfaceName -eq "Appliance")
					{
                        
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found interface: $($_currentconfig.applianceNetworks[$i].interfaceName)"
                        
						$_deviceIndex = $i

                        $_configured = $true
                        
                        #break out of for loop
                        break

                    }

                }

            }

            "secondary" 
			{

				[int]$i = 0
				
				$deviceIndex = $NULL
				
				$_configured = $false

                For ($i -eq 0; $i -le ($_currentConfig.applianceNetworks.Count - 1); $i++)
                {
                    
					if($_currentConfig.applianceNetworks[$i].device -eq $device)
					{

						$_deviceIndex = $i
						
						$_configured = $true
						
						break
                    
					}
                
				}

				if (-not($_configured)) 
				{

					Try
					{

						$_freeMacs = Send-HPOVRequest $script:applMacAddresses

					}
					
					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

					if ($_freeMacs.members | ? {$_.device -eq $device})
					{

					    $_macAddr = ($_freeMacs.members | ? {$_.device -eq $device}).macAddress

					    # Update any non-null values that were passed-in:
					    $_secondaryNet = [PSCustomObject]@{

							device     = $device;
							macAddress = $_macAddr

						}

					    if ($hostname)     { $_secondaryNet | Add-Member -NotePropertyName hostname -NotePropertyValue $hostname }
					    if ($ipv4Type)     
						{ 
							
							$_secondaryNet | Add-Member -NotePropertyName ipv4Type -NotePropertyValue $ipv4Type.ToUpper()
					        
							# If setting DHCP, clear any existing IP address:
					        if ($ipv4Type -ieq "DHCP") {$_secondaryNet | Add-Member -NotePropertyName app1Ipv4Addr -NotePropertyValue $null }
					    
						}

					    if ($ipv4Addr)     { $_secondaryNet | Add-Member -NotePropertyName app1Ipv4Addr -NotePropertyValue $ipv4Addr }
					    if ($ipv4Subnet)   { $_secondaryNet | Add-Member -NotePropertyName ipv4Subnet   -NotePropertyValue $ipv4Subnet }
					    if ($ipv4Gateway)  { $_secondaryNet | Add-Member -NotePropertyName ipv4Gateway  -NotePropertyValue $ipv4Gateway }
					    if ($ipv6Type)     
						{ 
							
							$_secondaryNet | Add-Member -NotePropertyName ipv6Type -NotePropertyValue $ipv6Type.ToUpper() 
							
							# If setting DHCP, clear any existing IP address:
							if ($ipv6Type -ieq "DHCP") { $_secondaryNet | Add-Member -NotePropertyName app1Ipv6Addr = $null }
					    
						}

					    if ($ipv6Addr)        { $_secondaryNet | Add-Member -NotePropertyName app1Ipv6Addr -NotePropertyValue $ipv6Addr }
					    if ($ipv6Subnet)      { $_secondaryNet | Add-Member -NotePropertyName ipv6Subnet -NotePropertyValue $ipv6Subnet }
					    if ($ipv6Gateway)     { $_secondaryNet | Add-Member -NotePropertyName ipv6Gateway -NotePropertyValue $ipv6Gateway }
					    if ($overrideDhcpDns) { $_secondaryNet | Add-Member -NotePropertyName overrideDhcpDnsServers -NotePropertyValue $overrideDhcpDns }
					    if ($domainName)      { $_secondaryNet | Add-Member -NotePropertyName domainName -NotePropertyValue $domainName }
					    if ($searchDomains)   { $_secondaryNet | Add-Member -NotePropertyName searchDomains -NotePropertyValue $searchDomains }
					    if ($nameServers)     { $_secondaryNet | Add-Member -NotePropertyName nameServers -NotePropertyValue $nameServers }
					    if ($ntpServers)      { $_currentConfig.time.ntpServers = $ntpServers }

					    # Hard code the following settings, for now:
					    $_secondaryNet | Add-Member -NotePropertyName allowTransientValidationErrors -NotePropertyValue "false" # "true" or "false"
					    $_secondaryNet | Add-Member -NotePropertyName confOneNode -NotePropertyValue "true"  # Always "true", for now
					    $_secondaryNet | Add-Member -NotePropertyName activeNode -NotePropertyValue "1"      # Always "1", for now

					    [void]$_currentConfig.applianceNetworks.Add($_secondaryNet)

					}

					else
					{


					    $errorRecord = New-ErrorRecord InvalidOperationException UnknownNetworkInterface ObjectNotFound 'Device' -Message $device + " does not exist on the appliance." #-verbose
					    $pscmdlet.ThrowTerminatingError($errorRecord)
					    
                    }

                }

            }
             
			"importFile" 
			{

                try 
				{

                    $_importConfig = [string]::Join("", (gc $importfile -ErrorAction Stop))

                    $_importConfig = $_importConfig -replace "\s","" | convertfrom-json -ErrorAction Stop

				}

				catch [System.Management.Automation.ItemNotFoundException] 
				{
    
                    $errorRecord = New-ErrorRecord System.Management.Automation.ItemNotFoundException ImportFileNotFound ObjectNotFound 'Set-HPOVApplianceNetworkConfig' -Message "$importFile not found!" #-verbose
                    $pscmdlet.ThrowTerminatingError($errorRecord)
    
                }
    
                catch [System.ArgumentException] 
				{
    
                    $errorRecord = New-ErrorRecord System.ArgumentException InvalidJSON ParseErrror 'Set-HPOVApplianceNetworkConfig' -Message "Input JSON format incorrect!" #-verbose
                    $pscmdlet.ThrowTerminatingError($errorRecord)    

                }

                Try
				{

					$_freeMacs = Send-HPOVRequest $script:applMacAddresses -Hostname $ApplianceConnection

				}
					
				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
    
                [int]$i = 0

                For ($i -eq 0; $i -le ($_importConfig.applianceNetworks.Count - 1); $i++)
                {

                    if ($_importConfig.applianceNetworks[$i].ipv4Gateway -eq "127.0.0.1")
					{

                        $_importConfig.applianceNetworks[$i].ipv4Gateway = $null

                    }

                    if ($_importConfig.applianceNetworks[$i].nameServers -is "String")
					{

                        $_importConfig.applianceNetworks[$i].nameServers = New-Object.System.Collections.ArrayList

                    }

                    if ($_importConfig.applianceNetworks[$i].searchDomains -is "String")
					{

                        $importConfig.applianceNetworks[$i].searchDomains = New-Object.System.Collections.ArrayList

                    }

                    if (-not($_importConfig.applianceNetworks[$i].macAddress)) 
					{

                        $_macAddr = ($_importConfig.applianceNetworks | ? {$_.device -eq $_importConfig.applianceNetworks[$i].device}).macAddress

                        if(-not($_macAddr)) 
						{

                            $_macAddr = ($_freeMacs.members | ? {$_.device -eq $_importConfig.applianceNetworks[$i].device}).macAddress

                        }

                        if(-not($_macAddr))
						{

                            $errorRecord = New-ErrorRecord InvalidOperationException ApplianceNICResourceNotFound ObjectNotFound 'Device' -Message ($_importConfig.applianceNetworks[$i].device + "does not exist on the appliance.") #-verbose
                            $PsCmdlet.ThrowTerminatingError($errorRecord)

                        }

                        $_importConfig.applianceNetworks[$i] | Add-Member -NotePropertyName macAddress -NotePropertyValue $_macAddr
    
                    }

                }

                #zero the $currentConfig.applianceNetworks array so we can send it all new values
                $_currentConfig.applianceNetworks = New-Object.System.Collections.ArrayList

                [void]$_currentConfig.applianceNetworks.Add($_importConfig.applianceNetworks)

            }

        }

        if ($_configured)
		{

            # Update any non-null values that were passed-in:
            
            if ($hostname) 
			{

				 $_currentconfig.applianceNetworks[$_deviceIndex].hostname = $hostname 

			}

            if ($ipv4Type) 
			{ 
				
				$_currentconfig.applianceNetworks[$_deviceIndex].ipv4Type = $ipv4Type.ToUpper()
                
                # If setting DHCP, clear any existing IP address:
                if ($ipv4Type -ieq "DHCP") 
				{ 

                    $_currentconfig.applianceNetworks[$_deviceIndex].app1Ipv4Addr = $null

                    # If $overrideIPv4DhcpDns is true, set it, if not make sure it is fale
                    if ($overrideIpv4DhcpDns) 
					{ 
						
						$_currentconfig.applianceNetworks[$_deviceIndex].overrideIpv4DhcpDnsServers = [bool]$overrideIpv4DhcpDns 
					
					}

                    else 
					{ 
						
						$_currentconfig.applianceNetworks[$_deviceIndex].overrideIpv4DhcpDnsServers = $false 
					
					}

                }

                elseif ($ipv4Type -ieq "STATIC") 
				{
                    
					#Make sure override.. is false if STATIC ip addresses are in use.
                    $_currentconfig.applianceNetworks[$_deviceIndex].overrideIpv4DhcpDnsServers = $false 

                }

            }

            if ($ipv4Addr)    { $_currentconfig.applianceNetworks[$_deviceIndex].app1Ipv4Addr = $ipv4Addr }
            if ($ipv4Subnet)  { $_currentconfig.applianceNetworks[$_deviceIndex].ipv4Subnet   = $ipv4Subnet }
            if ($ipv4Gateway) { $_currentconfig.applianceNetworks[$_deviceIndex].ipv4Gateway  = $ipv4Gateway }
            if ($ipv6Type)    
			{ 
				
				$_currentconfig.applianceNetworks[$_deviceIndex].ipv6Type     = $ipv6Type.ToUpper() 
                                      
                # If setting DHCP, clear any existing IP address:
                if ($ipv6Type -ieq "DHCP") { $_currentconfig.applianceNetworks[$_deviceIndex].app1Ipv6Addr = $null }

            }
            if ($ipv6Addr)            { $_currentconfig.applianceNetworks[$_deviceIndex].app1Ipv6Addr               = $ipv6Addr }
            if ($ipv6Subnet)          { $_currentconfig.applianceNetworks[$_deviceIndex].ipv6Subnet                 = $ipv6Subnet }
            if ($ipv6Gateway)         { $_currentconfig.applianceNetworks[$_deviceIndex].ipv6Gateway                = $ipv6Gateway }
            if ($overrideIpv4DhcpDns) { $_currentconfig.applianceNetworks[$_deviceIndex].overrideIpv4DhcpDnsServers = [bool]$overrideIpv4DhcpDns }
            if ($overrideIpv6DhcpDns) { $_currentconfig.applianceNetworks[$_deviceIndex].overrideIpv6DhcpDnsServers = [bool]$overrideIpv6DhcpDns }
            if ($domainName)          { $_currentconfig.applianceNetworks[$_deviceIndex].domainName                 = $domainName }
            if ($searchDomains)       { $_currentconfig.applianceNetworks[$_deviceIndex].searchDomains              = $searchDomains }
            if ($ipV4nameServers)     { $_currentconfig.applianceNetworks[$_deviceIndex].ipv4NameServers            = $ipV4nameServers }
            if ($ipV6nameServers)     { $_currentconfig.applianceNetworks[$_deviceIndex].ipv6NameServers            = $ipV6nameServers }
            if ($ntpServers)          { $_currentconfig.time.ntpServers                                             = $ntpServers }

            # Hard code the following settings, for now:
            $_currentconfig.applianceNetworks[$_deviceIndex].confOneNode = "true"  # Always "true", for now
            $_currentconfig.applianceNetworks[$_deviceIndex].activeNode = "1"      # Always "1", for now
        
		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Configuration to be applied: $($_currentconfig | out-string)"

        #Remove MAC Address value or DHCP setting will break
        if ($_currentconfig.macAddress) 
		{ 
			
			$_currentconfig.macAddress = $null 
		
		}

        # This is an asynch method, so get the returned Task object
		Try
		{

			$_task = Send-HPOVRequest $applConfigUri POST $currentConfig -Hostname $ApplianceConnection | Wait-HPOVTaskStart

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

        #Take a peak at the task before moving on
        #try { $taskStatus = Send-HPOVRequest $task.uri }
        #catch [HPOneView.Appliance.NetworkConnectionException]{
        #
        #    #The appliance is no longer reachable.  Let's 
		#	$errorRecord = New-ErrorRecord HPOneview.Appliance.NetworkConnectionException ApplianceUnreachable ConnectionError 'Set-HPOVApplianceNetworkConfig' -Message "Unable to reconnect to the appliance.  Please check to make sure there are no IP Address conflicts or your set the IP Address and Subnet Mask correctly." #-verbose
        #    $PsCmdlet.ThrowTerminatingError($errorRecord)         
        #
        #}
        
        #validate status code 200, even though it should be HTTP/202
        if ($_task.type -eq "TaskResourceV2" -and $_task.taskState -eq "Running") 
		{
        
            #Start a new stopwatch object
            $sw = [diagnostics.stopwatch]::StartNew()
                
            Do 
			{

                $percentComplete = [Math]::Round(($sw.Elapsed.Seconds / 90) * 100,$mathMode)
                
                if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
				{ 
                    
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Skipping Write-Progress display."
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Percent Complete: $percentComplete"
                    Start-Sleep -s 1

                }
                  
                else 
				{

                    #Display progress-bar
                    Write-Progress -activity "Update Appliance Network Configuration" -Status "Processing $percentComplete%" -percentComplete $percentComplete 

                }

            } until ($sw.Elapsed.Minutes -le 1 -and $sw.Elapsed.Seconds -gt 30)

            #Stop the stopwatch
            $sw.stop()
            
            Write-Progress -activity "Update Appliance Network Configuration" -Completed
        
        }

        #task failed validation
        elseif ($task.taskState -eq "Error") 
		{

            if ($task.taskErrors -is [Array] -and $task.taskErrors.count -gt 1 ) 
			{

                for ($e = 0; $e -gt $taskStatus.taskErrors.count; $e++) 
				{

                    if ($e -ne $taskStatus.taskErrors.length) 
					{
                        
                        $errorRecord = New-ErrorRecord HPOneView.Appliance.NetworkConfigurationException NoAuthSession AuthenticationError 'Set-HPOVApplianceNetworkConfig' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
                        $PsCmdlet.WriteError($errorRecord)    

                    }

                    else 
					{

                        $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Set-HPOVApplianceNetworkConfig' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
                        $PsCmdlet.ThrowTerminatingError($errorRecord)    

                    }

                }

            }

        }

        if ($ipv4Type -eq "static") 
		{
            
            #Check to make sure we connect to a OneView appliance
			Try
			{
				
				#Temporarily disable SSL Cert verification to handle HTTP redirection to HTTPS
				#save the ServicePointManager configuration state to restore after our Invoke-WebRequest call
				$_originalcertpolicy = [System.Net.ServicePointManager]::CertificatePolicy
				[System.Net.ServicePointManager]::CertificatePolicy = new-object HPOneView.ITempPolicy 
				
				$_resp = Invoke-WebRequest -uri "https://$ipv4Addr"

				#Return the ServicePointManager state back to original state
				[System.Net.ServicePointManager]::CertificatePolicy = $_originalcertpolicy

			}

			Catch
			{

				#Return the ServicePointManager state back to original state
				[System.Net.ServicePointManager]::CertificatePolicy = $_originalcertpolicy

				$PSCmdlet.ThrowTerminatingError($_)

			}
            

            #If successful, update current POSH session
            if ($_resp.Content -match "OneView") 
			{ 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Global Connection Sessions appliance object with new appliance address: $ipv4Addr"

				($Global:ConnectedSessions | ? name -eq $ApplianceConnection.Name).Name = $ipv4Addr

            }

            else 
			{

                #Unable to connect to new appliance address or connection failed.  Need to generate error here.
				$errorRecord = New-ErrorRecord HPOneview.Appliance.NetworkConnectionException ApplianceUnreachable ConnectionError 'Set-HPOVApplianceNetworkConfig' -Message "Unable to reconnect to the appliance.  Please check to make sure there are no IP Address conflicts or your set the IP Address and Subnet Mask correctly." #-verbose
                $PsCmdlet.ThrowTerminatingError($errorRecord)    

            }

        }

		#Check to see if we can get the final status of the task resource
		Try
		{

			$Task = Send-HPOVRequest $task.uri -Hostname $ApplianceConnection.Name | Wait-HPOVTaskComplete 

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

        [void]$colStatus.Add($Task)

    }

	End
	{

		Return $colStatus

	}

}

function Get-HPOVSnmpReadCommunity 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml
    
	[CmdletBinding()]
	Param 
	(
	
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	
	)

	Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_ApplianceSnmpConfigCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Try
			{

				$_applSnmpReadCommunityStr = Send-HPOVRequest $applSnmpReadCommunity -Hostname $_Connection

				$_applSnmpReadCommunityStr.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.SnmpCommunity')

				[void]$_ApplianceSnmpConfigCollection.Add($_applSnmpReadCommunityStr)

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
			

		}
    
    }

	End
	{

		Return $_ApplianceSnmpConfigCollection

	}

}

function Set-HPOVSnmpReadCommunity 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
	Param 
	(

		[parameter(Position= 0, Mandatory)]
		[string]$name = $null,
			
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	
	)

	Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_ApplianceSnmpConfigCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New SNMP Read Community Value: $($name)"
			
			$_NewApplSnmpReadCommunityStr = [PsCustomObject]@{ "communityString" = $name }

			Try
			{

				$_rspNewApplSnmpReadCommunity = Send-HPOVRequest $applSnmpReadCommunity PUT $_NewApplSnmpReadCommunityStr -Hostname $_Connection

				$_rspNewApplSnmpReadCommunity.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.SnmpCommunity')

				[void]$_ApplianceSnmpConfigCollection.Add($_rspNewApplSnmpReadCommunity)

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}
    
    }

	End
	{

		Return $_ApplianceSnmpConfigCollection

	}

}

function Get-HPOVApplianceGlobalSetting 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param 
	(

		[parameter(Position = 0, Mandatory = $false)]
		[string]$name = $null,
			
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	
	)

	Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_ApplianceGlobalSettingCol = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Try
			{

				$_settings = Send-HPOVRequest $applGlobalSettingsUri -Hostname $_Connection

				if ($Name)
				{

					$_settings.members = $settings.members | Where-Object name -like $Name

				}

				$_settings.members | % {

					[void]$_ApplianceGlobalSettingCol.Add($_)

				}

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
			
		}

    }

	End
	{

		Return $_ApplianceGlobalSettingCol

	}

}

function Set-HPOVApplianceGlobalSetting 
{

   # .ExternalHelp HPOneView.200.psm1-help.xml
      
    [CmdletBinding(DefaultParameterSetName = 'Default')]
	Param
	(

		[parameter(Position = 0, Mandatory, ValueFromPipeline, HelpMessage = "Enter the name of the global parameter", ParameterSetName = 'Pipeline')]
		[string]$Object,

		[parameter(Position = 0, Mandatory, HelpMessage = "Enter the name of the global parameter", ParameterSetName = 'Default')]
		[string]$Name,

        [parameter(Position = 1, Mandatory = $true, HelpMessage = "Enter the new value for the global parameter", ParameterSetName = 'Default')]
        [string]$Value,

		[parameter(Mandatory = $false, ValueFromPipelinebyPropertyName, ParameterSetName = 'Default')]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if ($PSCmdlet.ParameterSetName -eq 'Pipeline')
		{

			$PipelineInput - $True

		}

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_ApplianceGlobalSettingCol = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if ($PipelineInput)
		{

			#Error due to invalid object from pipeline
			if ($Object.category -ne 'global-settings')
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.GlobalSettingException InvalidGlobalSettingObject InvalidArgument 'Object' -TargetType 'PSObject' -Message "The '$(Object.name)' is an invalid Global Setting object.  Please check the value and try again." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			#Error because Connection object doesn't exist
			if (-not($Object.category.ApplianceConnection.Name.Legth -gt 0))
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.GlobalSettingException InvalidGlobalSettingObject InvalidArgument 'Object' -TargetType 'PSObject' -Message "The Global Setting '$(Object.name)' object is missing a required property, ApplianceConnection. Please validate the input object contains the 'ApplianceConnection' property and it contains a valid Appliance Connection Name." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing object: $($Object.Name)"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing object: $($Object | FL * | Out-String)"

			Try
			{

				$Object.value = $Value

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updated Global Setting: $($Object | out-string)"

				$_results = Send-HPOVRequest $Object.uri PUT $Object -Hostname $Object.ApplianceConnection.Name

				[void]$_ApplianceGlobalSettingCol.Add($_results)

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		else
		{

			ForEach ($_Connection in $ApplianceConnection)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting current global setting value for $Name"

				Try
				{

					$setting = Get-HPOVApplianceGlobalSetting($name)

					$setting.value = $Value

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updated Global Setting: $($setting | out-string)"

					$_results = Send-HPOVRequest $setting.uri PUT $setting -Hostname $_Connection

					[void]$_ApplianceGlobalSettingCol.Add($_results)

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				
			}

		}

    }

	End
	{

		Return $_ApplianceGlobalSettingCol

	}

}

function Get-HPOVBaseline 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

   	[CmdletBinding(DefaultParameterSetName = "ISOFileName" )]
	Param 
	(

		[parameter(Position = 0, Mandatory = $false,ParameterSetName = "ISOFileName")]
        [ValidateNotNullOrEmpty()]
        [Alias('isoFileName')]
		[string]$FileName,

		[parameter(position = 0, Mandatory = $false,ParameterSetName = "SppName")]
		[Alias('name')]
        [string]$SppName,

		[parameter(Position = 1, Mandatory = $false,ParameterSetName = "SppName")]
        [ValidateNotNullOrEmpty()]
		[string]$Version,

		[parameter(Position = 1, Mandatory = $false,ParameterSetName = "HotFixesOnly")]
		[switch]$HotfixesOnly,

		[parameter(Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
    {
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$BaselineCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{
        
		ForEach($_Connection in $ApplianceConnection)
		{

			Try
			{

				$_baselines = Send-HPOVRequest $fwDriversUri -appliance $_Connection

			}

			Catch
			{

				$PScmdlet.ThrowTerminatingError($_)

			}

			switch ($PSCmdlet.ParameterSetName) 
			{
			    
			    "SppName" 
				{
			    
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SppName parameter provided: $($SppName)"

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Version parameter provided: $($version)"

			        if ($version) 
					{
						
						$_baselines.members = $_baselines.members | ? version -eq $version
					
					}

			        else 
					{
						
						$_baselines.members = $_baselines.members | ? name -like $SppName 
					
					}

			        if ((-not ($_baselines.members)) -and $SppName) 
					{

			            $errorRecord = New-ErrorRecord HPOneView.BaselineResourceException BaselineResourceNotFound ObjectNotFound 'SppName' -Message "The Baseline name '$SppName' was not found." #-verbose
			            $PSCmdlet.ThrowTerminatingError($errorRecord)

			        }
			        elseif ((-not ($_baselines.members)) -and $version) 
					{

			            $errorRecord = New-ErrorRecord HPOneView.BaselineResourceException BaselineResourceNotFound ObjectNotFound 'SppName' -Message "The Baseline name '$SppName' with version $version was not found." #-verbose
			            $PSCmdlet.ThrowTerminatingError($errorRecord)

			        }
			
			    }
			
			    "ISOFileName" 
				{

			        if ($isoFileName) 
					{ 
						
						$_baselines.members = $_baselines.members | ? isoFileName -like $isoFileName
					
					}

			        if (-not ($_baselines.members)) 
					{

			            $errorRecord = New-ErrorRecord HPOneView.BaselineResourceException BaselineResourceNotFound ObjectNotFound 'isoFileName' -Message "The Baseline ISO '$isoFileName' was not found." #-verbose
			            $PSCmdlet.ThrowTerminatingError($errorRecord)

			        }

			    }

				'HotfixesOnly'
				{

					$_baselines.members = $_baselines.members | ? bundleType -eq 'Hotfix'

				}
			
			    default 
				{
			
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No parameter provided. Looking for all SPP Baselines."

			    }
			
			}

			foreach ($_baseline in $_baselines.members)
			{
			

				$_baseline.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.Baseline')

				[void]$BaselineCollection.Add($_baseline)

			}

        }

    }

    End 
	{
        
        if ($BaselineCollection.count -eq 0) { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Baselines/SPP's found." }

		return $BaselineCollection

    }

}

function Add-HPOVBaseline 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param 
	(

		[parameter(Position = 0, Mandatory = $true, HelpMessage = "Enter the path and file name to the SPP iso file.")]
        [ValidateScript({Test-Path $_})]
		[Alias('sppFile')]
		[string]$File,

		[parameter(Mandatory = $false)]
		[switch]$Async,

		[parameter(Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
    {
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$TaskCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{
        
		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance $($_Connection.Name)"

			#Start upload file
			Try
			{

				$task = Upload-File $fwUploadUri $File $_Connection

				if (-not($PSBoundParameters['Async']))
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response is a task resource, calling Wait-HPOVTaskComplete"

					$task = $task | Wait-HPOVTaskComplete

				}
				
				[void]$TaskCollection.Add($task)

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
        
		}

    }
	
	End 
	{
	
		Return $TaskCollection
	
	}

}

function Restore-HPOVCustomBaseline
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	param 
	(
	
		[parameter(Mandatory = $False, position = 0)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectionSessions}
	
	)

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_TaskCollection     = New-Object System.Collections.ArrayList
		$_BaselineCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance $($_Connection.Name) (of $($ApplianceConnection.Count))"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting all baseline resources"

			Try
			{

				$_baselineresources = Send-HPOVRequest $fwUploadUri -Hostname $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
			
			foreach ($_baseline in ($_baselineresources.members | ? bundleType -eq 'Custom' -and state -eq 'Removed'))
			{

				$_CustomBaselineRestore = NewObject -CustomBaselineRestore

				$_CustomBaselineRestore.baselineUri        = $_baseline.uri	
				$_CustomBaselineRestore.customBaselineName = $_baseline.name

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper()) Looking up Associations for '$($_baseline.name) [$($_baseline.uuid)]' custom baseline."

				Try
				{

					$_baselineassociations = Send-HPOVRequest "/rest/index/associations/?parentUri=$($_baseline.uri)" -Hostname $_Connection

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				foreach ($_association in $_baselineassociations.members)
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper()) Adding '$($_association.childUri)' to object collection."

					[void]$_CustomBaselineRestore.hotfixUris.Add($_association.childUri)

				}

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper()) Sending request to recreate '$_CustomBaselineRestore.customBaselineName' custom baseline."

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper()) Custom Baseline object: $($_CustomBaselineRestore | FL * | Out-String)"

				Try
				{

					$_resp = Send-HPOVRequest $fwUploadUri $_CustomBaselineRestore -Hostname $_Connection

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				[void]$_TaskCollection.Add($_resp)
				
			}				

		}
        
    }

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] done."

		Return $_TaskCollection

	}


}

function Remove-HPOVBaseline
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = "default", SupportsShouldProcess = $True, ConfirmImpact = 'High')]
	param
	(

		[parameter(Mandatory, ValueFromPipeline, HelpMessage = "Enter the Baseline name", Position = 0, ParameterSetName = "default")]
		[ValidateNotNullOrEmpty()]
		[alias("b")]
		[Object]$Baseline,
	
		[parameter(Mandatory = $False, ValueFromPipelineByPropertyName, ParameterSetName = "default", position = 1)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectionSessions},

		[switch]$Force

    )

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		if (-not($PSBoundParameters['Baseline'])) { $PipelineInput = $True }

		$_TaskCollection    = New-Object System.Collections.ArrayList
		$_BaselineCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if ($PipelineInput) 
		{ 

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Directory Object provided: $($Baseline | FL * | Out-String)"

			If ($Baseline.category -eq 'firmware-baseline-list')
			{

				If (-not($Directory.ApplianceConnection))
				{

					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "Baseline:$($Baseline.Name)" -TargetType PSObject -Message "The Baseline resource provided is missing the source ApplianceConnection property.  Please check the object provided and try again." #-verbose
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				[void]$_BaselineCollection.Add($Baseline)

			}

			else
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "Baseline:$($Baseline.Name)" -TargetType PSObject -Message "The Baseline resource is not an expected category type [$($Baseline.category)].  Allowed resource category type is 'firmware-baseline-list'.  Please check the object provided and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

			}
        
		}

		else 
		{

			ForEach ($_Connection in $ApplianceConnection)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance $($_Connection.Name) (of $($ApplianceConnection.Count))"

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Baseline Name $($Baseline)"

				Try
				{

					$_baseline = Get-HPOVBaseline -SppName $Baseline -ApplianceConnection $_Connection

					$_baseline | % {

						[void]$_BaselineCollection.Add($_)

					}

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)					

				}				

			}

		}
        
    }

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($_BaselineCollection.count) Baseline resources to remove."

		#Process Directory Resources
		ForEach ($_Baseline in $_BaselineCollection)
		{

			if ($pscmdlet.ShouldProcess($_Baseline.ApplianceConnection.Name,"remove baseline '$($_Baseline.name)'")) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing Baseline '$($_Baseline.name)' from appliance '$($_Baseline.ApplianceConnection.Name)'."

				Try
				{
					
					$_resp = Send-HPOVRequest $_Baseline.Uri DELETE -Hostname $_Baseline.ApplianceConnection.Name

					[void]$_TaskCollection.Add($_resp)

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			elseif ($PSBoundParameters['WhatIf'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf parameter was passed."

			}

			Return $_TaskCollection

		}

	}

}

function New-HPOVSupportDump 
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "values")]
    Param 
	(

        [parameter(Mandatory = $false,ValueFromPipeline = $false,ParameterSetName = "values", HelpMessage = "Specify the folder location to save the Support Dump.",Position=0)]
		[parameter(Mandatory = $false,ValueFromPipeline = $false,ParameterSetName = "Object", HelpMessage = "Specify the folder location to save the Support Dump.",Position=0)]
        [Alias("save")]
        [string]$Location = (get-location).Path,

        [parameter(Mandatory = $true,ValueFromPipeline = $false,ParameterSetName = "values", HelpMessage = "Specify the Type of Support Dump (appliance | li) you wish to generate.", Position = 1)]
        [ValidateSet("Appliance","LI")]
        [string]$Type = $null,

		[parameter(Mandatory = $false,ValueFromPipeline = $false,ParameterSetName = "values", HelpMessage = "Specfy to encrypt the Appliance Support Dump.")]
		[switch]$Encrypted,

		[parameter(Mandatory = $true,ValueFromPipeline = $true,ParameterSetName = "Object", HelpMessage = "Specify the Logical Interconnect URI the Support Dump will be generated for.", Position = 3)]
        [Alias('liobject','li','name')]
        [object]$LogicalInterconnect,
	
		[parameter(Mandatory = $False, ValueFromPipelineByPropertyName, ParameterSetName = "Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

        if (-not($PSBoundParameters["LogicalInterconnect"]) -and $PSCmdlet.ParameterSetName -eq "Object") 
		{ 
			
			$PipelineInput = $true 
		
		}
		
		#Validate the path exists.  If not, create it.
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Validating $($Location) exists"

		if (-not(Test-Path $Location)) 
		{ 
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($Location) Directory does not exist.  Creating directory..."
			
			New-Item -ItemType directory -path $Location 
		
		}

    }

    Process
	{

		if ($PipelineInput -and $LogicalInterconnect)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Pipeline object: $($LogicalInterconnect.name)"

			#Validate input object is a Logical Interconnect resource
			if ($LogicalInterconnect.category -ne 'logical-interconnects')
			{

				$errorRecord = New-ErrorRecord HPOneView.LogicalInterconnectResourceException InvalidLogicalInterconnectResource InvalidArgument 'LogicalInterconnect' -TargetType $LogicalInterconnect.GetType().Name -Message "The LogicalInterconnect parameter value is invalid.  Resource category provided '$($LogicalInterconnect.category)', expected 'logical-interconnects'.  Please check the value and try again." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}
			
            $Request = @{errorCode = $LogicalInterconnect.name}

			$targetURI = $LogicalInterconnect.uri + "/support-dumps"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Recieved information from pipeline"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request : $($request | out-string) "

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] URI: $($targetURI)"

			#Send the request
			Write-Host "Please wait while the Support Dump is generated.  This can take a few minutes..."

			Try
			{

				$resp = Send-HPOVRequest $targetUri POST $Request -Hostname $LogicalInterconnect.ApplianceConnection.Name

			}
			
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			#Now that the Support Dump has been requested, download the file
			Try
			{

				Download-File $resp.uri $LogicalInterconnect.ApplianceConnection.Name $Location

			}
			
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

        else 
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Support Dump Type: $($type)"

			switch ($Type)
			{
				        
				"appliance" 
				{

					ForEach ($_Connection in $ApplianceConnection)
					{

						#Build the request and specify the target URI. Do not change errorCode value.
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Requesting Appliance Support Dump..."

						$request = @{
								
							errorCode = "CI";
							encrypt   = [bool]$Encrypted.IsPresent
							
						}

						$targetURI = $applSupportDump
							
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request : $($request | out-string) "

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] URI: $($targetURI)"

						#Send the request
						Write-Host "Please wait while the Support Dump is generated.  This can take a few minutes..."

						Try
						{

							$resp = Send-HPOVRequest $targetUri POST $Request -Hostname $_Connection

						}
							
						Catch
						{

							$PSCmdlet.ThrowTerminatingError($_)

						}

						#Now that the Support Dump has been requested, download the file
						Try
						{

							Download-File $resp.uri $_Connection.Name $Location

						}
							
						Catch
						{

							$PSCmdlet.ThrowTerminatingError($_)

						}

					}					

				}
							
				"li" 
				{ 

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Requesting $LogicalInterconnect Support Dump..."
							
					if ($LogicalInterconnect -is [String]) 
					{

						Try
						{

							$resp = Get-HPOVLogicalInterconnect $LogicalInterconnect -Hostname $ApplianceConnection

						}
							
						Catch
						{

							$PSCmdlet.ThrowTerminatingError($_)

						}
					
						$request = @{errorCode = $resp.name.Substring(0,10)}
					    
						$targetURI = $resp.uri + "/support-dumps"
						
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($resp.name) Logical Interconnect"


					}

                    elseif ($LogicalInterconnect -is [PSCustomObject]) 
					{
                            
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Interconnect Object provided."

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($LogicalInterconnect.name) Logical Interconnect"

                        $request = @{errorCode = $LogicalInterconnect.name.Substring(0,10)}

                        $targetUri = $LogicalInterconnect.uri

                    }

					#Send the request
					Write-Host "Please wait while the Support Dump is generated.  This can take a few minutes..."

					Try
					{

						$resp = Send-HPOVRequest $targetUri POST $Request -Hostname $ApplianceConnection

					}
							
					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

					#Now that the Support Dump has been requested, download the file
					Try
					{

						Download-File $resp.uri $ApplianceConnection.Name $Location

					}
							
					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}

			} 
					
		}

	}

	End 
	{
		
			
	}

}

Function New-HPOVBackup 
{
	
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default")]
    Param 
	(

        [parameter(Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Specify the folder location to save the appliance backup file.",Position=0)]
        [ValidateNotNullOrEmpty()]
        [Alias("save")]
        [string]$Location = (get-location).Path,
			
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )

	Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		#Validate the path exists.  If not, create it.
		if (-not(Test-Path $Location))
		{
			 
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Directory does not exist.  Creating directory..."
            
			New-Item $Location -itemtype directory

        }

		$_ApplianceStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Please wait while the appliance backup is generated.  This can take a few minutes..."

			Try
			{
				
				$_taskStatus = Send-HPOVRequest $script:applBackup POST -Hostname $_Connection | Wait-HPOVTaskComplete -timeout (New-Timespan -minutes 45)

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response: $($_taskStatus | out-string)"
				
			}   

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$_backupUri     = (Send-HPOVRequest $_taskStatus.uri -Hostname $_Connection).associatedResource.resourceUri
            $_backupFileUri = (Send-HPOVRequest $_backupUri -Hostname $_Connection.ApplianceConnection.Name).downloadUri
            
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Backup File URI $($backupFileUri)"

			#Now that the Support Dump has been requested, download the file
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Downloading $($backupFileUri) to $($Location)"

			Try
			{

				Download-File $backupFileUri $_Connection $Location

			}
		    
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}
		
    }

}

Function New-HPOVRestore 
{
	
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
	Param 
	(

		[parameter(Mandatory, ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Specify the file to restore.", Position = 0)]
		[ValidateNotNullOrEmpty()]
		[Alias("File")]
		[string]$FileName = $null,

		[parameter(Mandatory = $false)]
		[ValidateNotNullOrEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)
    
    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_ApplianceStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"
			
			#Validate the path exists.  If not, create it.
			if (-not(Test-Path $FileName))
			{
				 
			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Backup file specified does not exist."
			    
				$errorRecord = New-ErrorRecord HPOneview.Appliance.RestoreException BackupFileNotFound ObjectNotFound 'FileName' -Message "'$FileName' was not found. Please check the directory and/or name and try again." #-verbose
			    $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			if ($pscmdlet.ShouldProcess($_Connection.Name,'restore backup to appliance')) 
			{    
			
			    #Send the request
			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Please wait while the appliance backup is uploaded.  This can take a few minutes..."

				Try
				{

					$resp = Upload-File $applRestoreFile $FileName -Hostname $_Connection

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
			    
			    if ($resp.id)
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to restore appliance"

					$_restoreObject = [PSCustomObject]@{

						type                 = "RESTORE"
						uriOfBackupToRestore = $resp.uri

					}

					Try
					{
					
						$_restoreStatus = Send-HPOVRequest $applRestores POST $_restoreObject -Hostname $_Connection
					
						Write-warning "Appliance restore in progress.  All users are now logged off."
					
					}
					
					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

					$sw = [System.Diagnostics.Stopwatch]::StartNew()

					While ($_restoreStatus.status -eq "IN_PROGRESS") 
					{

						$_statusMessage = "$($script:progressStepEnum[$restoreStatus.progressStep]) $($_restoreStatus.percentComplete)% [$($sw.elapsed.minutes)min $($sw.elapsed.seconds)sec]"

						#Handle the call from -Verbose so Write-Progress does not get borked on display.
						if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
						{ 

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - $_statusMessage"

						}

						else 
						{ 

							Write-Progress -id 1 -activity "Restoring Appliance Backup $($_restoreStatus.id)" -status $_statusMessage -percentComplete $_restoreStatus.percentComplete
						
						}


						Try
						{
					
							$_restoreStatus = Send-HPOVRequest $_restoreStatus.uri -Hostname $_Connection
									
						}
					
						Catch
						{

							$PSCmdlet.ThrowTerminatingError($_)

						}

					} #Until ($restoreStatus.percentComplete -eq 100 -or $restoreStatus -ne "IN_PROGRESS")

					$sw.Stop()

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Operation took $($sw.elapsed.minutes)min $($sw.elapsed.seconds)sec"

					Write-Progress -id 1 -activity "Restoring Appliance Backup $($_restoreStatus.id)" -status $_statusMessage -Completed

					Write-warning "Appliance restore in has completed for $($_Connection.Name). Address Pool ranges will need to be re-enabled, and verify the managed or monitored resources do not need a refresh."

			    }

				[void]$_ApplianceStatus.Add($_restoreStatus)

			}

		}
    
    }

	End 
	{

		Return $_ApplianceStatus
	
	}

}

function Download-File 
{

<#
    .DESCRIPTION
    Helper function to download files from appliance.  
                
    .PARAMETER uri
    The location where the Support Dump or backup will be downloaded from
        
    .PARAMETER SaveLocation
    The full path to where the Support Dump or backup will be saved to.  This path will not be validated in this helper function

	.PARAMETER ApplianceConnection
    The Appliance Connection Object, Name or ConnectionID

    .INPUTS
    None.  You cannot pipe objects to this cmdlet.
                
    .OUTPUTS
    Downloads the requested file using net.WebRequest
	
	.LINK
	https://hponeview.codeplex.com/wikipage?title=Download-File

    .EXAMPLE
    PS C:\> Download-File /rest/appliance/support-dumps/ci5401AB76-CI-2013_09_04-04_52_00.014786.sdmp -ApplianceConnection MyAppliance.domain.com c:\temp
			
#>

    [CmdLetBinding()]
    Param 
	(

		[parameter(Mandatory, HelpMessage = "Specify the URI of the object to download.", Position = 0)]
		[ValidateNotNullOrEmpty()]
		[string]$uri,
		
		[parameter(Mandatory, HelpMessage = "Specify the Appliance Connection Name or OBject.", Position = 1)]
		[ValidateNotNullorEmpty()]
		[object]$ApplianceConnection = $null,

		[parameter(Mandatory, HelpMessage = "Specify the location where to save the file to.", Position = 2)]
		[Alias("save")]
		[ValidateNotNullOrEmpty()]
		[string]$SaveLocation

    )

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

    }

    Process 
	{
    
        $fsCreate = [System.IO.FileAccess]::Create
        $fsWrite = [System.IO.FileAccess]::Write

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Download URI: $uri"
  
        [System.Net.httpWebRequest]$_fileDownload = RestClient GET $uri $ApplianceConnection.Name

	    $_fileDownload.accept               = "application/zip,application/octet-stream,*/*"
		$_fileDownload.Headers.Item("auth") = $ApplianceConnection.SessionID

        $i = 0

        ForEach ($_h in $_fileDownload.Headers) 
		{
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request Header $($i): $($_h) = $($_fileDownload.Headers[$i])"
			
			$i++
		
		}
		    
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request: GET $($_fileDownload | out-string)"
        
        #Get response
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting response"
        [Net.httpWebResponse]$_rs = $_fileDownload.GetResponse()

        #Display the response status if verbose output is requested
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Status: $([int]$_rs.StatusCode) $($_rs.StatusDescription)"

        $i = 0

        ForEach ($_h in $_rs.Headers) 
		{ 
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Header $($i): $($_h) = $($_rs.Headers[$i])"
			
			$i++ 
		
		}

        #Request is a redirect to download file contained in the response headers
        if (($_rs.headers["Content-Disposition"]) -and ($_rs.headers["Content-Disposition"].StartsWith("attachment; filename="))) 
		{
        
            $_fileName = ($_rs.headers["Content-Disposition"].Substring(21)) -replace "`"",""
        
        }
                		
        #Detect if the download is a Support Dump or Appliance Backup
        elseif ($uri.Contains("/rest/backups/archive"))
		{

            #Need to get the Appliance file name
	        $_fileName = $uri.split("/")
            
			$_fileName = $_fileName[-1] + ".bkp"
        
		}

        else 
		{
		    #Need to get the Support Dump file name
	        $_fileName = $uri.split("/")

            $_fileName = $ApplianceConnection.Name + "_" + $_fileName[-1]

        }

		if ($_rs.headers['Content-Length']) 
		{ 
			
			$_fileSize = $_rs.headers['Content-Length'] 
		
		}

		elseif ($_rs.ContentLength -and $_rs.ContentLength -gt 0) 
		{ 
			
			$_fileSize = $_rs.ContentLength 
		
		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filename: $($_fileName)"
	    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filesize: $($_fileSize)"
		
		Try
		{

			#Read from response and write to file
			$_stream = $_rs.GetResponseStream() 
			    
			#Define buffer and buffer size
			[int] $_bufferSize = (4096*1024)
			[byte[]]$_buffer   = New-Object byte[] (4096*1024)
			[int] $_bytesRead  = 0

			#This is used to keep track of the file upload progress.
			$_numBytesRead     = 0
			$_numBytesWrote    = 0
	 
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Saving to $($saveLocation)\$($_fileName)"

			$_fs = New-Object IO.FileStream ($saveLocation + "\" + $_fileName),'Create','Write','Read'

			while (($_bytesRead = $_stream.Read($_buffer, 0, $_bufferSize)) -ne 0) 
			{

			    #Write from buffer to file
				$_byteCount = $_fs.Write($_buffer, 0, $_bytesRead);
				
				#Keep track of bytes written for progress meter
				$_numBytesWrote += $_bytesRead

			    #Use the Write-Progress cmd-let to show the progress of uploading the file.
			    [int]$_percent = (($_numBytesWrote / $_fileSize)  * 100)

			    if ($_percent -gt 100) 
				{ 
					
					$_percent = 100 
				
				}

			    $_status = "(" + $_numBytesWrote + " of " + $_fileSize + ") Completed " + $_percent + "%"

			    #Handle the call from -Verbose so Write-Progress does not get borked on display.
			    if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
				{ 
			    
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Skipping Write-Progress display."
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Downloading file $_fileName, status: $_status, percentComplete: $_percent"
			        
			    }
			      
			    else 
				{ 
					
					Write-Progress -activity "Downloading file $_fileName" -status $_status -percentComplete $_percent 
				
				}

			} #end while

			Write-Progress -activity "Downloading file $_fileName" -Completed

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] File saved to $($saveLocation)"

			#Clean up our work
			$_stream.Close()
			$_rs.Close()
			$_fs.Close()

		}

		Catch
		{

			#Clean up
			if ($_rs)
			{

				$_rs.Close()

			}

			#Clean up
			if ($_fs)
			{

				$_fs.Close()

			}

			$PSCmdlet.ThrowTerminatingError($_)

		}
	    
    }

 }

function Upload-File 
{

<#

	.SYNOPSIS
	Upload a file to the appliance.

	.DESCRIPTION
	This cmdlet will upload a file to the appliance that can accepts file uploads (SPP firmware bundle, Appliance Restore, and Appliance Updates.)

	.PARAMETER URI
	Location where to upload file to.

	.PARAMETER File
	Full path to the file to be uploaded.
	 
	.PARAMETER ApplianceConnection
	Appliance Connection

	.INPUTS
	None.  You cannot pipe objects to this cmdlet.

	.OUTPUTS
	Write-Progress
	The progress of uploading the file to the appliance.

	.LINK
	Add-HPOVSppFile

	.LINK
	New-HPOVRestore
	
	.LINK
	https://hponeview.codeplex.com/wikipage?title=Upload-File

	.EXAMPLE
	PS C:\> Upload-File "/rest/firmware-bundles" "C:\Users\me\Documents\SPP2012060B.2012_0525.1.iso"
	Upload a new SPP into the appliance.

	.EXAMPLE
	PS C:\> Upload-File "/rest/restores" "C:\Users\me\Documents\appliance.bak"
	Upload a backup file to restore in the appliance.

#>

	[CmdletBinding()]

	Param 
	(

        [parameter(Mandatory = $true, HelpMessage = "Specify the upload URI.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias('u')]
        [string]$uri,

		[parameter(Mandatory = $true, HelpMessage = "Enter the path and file name to upload.", Position = 1)]
        [Alias('f')]
        [ValidateScript({Test-Path $_})]
		[string]$File,
		
		[parameter(Mandatory, HelpMessage = "Specify the Appliance Connection Name or OBject.", Position = 2)]
		[ValidateNotNullorEmpty()]
		[object]$ApplianceConnection = $null

    )

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$_fileObj = Get-Item -path $File

    }
    
    Process 
	{
		
		$fs = New-Object IO.FileStream ($_fileObj, $FSOpenMode, $FSRead)

        [string]$filename = $_fileObj.name

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Uploading $($filename) file to appliance, this may take a few minutes..."

        try 
		{

            [System.Net.httpWebRequest]$uploadRequest = RestClient POST $uri -Appliance $ApplianceConnection.Name
           
            $boundary                                     = "--" + (-join(48..57+65..90+97..122 | ForEach-Object {[char]$_} | Get-Random -Count 20))
            $uploadRequest.Timeout                        = 1200000
            $uploadRequest.ContentType                    = "multipart/form-data; boundary=$boundary"
            $uploadRequest.Headers.Item("auth")           = $ApplianceConnection.SessionID
            $uploadRequest.Headers.Item("uploadfilename") = $filename
            $uploadRequest.AllowWriteStreamBuffering      = $false
            $uploadRequest.SendChunked                    = $true
            $uploadRequest.ContentLength                  = $fs.length

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request: POST $($uri )"

            $i = 0

            foreach ($h in $uploadRequest.Headers) 
			{
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request Header {$i} $($h) : $($uploadRequest.Headers[$i])"
				
				$i++
			
			}

            $rs = $uploadRequest.getRequestStream()

            $disposition = 'Content-Disposition: form-data; name="file"; filename="' + $_fileObj.Name + '"'

            $conType = "Content-Type: application/octet-stream"

            [byte[]]$readbuffer = New-Object byte[] 4194304 #1048576

            [byte[]]$BoundaryBytes = [System.Text.Encoding]::UTF8.GetBytes("--" + $boundary + "`r`n");
            $rs.write($BoundaryBytes,0,$BoundaryBytes.Length);

            [byte[]]$contentDisp = [System.Text.Encoding]::UTF8.GetBytes($disposition + "`r`n");
            $rs.write($contentDisp,0,$contentDisp.Length);

            [byte[]]$contentType = [System.Text.Encoding]::UTF8.GetBytes($conType + "`r`n`r`n");
            $rs.write($contentType,0,$contentType.Length);

            #This is used to keep track of the file upload progress.
            $numBytesToRead = $fs.Length    
            [int64]$numBytesRead = 0

            if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
			{ 
			
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Skipping Write-Progress display." 
			
			}

            do 
			{

		        $byteCount = $fs.Read($readbuffer,0,4194304)

		        $rs.write($readbuffer,0,$byteCount)
	        
		        #Keep track of where we are at clearduring the read operation
		        $numBytesRead += $bytecount

		        #Use the Write-Progress cmd-let to show the progress of uploading the file.
                [int]$percent = [math]::floor(($numBytesRead / $fs.Length) * 100)
                
                $status = "(" + $numBytesRead + " of " + $numBytesToRead + " transferred) Completed " + $percent + "%"

                #Handle the call from -Verbose so Write-Progress does not get borked on display.
                if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
				{ 

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Uploading file $fileName, status: $status, percentComplete: $percent"
                    
                }
                  
                else 
				{ 

					Write-Progress -activity "Upload File" -status "Uploading $Filename" -CurrentOperation $status -percentComplete $percent 

				}

            } while ($bytecount -gt 0)

            $fs.close()

            [byte[]]$endBoundaryBytes = [System.Text.Encoding]::UTF8.GetBytes("`n`r`n--" + $boundary + "--`r`n");

            $rs.write($endBoundaryBytes,0,$endBoundaryBytes.Length);

            $rs.close()

        }

        catch [System.Exception] 
		{

            #dispose if still exist
			if ($rs) { $rs.close() }
            if ($fs) { $fs.close() }

            $PSCmdlet.ThrowTerminatingError($_)

        }

        try 
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Upload Request completed."
		
			if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') {

				 Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Waiting for completion response from appliance."

			}

			else 
			{ 

				Write-Progress -activity "Upload File" -status "Uploading $Filename" -CurrentOperation "Waiting for completion response from appliance." -percentComplete $percent 
			
			}

            [net.httpWebResponse]$WebResponse = $uploadRequest.getResponse()
			
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Status: ($([int]$WebResponse.StatusCode)) $($WebResponse.StatusDescription)"
			
            $uploadResponseStream = $WebResponse.GetResponseStream()

            #Read the response & convert to JSON
            $reader       = New-Object System.IO.StreamReader($uploadResponseStream)
			$responseJson = $reader.ReadToEnd()

            $uploadResponse = $responseJson | convertFrom-Json

            $uploadResponseStream.Close()
            #$responseJson.Close()
            

            #need to parse the output to know when the upload is truly complete
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response: $($uploadResponse | out-string)"

            Write-Progress -activity "Upload File" -Completed

            $uploadRequest = $Null
            
			#dispose if still exist
			if ($rs) { $rs.close() }
            if ($fs) { $fs.close() }
			Write-Progress -activity "Upload File" -CurrentOperation "Uploading $Filename " -Completed

        }

        catch [Net.WebException] 
		{
            
            #This is not correct. Need to figure out how to get JSON error response, not just HTTP StatusCode from $_.Exception.Response.StatusCode
            $errorResponse = $_.Exception.InnerException.Response.GetResponseStream()
            $sr = New-Object IO.StreamReader ($errorResponse)
            
            $rawErrorStream = $sr.readtoend()

			$errorObject = $rawErrorStream | convertFrom-Json
            
            #Write-Host $errorObject.errorcode $errorObject.message $errorObject.resolution
			
			#dispose if still exist
            if ($rs) { $rs.close() }
            if ($fs) { $fs.close() }
			$errorResponse.close()
			$sr.close()

            Write-Error "$([int]$errorObject.ErrorCode)) $($errorObject.message)" -ErrorAction Stop
            
        }

    }

    end 
	{

        #Handle file uploads that generate task resource (i.e. Upload SPP Baseline)
        if ($uploadResponse.category -eq "tasks") 
		{
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response is a task resource"			

			$uploadResponse | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.TaskResource") }

        }

		Add-Member -InputObject $uploadResponse -NotePropertyName ApplianceConnection -NotePropertyValue ([PSCustomObject]@{ Name = $ApplianceConnection.Name; ConnectionId = $ApplianceConnection.ConnectionId }) -Force 

		Return $uploadResponse

    }

}

function Get-HPOVScmbCertificates {
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param(
        [parameter(Mandatory = $true,ValueFromPipeline = $false,ParameterSetName = "default", HelpMessage = "Specify the folder location to save the SSL certificates.", Position = 0)]
	    [parameter(Mandatory = $true,ValueFromPipeline = $false,ParameterSetName = "convert", HelpMessage = "Specify the folder location to save the SSL certificates.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias("save")]
        [string]$Location = $null,

        [parameter(Mandatory = $false,ParameterSetName = "convert", HelpMessage = "Convert rabbitmq_readonly client certificate to PFX format.")]
        [ValidateNotNullOrEmpty()]
        [Alias("pfx")]
        [switch]$ConvertToPFx,
	    
		[parameter(Mandatory = $true,ValueFromPipeline = $true,ParameterSetName = "convert", HelpMessage = "Password for PFX file")]
        [ValidateNotNullOrEmpty()]
		[SecureString]$Password
    )
	
    Begin {
        
        #Check to see if the user has authenticated to the appliance
        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError "Get-HPOVScmbCertificates" -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }
        
        #Validate the path exists.  If not, create it.
		if (-not(Test-Path $Location)){ 

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Directory does not exist.  Creating directory..."

            New-Item -path $Location -ItemType Directory

        }

    }

    Process{
		
		if ($Password){

			$decryptPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($password))

		}

        #Appliance CA
        $caFile = $Location + "\" + "ca.pem"
        
        #Appliance Public Key
        $publicKeyFile = $Location + "\" + "cert.pem"
        
        #Rabbit Client Private Key
        $privateKeyFile = $Location + "\" + "privateKey.pem"

        #Check to see if the Rabbit client cert was already created
        $keys = Send-HPOVRequest $script:applKeypairURI

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Existing keys? $($keys | out-string)"

        #If the client cert was not created, an error will be generated and we should send the request to create the cert
        #HTTP StatusCode should be 404, not 500.  QUIx entered to fix HTTP StatusCode from 500 to 404.
        If (([int]$script:lastWebResponse.StatusCode -eq 500) -or ([int]$script:lastWebResponse.StatusCode -eq 404)){
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received StatusCode: $([int]$script:lastWebResponse.StatusCode)"

            #Generate the client private key request
            $body = @{type="RabbitMqClientCertV2";commonName="default"} 
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Body: $($body | out-string)"

            $task = Send-HPOVRequest $script:applRabbitmqUri POST $body

            #Wait for task to complete
            Wait-HPOVTaskComplete $task.uri

            #Retrieve generated keys
            $keys = Send-HPOVRequest $script:applKeypairURI

        }
        
        try {

            New-Item $privateKeyFile -type file -force -value $keys.base64SSLKeyData | write-verbose

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Created rabbitmq_readonly user $($privateKeyFile)"

			If ($ConvertToPFx){

				$c = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($privateKeyFile)

				$bytes = $c.Export("Pfx",$decryptPassword)

				$privateKeyFile = $privateKeyFile.Replace(".pem",".pfx")

				[System.IO.File]::WriteAllBytes($privateKeyFile, $bytes)

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Created PFX certificate $($privateKeyFile)"

			}

        }

        catch {

            Write-Error $_ -ErrorAction Stop
		
		}

        try {

            New-Item $publicKeyFile -type file -force -value $keys.base64SSLCertData | Write-Verbose

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Created rabbitmq_readonly user $($publicKeyFile)"

			If ($ConvertToPFx){

				$c = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($publicKeyFile)

				$bytes = $c.Export("Pfx",$decryptPassword)

				$publicKeyFile = $publicKeyFile.Replace(".pem",".pfx")

				[System.IO.File]::WriteAllBytes($publicKeyFile, $bytes)

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Created PFX certificate $($publicKeyFile)"

			}

        }

        catch {

            Write-Error $_ -ErrorAction Stop

        }

        try {

            $ca = Send-HPOVRequest $script:applCaURI
            New-Item $caFile -type file -force -value $ca | Write-Verbose
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Created $($caFile)"
        }

        catch {

            Write-Error $error[0] -ErrorAction Stop

        }

    }
}

function Show-HPOVSSLCertificate {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    param( 
    
        [parameter(Mandatory = $True)]
        [Object]$Appliance = $Null
    
    )

    Begin { 
    
        if (-not($Appliance)) {

            $errorRecord = New-ErrorRecord ArgumentNullException InvalidArgumentValue InvalidArgument 'Show-HPOVSslCertificate' -Message "You are not connected to an appliance.  Please specify the -appliance parameter and provide the appliance FQDN, Hostname or IP Address." #-verbose
            $pscmdlet.ThrowTerminatingError($errorRecord)

        }
    
    }

    Process {

        $Chain      = $Null
        $Status     = $Null
        $Cert       = $Null
        $certObject = $Null

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Checking '$Appliance' appliance SSL Certificate"

        $ConnectString = "https://$Appliance"

        $WebRequest = [System.Net.HttpWebRequest]::Create($ConnectString)

        #Attempt connection to appliance.
        try { $Response = $WebRequest.GetResponse() }
		catch [System.Net.WebException] { 

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] [System.Net.WebException] code block."
            
            if ($_.Exception.Status -match "TrustFailure") { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Certificate failed trust validation." }
            
			elseif ($_.Exception -match "The remote name could not be resolved") {
                
                $errorRecord = New-ErrorRecord System.Net.WebException ApplianceNotResponding ObjectNotFound 'Show-HPOVSslCertificate' -Message "Unable to resolve hostname '$Appliance'.  Please check the name and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

			elseif ($_.Exception.Message -contains "Unable to connect to the remote server") {

                $errorRecord = New-ErrorRecord System.Net.WebException ApplianceNotResponding ConnectionError 'Show-HPOVSslCertificate' -Message "Unable to connect to '$Appliance' due to timeout or remote system didn't respond to the connection request." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

            else {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Other error caught."

				$errorRecord = New-ErrorRecord System.Net.WebException WebExceptionInvalidResult InvalidResult 'Show-HPOVSslCertificate' -Message $_.Exception.Message #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }
        
        }

		catch {

			write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Non-Specific CATCH block."

			$errorRecord = New-ErrorRecord System.Net.WebException WebExceptionInvalidResult InvalidResult 'Show-HPOVSslCertificate' -Message $_.Exception.Message #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)
        }
        
        #Close the response connection, as it is no longer needed, and will cause problems if left open.
        if ($response) { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Closing response connection"; $Response.Close() }

        if ($WebRequest.ServicePoint.Certificate -ne $null) {

            $Cert = [Security.Cryptography.X509Certificates.X509Certificate2]$WebRequest.ServicePoint.Certificate.Handle

            try { $SAN = ($Cert.Extensions | Where-Object {$_.Oid.Value -eq "2.5.29.17"}).Format(0) -split ", " }
            catch { $SAN = $null }

            $chain = New-Object Security.Cryptography.X509Certificates.X509Chain 

            [void]$chain.ChainPolicy.ApplicationPolicy.Add("1.3.6.1.5.5.7.3.1")
            $Status = $chain.Build($Cert)

            $certObject = [HPOneView.PKI.SslCertificate] @{

                OriginalUri             = $ConnectString;
                #ReturnedUri             = $Response.ResponseUri;
                Certificate             = $WebRequest.ServicePoint.Certificate;
                Issuer                  = $WebRequest.ServicePoint.Certificate.Issuer;
                Subject                 = $WebRequest.ServicePoint.Certificate.Subject;
                SubjectAlternativeNames = $SAN;
                CertificateIsValid      = $Status;
                ErrorInformation        = if ($chain.ChainStatus) { $chain.ChainStatus | ForEach-Object { $_.Status.ToString() } } else { $Null }

            }

            #If the certificate is NOT valid, display it and warn user
            if ((-not($certObject.CertificateIsValid)) -and ($certObject.ErrorInformation -contains "UntrustedRoot")) { 
        
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Cert Root is NOT trusted"

                #Display the certificate output in Yellow
                $originalFGColor = [System.Console]::ForegroundColor
                [System.Console]::ForegroundColor = [System.ConsoleColor]::Yellow
            
                #Display certificate details
                $certObject | Out-Host

                #Restore the console ForegroundColor
                [System.Console]::ForegroundColor = [System.ConsoleColor]::$originalFGColor

                Write-Warning "The appliance SSL Certificate is UNTRUSTED.  Us0e the Import-HPOVSSLCertificate to import the appliance Self-Signed certificate to your user accounts local Trusted Root Certification Authorities store to not display this warning when you first connect to your appliance."
				Write-Host ""

                #Value will be False, in String format, not Bool
                $ignore = $True
            
            }

			#If Cert IS valid, but cannot validate with Root CA, can validate with Subordinate CA and unable to validate revocation, display warning
			elseif ((-not ($certObject.CertificateIsValid)) -and ($certObject.ErrorInformation -contains "PartialChain" -and $certObject.ErrorInformation -contains "RevocationStatusUnknown" -and $certObject.ErrorInformation -contains "OfflineRevocation")) { 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Cert is NOT trusted and unable to validate CRL."

                #Display the certificate output in Yellow
                $originalFGColor = [System.Console]::ForegroundColor

                [System.Console]::ForegroundColor = [System.ConsoleColor]::Yellow

                #Display certificate details
                $certObject | Out-Host

                #Restore the console ForegroundColor
                [System.Console]::ForegroundColor = [System.ConsoleColor]::$originalFGColor

                Write-Warning "The appliance SSL Certificate is UNTRUSTED.  This system does not trust the CA issuer, and is unable to verify the Certificate Authorities Revocation List (CRL) or the Revocation List Destination (CLD) is not contained within the certificate."
				Write-Host ""
                
				#Value will be False, in String format, not Bool
                $ignore = $True

            }

			#If Cert IS valid, but cannot validate with Root CA and unable to validate revocation, display warning
			elseif ((-not ($certObject.CertificateIsValid)) -and ($certObject.ErrorInformation -contains "RevocationStatusUnknown" -and $certObject.ErrorInformation -contains "OfflineRevocation")) { 
                
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Cert is NOT trusted and unable to  validate CRL."
                
				#Display the certificate output in Yellow
                $originalFGColor = [System.Console]::ForegroundColor
                [System.Console]::ForegroundColor = [System.ConsoleColor]::Yellow
                
				#Display certificate details
                $certObject | Out-Host
                
				#Restore the console ForegroundColor
                [System.Console]::ForegroundColor = [System.ConsoleColor]::$originalFGColor
                
				Write-Warning "The appliance SSL Certificate is UNTRUSTED.  This system is unable to verify the Certificate Authorities Revocation List (CRL) or the Revocation List Destination (CLD) is not contained within the certificate.  If you are using an Enterprise Certificate Authority (i.e. Windows Server CA), please make sure the CRL is published as part of the issued certificate (CRL is an Extension that needs to be enabled prior to issuing certificates)."
				Write-Host ""
                
				#Value will be False, in String format, not Bool
                
				$ignore = $True
            
			}
			
			#Cert is valid
            elseif ($certObject.CertificateIsValid) {
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Cert is trusted"

                if ($VerbosePreference -eq "Continue") {

                    #Display the certificate output in Green
                    $originalFGColor = [System.Console]::ForegroundColor
                    [System.Console]::ForegroundColor = [System.ConsoleColor]::Green
            
                    #Display certificate details
                    $certObject | Out-Host

                    #Restore the console ForegroundColor
                    [System.Console]::ForegroundColor = [System.ConsoleColor]::$originalFGColor

                }

                $ignore = $True
            }

			#Remaining Invalid cases like appliance hostname/IP does not match Common Name (CN) or Subject Alternative Name (SAN)
            else {

				$certObject | Out-Host
	            $ignore = $False
                #Write-Error $Error[-1] -ErrorAction Stop
            }
            
            $chain.Reset()

        } 
        
        else {
        
            Write-Error $Error[-1] -ErrorAction Stop
        
        }
    
        $certObject = $Null
        $WebRequest = $Null
    }

    End {

        $ignore

    }

}

function Import-HPOVSslCertificate 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]

    Param 
	(
	
		[parameter(ValueFromPipeline, Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if (-not($PSBoundParameters['ApplianceConnection'])) { $PipelineInput = $True }

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance '$($_Connection.Name)' (of $($ApplianceConnection.Count))"

			$_ConnectString = "https://$_Connection"
        
			$WebRequest = [Net.WebRequest]::Create($_ConnectString)

			try 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting response"
				
				$Response = $WebRequest.GetResponse()
			
			}
			
			catch [Net.WebException] 
			{ 

				if (-not($WebRequest.Connection) -and ([int]$Response.StatusCode -eq 0)) 
				{

					Write-Error $_.Exception.Message -Category ObjectNotFound -ErrorAction Stop

				} 

			}

			#Close the response connection, as it is no longer needed, and will cause problems if left open.
			if ($response) 
			{
				
				write-verbose "Closing response connection"
				
				$Response.Close() 
			
			}

			if ($WebRequest.ServicePoint.Certificate -ne $null) 
			{

				#Get certificate
				$Cert = [Security.Cryptography.X509Certificates.X509Certificate2]$WebRequest.ServicePoint.Certificate #.Handle

				$StoreScope = "CurrentUser"
				$StoreName  = "Root" 

				#Save to users Trusted Root Authentication Hosts store
				$store = New-Object System.Security.Cryptography.X509Certificates.X509Store $StoreName, $StoreScope

				$store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)

				try 
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Attempting to add cert to store"

					$store.Add($cert)
					$store.Close()

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Cert added successfully"

					# // NEEDED ANYMORE? We don't use SSLCheckFlag global variable, nor do we use ServicePointManager.
					# Maybe set SSLCheck on connection object? what about if caller doesn't have an auth connection, which isn't required for this CMDLET?
					#Reset [System.Net.ServicePointManager]::CertificatePolicy after cert has been successfully imported.
					#if (($script:SSLCheckFlag) -and ([System.Net.ServicePointManager]::CertificatePolicy)) 
					#{
					#
					#	[System.Net.ServicePointManager]::CertificatePolicy = $Null
					#	$script:SSLCheckFlag = $False
					#
					#}

				}

				catch 
				{

					$store.Close()
					Write-Error $_.Exception.Message -Category InvalidResult -ErrorAction Stop

				}

			}

		}

    }
	
	End	
	{ 
		
		Write-Warning "Please note that the Subject Alternate Name (SAN) must match that of the Appliance hostname you use to connect to your appliance.  If it does not, an SSL connection failure will occur.  When creating a CSR on the appliance, make sure to include the additional FQDN and IP address(es) in the Alternative Name field." 
	
	}

}

function Restart-HPOVAppliance 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    Param 
	(
	
		[parameter(ValueFromPipeline, Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if (-not($PSBoundParameters['ApplianceConnection'])) { $PipelineInput = $True }

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{

				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}
		
		$TaskCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance '$($_Connection.Name)' (of $($ApplianceConnection.Count))"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Appliance Restart being request."

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Presenting confirmation prompt."

			Write-Warning "Restart of the appliance will cause all users to be disconnected and all ongoing tasks to be interrupted."

			if ($pscmdlet.ShouldProcess($script:HPOneViewAppliance,"restart appliance"))
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User confirmed appliance shutdown."    
				
				Try
				{

            
					$_resp = Send-HPOVRequest -uri $script:applianceRebootUri -method POST

				}
				
				Catch
				{

					$PScmdlet.ThrowTerminatingError($_)

				}

			}
            
			elseif ($PSBoundParameters['Whatif'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User passed -WhatIf."

			}

			else
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User cancelled shutdown request."

			}
		
		}
        
    }

	End
	{

		Return $TaskCollection

	}

}

function Stop-HPOVAppliance 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    Param 
	(
	
		[parameter(ValueFromPipeline, Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if (-not $PSBoundParameters['ApplianceConnection']) { $PipelineInput = $True }

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{

				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}
		
		$TaskCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance '$($_Connection.Name)' (of $($ApplianceConnection.Count))"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Appliance SHUTDOWN being requested..."

			write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Presenting confirmation prompt."

			Write-Warning "Shutdown of the appliance will cause all users to be disconnected and all ongoing tasks to be interrupted."

			if ($pscmdlet.ShouldProcess($_Connection.Name,"shutdown appliance"))		
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User confirmed appliance shutdown."    
				
				Try
				{

					$_resp = Send-HPOVRequest -uri $applianceShutDownUri POST -Hostname $_Connection

				}
				
				Catch
				{

					$PScmdlet.ThrowTerminatingError($_)

				}

				[void]$TaskCollection.Add($_resp)

			}

			elseif ($PSBoundParameters['Whatif'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User passed -WhatIf."

			}

			else
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User cancelled shutdown request."

			}
		
		}
        
    }

	End
	{

		Return $TaskCollection

	}

}

#######################################################
# Server Hardware and Enclosures: 
#

function Get-HPOVServer 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Default")]
	Param 
	(
		
        [parameter(Position = 0, Mandatory = $false, ParameterSetName = "Default")]
		[string]$Name = $null,

        [parameter(Mandatory = $false, ParameterSetName = "Default")]
        [switch]$NoProfile,

        [parameter(Mandatory = $false)]
		[ValidateNotNullOrEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

        $serverCollection = New-Object System.Collections.ArrayList

    }

	Process 
	{

        ForEach ($_Connection in $ApplianceConnection) 
		{

            $uri = $script:serversUri + "?sort=name:asc"

            if ($NoProfile) 
			{ 
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filtering for server hardware with no assigned profiles."

                $uri += "&filter=serverProfileUri=null"
            
            }

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"


			Try
			{

				$svrs = Send-HPOVRequest $uri -appliance $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
	        
            
            ForEach ($s in $svrs.members) 
			{

				$s.PSObject.TypeNames.Insert(0,'HPOneView.ServerHardare')

                [void]$serverCollection.Add($s)

            }

        }

	}

	End 
	{

        if ($Name) 
		{

            $serverCollection = $serverCollection | ? name -like $Name

        }

        if ($serverCollection.count -eq 0 -and $Name) 
		{
				
            $errorRecord = New-ErrorRecord HPOneView.ServerHardwareResourceException ServerHardwareResourceNotFound ObjectNotFound 'Name' -Message "Server '$Name' not found. Please check the name again, and try again." #-verbose
            $pscmdlet.ThrowTerminatingError($errorRecord)

		}

		"Done. {0} server resource(s) found." -f $serverCollection.count | write-verbose

        Return $serverCollection

    }

}

function Add-HPOVServer 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Managed",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param 
	(

        [parameter(ValueFromPipeline = $True, Mandatory = $true, HelpMessage = "Enter the host name (FQDN) or IP of the server's iLO.", Position = 0, ParameterSetName = "Monitored")]
        [parameter(ValueFromPipeline = $True, Mandatory = $true, HelpMessage = "Enter the host name (FQDN) or IP of the server's iLO.", Position = 0, ParameterSetName = "Managed")]
        [ValidateNotNullOrEmpty()]
        [string]$Hostname = $Null,
         
        [parameter(Mandatory = $true, HelpMessage = "Enter the iLO administrative user name.", Position = 1, ParameterSetName = "Monitored")]
        [parameter(Mandatory = $true, HelpMessage = "Enter the iLO administrative user name.", Position = 1, ParameterSetName = "Managed")]
        [ValidateNotNullOrEmpty()]
        [string]$Username = $Null,

        [parameter(Mandatory = $true, HelpMessage = "Enter the iLO administrative account password.", Position = 2, ParameterSetName = "Monitored")]
        [parameter(Mandatory = $true, HelpMessage = "Enter the iLO administrative account password.", Position = 2, ParameterSetName = "Managed")]
        [ValidateNotNullOrEmpty()]
        [string]$Password = $Null,

        [parameter(Mandatory = $true, HelpMessage = "Enter licensing intent for the server being imported (OneView or OneViewNoiLO).", Position = 3, ParameterSetName = "Managed")]
        [ValidateSet("OneView", "OneViewNoiLO")]
        [string]$LicensingIntent = $NULL,

        [parameter(Mandatory = $true, ParameterSetName = "Monitored")]
        [switch]$Monitored,

		[parameter(Mandatory = $true,ParameterSetName = "Monitored")]
		[parameter(Mandatory = $true,ParameterSetName = "Managed")]
		[ValidateNotNullorEmpty()]
		[object]$ApplianceConnection = $null

    )

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$colStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

		#New Server Resource Object
        $_server = NewObject -ServerImport
        $_server.hostname           = $hostname;
        $_server.username           = $username;
        $_server.password           = $password;
        $_server.licensingIntent    = $licensingIntent;        

		if ([bool]$Monitored) 
		{ 
        
            $server.licensingIntent    = "OneViewStandard"
            $server.configurationState = "Monitored"

        }

        else 
		{ 
			
			$server.configurationState = "Managed" 
		
		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to add server resource ($hostname)"

		Try
		{
		
			$task = Send-HPOVRequest $script:serversUri POST $server -Hostname $ApplianceConnection.Name
		
		}
        
		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request response: $($task | out-string)"

		Try
		{
			
			$resp = Wait-HPOVTaskStart $task

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Task response: $($resp | out-string)"

        #Check to see if the task errored, which should be in the Task Validation stage
        if ($resp.taskState -ne "Running") {

            if (($resp.taskState -eq "Error") -and ($resp.stateReason -eq "ValidationError")) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Task error found: $($resp.taskState), $($resp.stateReason)"
                
                #taskErrors should contain only a single value, so we will force pick the first one.
                $errorMessage = $resp.taskerrors[0]
                
                switch ($errorMessage.errorCode) 
				{

                    "SERVER_ALREADY_MANAGED" 
					{ 
                    
                        $externalManagerType = $errorMessage.data.managementProduct
                        $externalManagerIP = $errorMessage.data.managementUrl.Replace("https://","")
                        $externalManagerFQDN = [System.Net.DNS]::GetHostByAddress($externalManagerIP)

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found server '$hostname' is already being managed by $externalManagerType at $externalManagerIP."
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $externalManagerIP resolves to $($externalManagerFQDN | out-string)"
                        write-warning "Server '$hostname' is already being managed by $externalManagerType at $externalManagerIP ($($externalManagerFQDN.HostName))."

                        if ($pscmdlet.ShouldProcess($hostname,"Server is already being managed by $externalManagerType at $externalManagerIP ($($externalManagerFQDN.HostName)). Force add?")) 
						{
		    	    
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server was claimed and user chose YES to force add."
                	        $import | add-member -MemberType NoteProperty -name force -value $true -force | out-null
                            $resp = Send-HPOVRequest $script:serversUri POST $import

		                }

		                else 
						{

                            if ($PSBoundParameters['whatif'].ispresent) 
							{ 
                    
                                write-warning "-WhatIf was passed, would have force added '$hostname' server to appliance."
                                
								$resp= $null
                    
                            }

                            else 
							{

		    	                #If here, user chose "No", end processing
		    	                write-warning "Not importing server, $hostname."
                                
								$resp = $Null

                            }`

		                }
                    
                    }

                    "INVALID_ADDR" 
					{ 
                    
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Generating error: $($errorMessage.message)"
                        $errorRecord = New-ErrorRecord HPOneView.ServerHardwareResourceException ServerResourceNotFound ObjectNotFound 'New-HPOVServer' -Message ($errorMessage.message + " " + $errorMessage.recommendedActions )
                        $PSCmdlet.ThrowTerminatingError($errorRecord)
                    
                    }

                }
                    
            }

        }

		[void]$colStatus.Add($resp)
       
    }

    end 
	{
        
        Return $colStatus

    }
}

function Remove-HPOVServer 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param 
    (
    
        [parameter (Mandatory = $true, ValueFromPipeline = $true, HelpMessage = "Enter the rackmount server to be removed.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias("uri","name")]
        [object]$server,

		[parameter(Mandatory = $false)] 
		[switch]$force,

		[parameter(Mandatory = $true, ValueFromPipelineByPropertyName)]
		[Alias('Appliance')]
		[Object]$ApplianceConnection
	
    )

    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}
        
        if($ApplianceConnection.count -gt 1)
		{

            # Check for appliance specific URI parameters and error if more than one appliance connection supplied
            if (($server -is [string]) -and ($server.StartsWith($script:serversUri))) 
			{
                    
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SourceName is a Server Profile URI: $($server)"

                $errorRecord = New-ErrorRecord ArgumentNullException ParametersNotSpecified InvalidArgument 'Remove-HPOVServerProfile' -Message "The input parameter 'server' is a resource URI. For multiple appliance connections this is not supported." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

            if (($server -is [array]) -and ($server.getvalue(0).gettype() -is [string]) -and $server -match '/rest/') 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Assign is a Server Profile URI: $($SourceName)"

                $errorRecord = New-ErrorRecord ArgumentNullException ParametersNotSpecified InvalidArgument 'Remove-HPOVServerProfile' -Message "The input parameter 'server' is a resource URI. For multiple appliance connections this is not supported." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)
            
            }

        }

        $thisConnection = $ApplianceConnection.name

    }

    Process 
	{

        foreach ($svr in $server) 
		{
            
            $serverNameOrUri = $null;

            $serverDisplayName = $null;

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verifying server input object type"

            if ($svr -is [String]) 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server input object type is System.String ($($svr)) "

                $serverNameOrUri = $svr

                $serverDisplayName = $svr

            }

            elseif ($svr -is [PSCustomObject] -and $svr.category -ieq 'server-hardware') 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server input object is type System.PSCsustomObject: $($svr | out-string)"

                [string]$model = $svr.shortModel

                if ($model.StartsWith("BL")) 
				{

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Blade Server was passed. Displaying error."
                    $errorRecord = New-ErrorRecord InvalidOperationException InvalidRemoveServerMethod InvalidOperation 'Remove-HPOVServer' -Message "Blade servers must be removed with the enclosure they are contained in.  To remove a BL server, either physically remove it or remove the Enclosure from the appliance that contains the BL server." #-verbose
                    $pscmdlet.ThrowTerminatingError($errorRecord)

                }

                else 
				{

                    $thisConnection = $svr.ApplianceConnection.Name

                    $serverNameOrUri = $svr.uri;

                    $serverDisplayName = $svr.name;

                }

            }

            else 
			{

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Remove-HPOVServer' -Message "Invalid server parameter: $svr" #-verbose
                $pscmdlet.ThrowTerminatingError($errorRecord)

            }

            if ($pscmdlet.ShouldProcess($thisConnection,"Remove profile $serverDisplayName from appliance?"))
			{    

                if ([bool]$force) { Remove-HPOVResource -nameOrUri $serverNameOrUri -force -appliance $thisConnection }

                else { Remove-HPOVResource -nameOrUri $serverNameOrUri -appliance $thisConnection }

            }

        }

    }

}

function Set-HPOVServerPower 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param 
    (
    
        [parameter(Mandatory = $true,ValueFromPipeline = $true,HelpMessage = "Enter the uri or name for the server resource.", position = 0)]
        [ValidateNotNullOrEmpty()]
        [alias("name","uri","serverUri")]
        [object]$server,

        [parameter(Mandatory = $false, position = 1)]
        [ValidateSet("On", "Off")]
        [string]$powerState="On",

        [parameter(Mandatory = $false, position = 2)]
        [ValidateSet("PressAndHold", "MomentaryPress", "ColdBoot", "Reset")]
        [string]$powerControl="MomentaryPress",

        [parameter(Mandatory = $true)]
		[Alias('Appliance')]
		[object]$ApplianceConnection = ${Global:ConnectedSessions}
    
    )

    Begin 
    {

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_.Exception)

			}

		}

    }
    
    Process 
	{

        #Validate input object type
        #Checking if the input is System.String and is NOT a URI
        if (($server -is [string]) -and (-not($server.StartsWith($script:serversUri)))) 
		{
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server is a Server Name: $($server)"

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Server URI"

            $serverUri = (Get-HPOVServer $server -Appliance $applianceConnection).uri

        }

        #Checking if the input is System.String and IS a URI
        elseif (($server -is [string]) -and ($server.StartsWith($script:serversUri))) 
		{
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server is a Server device URI: $($server)"

            $serverUri = $server
        
        }

        #Checking if the input is PSCustomObject, and the category type is server-profiles, which could be passed via pipeline input
        elseif (($server -is [System.Management.Automation.PSCustomObject]) -and ($server.category -ieq "server-hardware")) 
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server is a Server Device object: $($server.name)"

            $serverUri = $server.uri
        
        }

        #Checking if the input is PSCustomObject, and the category type is server-hardware, which would be passed via pipeline input
        elseif (($server -is [System.Management.Automation.PSCustomObject]) -and ($server.category -ieq "server-profiles") -and ($server.serverHardwareUri)) 
		{
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server is a Server Profile object: $($server.name)"

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Server Profile is assigned to $((Get-HPOVServer $server.serverHardwareUri).name)"

            $serverUri = $server.serverHardwareUri
        
        }

        else 
		{

            $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Set-HPOVServerPower' -Message "The parameter 'Server' value is invalid.  Please validate the 'Server' parameter value you passed and try again." #-verbose
            $pscmdlet.ThrowTerminatingError($errorRecord)

        }

        #Validate the server power state and lock
		Try
		{

			$serverPowerState = Send-HPOVRequest $serverUri -appliance $ApplianceConnection

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}
        

        if (($serverPowerState.powerState -ine $powerState) -and (-not($serverPowerState.powerLock))) 
		{

            #Enforce the proper string case
            $powerState = (Get-Culture).TextInfo.ToTitleCase($powerState)
        
            #Enforce the proper string case
            switch ($powerControl) 
			{

                "PressAndHold" { $powerControl = "PressAndHold" }
                "MomentaryPress" { $powerControl = "MomentaryPress" }
                "ColdBoot" { $powerControl = "ColdBoot" }
                "Reset" { $powerControl = "Reset" }

            }

            $uri = $serverUri + "/powerState"
	    
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server to change power state: $($uri)"
	    
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Power State requested: $($powerControl)"
	    
            $body = [pscustomobject]@{powerState=$powerState; powerControl=$powerControl}
	    
			Try
			{

				Send-HPOVRequest $uri PUT $body -appliance $ApplianceConnection
		
			}
	    
			Catch
			{
	    
	    		$PSCmdlet.ThrowTerminatingError($_)
		
			}
	    
        }
	
        else 
		{ 
        
            if ($serverPowerState.powerState -ieq $powerState) 
			{
				
				 $errorMessage += "Requested Power State `($($powerState)`) is the same value as the current Server Power State `($($serverPowerState.powerState)`).  "  
			
			}

            if ($serverPowerState.powerLock) 
			{ 
				
				$errorMessage += "Server is currently under Power Lock.  "  
			
			}

            if ($errorMessage) 
			{ 
			
				write-error $errorMessage -Category InvalidOperation -CategoryTargetName "Set-HPOVServerPower" -ErrorAction Stop
			
			}
	    
        }
	
    }

}

function Get-HPOVEnclosureGroup 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]    
    Param 
	(

        [parameter(Position = 0, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
        [string]$name = $null,

		[parameter(Position = 1, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

        [parameter (Mandatory = $false)]
        [alias("x", "export")]
        [ValidateScript({split-path $_ | Test-Path})]
        [String]$exportFile

    )

	Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		$c = 0
		
		ForEach ($_connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$EGCollection = New-Object System.Collections.ArrayList
        
	}

    Process 
	{

		ForEach ($_connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($Appliance.Count))"

			if ($PSboundParameters['name']) 
			{

	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group name provided: '$name'"
	
				$name = $name -replace ("[*]","%25") -replace ("[&]","%26")
	
	            #$uri = $enclosureGroupsUri + "?filter=name='$name'"
				$uri = $enclosureGroupsUri + "?filter=name matches '$name'"
	
	        }
	
	        else 
			{
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Enclosure Group name provided. Looking for all Enclosure Group resources."
	
	            $uri = $enclosureGroupsUri
	
	        }
	
			Try
			{
	
				$enclGrps = Send-HPOVRequest $uri -Hostname $_connection
	
			}
	        
			Catch
			{
	
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] API Error Caught: $($_.Exception.Message)"
	
				$PSCmdlet.ThrowTerminatingError($_)
	
			}
	
	        if ($enclGrps.count -eq 0 -and $name) 
			{ 
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group '$name' resource not found. Generating error"

	            $errorRecord = New-ErrorRecord InvalidOperationException EnclosureGroupNotFound ObjectNotFound 'Name' -Message "The specified Enclosure Group '$name' was not found on '$($_connection.Name)'.  Please check the name and try again."  #-verbose
	            $pscmdlet.ThrowTerminatingError($errorRecord)  
	            
	        }
	
	        elseif ($enclGrps.count -eq 0) 
			{ 
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Enclosure Group resources found."
	
	        }
	
	        else 
			{
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found $($enclGrps.count) Enclosure Group resources."
	
				# // Todo Update ConvertTo-Object with LIG
				$enclGrps.members | % { 
					
					$_.PSObject.TypeNames.Insert(0,'HPOneView.EnclosureGroup')	
	
					[void]$EGCollection.Add($_ ) 
					
				}
	 
	        }

		}
   
    }

    end 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Done. $($enclGrps.count) enclosure group(s) found."     

        if ($exportFile)
		{ 
			
			$enclGrps.members | convertto-json -Depth 99 | Set-Content -Path $exportFile -force -encoding UTF8 
		
		}
                
        else 
		{
			
			Return $EGCollection
		
		}  

    }

}

function New-HPOVEnclosureGroup 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param 
	(

        [parameter(Position = 0, Mandatory, ParameterSetName = 'Default', HelpMessage = "Enter a name for the new enclosure group.")]
        [ValidateNotNullOrEmpty()]
        [string]$Name = $Null,
         
        [parameter(Position = 1, Mandatory, ValueFromPipeline, ParameterSetName = 'Default', HelpMessage = "Enter the Object or URI or Array of Objects or URIs of the Logical Interconnect Group to associate with the Enclosure Group.")]
        [ValidateNotNullOrEmpty()]
        [alias('logicalInterconnectGroupUri','logicalInterconnectGroup')]
        [object]$LogicalInterconnectGroupMapping = $Null,

        [parameter(Position = 2, Mandatory = $false, ParameterSetName = 'Default')]
		[ValidateSet('RedundantPowerFeed','RedundantPowerSupply', IgnoreCase = $false)]
        [string]$PowerRedundantMode = "RedundantPowerFeed",

        [parameter(Position = 3, Mandatory = $false, ParameterSetName = 'Default')]
        [string]$ConfigurationScript = $null,

		[parameter(Mandatory, ValueFromPipelineByPropertyName)]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = $null,

		[parameter(Mandatory = $true, ParameterSetName = "importFile", HelpMessage = "Enter the full path and file name for the input file.")]
		[Alias("i", "import")]
		[string]$ImportFile

    )

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		Try 
		{
	
			$ApplianceConnection = Test-HPOVAuth $_Connection

		}

		Catch [HPOneview.Appliance.AuthSessionException] 
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		Catch 
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		if (-not($PSBoundParameters['LogicalInterconnectGroupMapping']))
		{

			$PipelineInput = $true

		}

		$_EnclosureGroupCreateResults = New-Object System.Collections.ArrayList

    }

    Process 
	{

		$_EnclosureGroup = NewObject -EnclosureGroup

		#Process LIG Object here, and will be on a single Appliance Connection
        if ($PipelineInput -or $LogicalInterconnectGroupMapping -is [PSCustomObject]) 
		{ 
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LIG was passed via pipeline." 

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LIG:  $($LogicalInterconnectGroupMapping | fl * | out-string)" 

			#Check to make sure the object is a LIG, generate error if not
			if (-not($LogicalInterconnectGroupMapping.category -eq 'logical-interconnect-groups'))
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid LIG Category value provided '$($LogicalInterconnectGroupMapping.category)'"

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidLogicalInterconnectGroupCategory InvalidType 'LogicalInterconnectGroupMapping' -TargetType 'PSObject' -Message "Invalid [String] value provided '$logicalInterconnectGroup'.  Logical Interconnect Group URI must begin with /rest/logical-interconnect-groups." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			#Process Interconnect Bay Mapping, which is 1 LIG
			ForEach ($_LigBayMapping in $_LogicalInterconnectGroupMapping.interconnectMapTemplate.interconnectMapEntryTemplates.logicalLocation.locationEntries)
			{

				$_InterconnectBayMapping = NewOBject -InterconnectBayMapping

				$_InterconnectBayMapping.interconnectBay             = ($_LigBayMapping | ? type -EQ 'bay').relativeValue
				$_InterconnectBayMapping.logicalInterconnectGroupUri = $LogicalInterconnectGroupMapping.uri

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Interconnect Bay Mapping Entry:  $($_InterconnectBayMapping)" 

				[void]$_EnclosureGroup.interconnectBayMappings.Add($_InterconnectBayMapping)

			}

			$_EnclosureGroup.name      = $Name
			$_EnclosureGroup.powerMode = $PowerRedundantMode

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] EG Object: $($_EnclosureGroup | fl * | Out-String)"

			Try
			{
				
				$resp = Send-HPOVRequest $enclosureGroupsUri POST $_EnclosureGroup -Hostname $ApplianceConnection.Name

				$resp.PSObject.TypeNames.Insert(0,'HPOneView.EnclosureGroup')

				[void]$_EnclosureGroupCreateResults.Add($resp)

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		#Loop through Appliance Connections to create the Enclosure Group, and LIG Bay Mapping
		else
		{

			ForEach ($_key in $LogicalInterconnectGroupMapping.Keys)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Hashtable key '$_key'"

				switch (($LogicalInterconnectGroupMapping.$_key).GetType().Name)
				{

					'PSCustomObject'
					{

						#Validate object is a LIG
						if (-not(($LogicalInterconnectGroupMapping.$_key).category -eq 'logical-interconnect-groups'))
						{

							# // TODO Throw terminating error here
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid [PSCustomObject] value provided '$(($LogicalInterconnectGroupMapping.$_key).category)' for '$_key' Hashtable entry."
									
							$errorRecord = New-ErrorRecord InvalidOperationException InvalidLogicalInterconnectGroupMappingObject InvalidArgument 'LogicalInterconnectGroupMapping' -TargetType 'PSObject' -Message "Invalid [PSCustomObject] value provided '$(($LogicalInterconnectGroupMapping.$_key).category)' for '$_key' Hashtable entry.  Logical Interconnect Group object category must be 'logical-interconnect-groups'.  Please check the value and try again." #-verbose
							$PSCmdlet.ThrowTerminatingError($errorRecord)

						}

						$_InterconnectBayMapping = NewOBject -InterconnectBayMapping

						$_InterconnectBayMapping.interconnectBay             = (($LogicalInterconnectGroupMapping.$_key) | ? type -EQ 'bay' -and relativeValue -EQ $_key).relativeValue
						$_InterconnectBayMapping.logicalInterconnectGroupUri = ($LogicalInterconnectGroupMapping.$_key).uri

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Interconnect Bay Mapping Entry:  $($_InterconnectBayMapping)" 

						[void]$_EnclosureGroup.interconnectBayMappings.Add($_InterconnectBayMapping)

					}

					'String'
					{

						#Value is an Objects URI
						if (($LogicalInterconnectGroupMapping.$_key).StartsWith($logicalInterconnectGroupUri))
						{

							$_InterconnectBayMapping = NewOBject -InterconnectBayMapping

							$_InterconnectBayMapping.interconnectBay             = $_key
							$_InterconnectBayMapping.logicalInterconnectGroupUri = $LogicalInterconnectGroupMapping.$_key

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Interconnect Bay Mapping Entry:  $($_InterconnectBayMapping)" 

							[void]$_EnclosureGroup.interconnectBayMappings.Add($_InterconnectBayMapping)

						}

						#Object Name value
						else
						{

							Try
							{
									
								$_LogicalInterconnectGroupObject = Get-HPOVLogicalInterconnectGroup $LogicalInterconnectGroupMapping.$_key -ApplianceConnection $ApplianceConnection.Name
									
							}
									
							Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

						}

					}

				}

			}

		}

        $_EnclosureGroup.name                = $Name
        $_EnclosureGroup.configurationScript = $ConfigurationScript
		$_EnclosureGroup.powerMode           = $PowerRedundantMode

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group object: $($_EnclosureGroup | out-string)"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating $($_EnclosureGroup.name) Enclosure Group"


		Try
		{

			$resp = Send-HPOVRequest $enclosureGroupsUri POST $_EnclosureGroup -Hostname $ApplianceConnection.Name

			$resp.PSObject.TypeNames.Insert(0,'HPOneView.EnclosureGroup')

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}
        

		$_EnclosureGroupCreateResults.Add($resp)

    }

    End 
	{

        return $_EnclosureGroupCreateResults

    }

}

function Remove-HPOVEnclosureGroup 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param 
	(

        [parameter (Position = 0, Mandatory, ValueFromPipeline, ParameterSetName = "default", HelpMessage = "Enter the Enclosure Group to remove.")]
        [ValidateNotNullOrEmpty()]
        [Alias("uri", "name", "EnclosureGroup")]
        [object]$Resource,

		[parameter(Position = 1, ValueFromPipelineByPropertyName, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = $null,

        [parameter(Mandatory = $false)]
        [switch]$Force

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		if (-not($PSBoundParameters['Enclosure'])) { $PipelineInput = $True }

		$_TaskCollection           = New-Object System.Collections.ArrayList
		$_EnclosureGroupCollection = New-OBject System.Collections.ArrayList
        
	}

    Process 
	{

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		if ($PipelineInput) 
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Object provided: $($Resource | FL * | Out-String)"

			If ($Resource.category -eq 'enclosure-groups')
			{

				If (-not($Resource.ApplianceConnection))
				{

					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument $Resource.Name -TargetType PSObject -Message "The Enclosure Group resource provided is missing the source ApplianceConnection property.  Please check the object provided and try again." #-verbose
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				[void]$_EnclosureGroupCollection.Add($Resource)

			}

			else
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument $Resource.Name -TargetType PSObject -Message "The Enclosure Group resource is not an expected category type [$($Resource.category)].  Allowed resource category type is 'enclosure-groups'.  Please check the object provided and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

		}

		else 
		{

			foreach ($enclosuregroup in $Resource) 
			{

				#Enclosure passed is a URI
				if (($enclosuregroup -is [String]) -and [System.Uri]::IsWellFormedUriString($enclosure,'Relative')) 
				{

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received URI: $($enclosuregroup)"

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Enclosure Group Object"

					# // NEED APPLIANCE NAME HERE with If Condition
					Try
					{
						
						$enclosuregroup = Send-HPOVRequest $enclosuregroup -ApplianceConnection $ApplianceConnection

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}

				#Enclosure passed is the Name
				elseif (($enclosuregroup -is [string]) -and (-not($enclosuregroup.startsWith("/rest")))) 
				{

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received Enclosure Group Name $($enclosuregroup)"

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Enclosure Group object from Get-HPOVEnclosureGroup"
				    
					# // NEED APPLIANCE NAME HERE with If Condition
					Try
					{

						$enclosuregroup = Get-HPOVEnclosureGroup $enclosuregroup -ApplianceConnection $ApplianceConnection

					}
				    

				    Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}

				#Enclosure passed is an object
				elseif ($enclosuregroup -is [PSCustomObject] -and ($enclosuregroup.category -ieq 'enclosure-groups')) 
				{
				    
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Object provided: $($enclosuregroup | FL * | out-string)"
				
				}

				else 
				{

				    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Resource' -TargetType 'PSObject' -Message "Invalid Resource parameter: $($enclosuregroup | FL * | Out-String)" #-verbose
				    $PSCmdlet.WriteError($errorRecord)

				}

				[void]$_EnclosureGroupCollection.Add($enclosuregroup)

			}

		}
        
    }

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($_EnclosureCollection.count) Enclosure resources to remove."

		#Process Enclosure Resources
		ForEach ($_enclosuregroup in $_EnclosureGroupCollection)
		{

			if ($pscmdlet.ShouldProcess($_enclosuregroup.name,"Remove Enclosure Group from appliance '$($_enclosuregroup.ApplianceConnection.Name)'?")) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing Enclosure Group '$($_enclosuregroup.name)' from appliance '$($_enclosuregroup.ApplianceConnection.Name)'."

				Try
				{
					
					if ($PSBoundParameters['Force'])
					{

						$_enclosuregroup.uri += "?force=true"

					}

					$_resp = Send-HPOVRequest $_enclosuregroup.Uri DELETE -Hostname $_enclosuregroup.ApplianceConnection.Name

					[void]$_TaskCollection.Add($_resp)

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			elseif ($PSBoundParameters['WhatIf'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf parameter was passed."

			}

		}

		Return $_TaskCollection

	}

}

function Add-HPOVEnclosure 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Managed", SupportsShouldProcess = $true,ConfirmImpact = "High")]
    Param 
	(

        [parameter(Position = 0, Mandatory = $true, HelpMessage = "Enter the host name (FQDN) or IP of the primary OA.",ParameterSetName = "Monitored")]
        [parameter(Position = 0, Mandatory = $true, HelpMessage = "Enter the host name (FQDN) or IP of the primary OA.",ParameterSetName = "Managed")]
        [ValidateNotNullOrEmpty()]
        [Alias("oa")]
        [string]$Hostname,
         
        [parameter(position = 1, Mandatory = $true, HelpMessage = "Enter the enclosure group name with which to associate the new enclosure.",ParameterSetName = "Managed")]
        [ValidateNotNullOrEmpty()]
        [Alias("eg",'EnclGroupName')]
        [object]$EnclosureGroup,

        [parameter(position = 1,Mandatory = $true, HelpMessage = "Enter the OA administrative user name.",ParameterSetName = "Monitored")]
        [parameter(position = 2,Mandatory = $true, HelpMessage = "Enter the OA administrative user name.",ParameterSetName = "Managed")]
        [ValidateNotNullOrEmpty()]
        [Alias("u", "user")]
        [string]$Username,

        [parameter(position = 2,Mandatory = $true, HelpMessage = "Enter the OA administrative account password.",ParameterSetName = "Monitored")]
        [parameter(position = 3,Mandatory = $true, HelpMessage = "Enter the OA administrative account password.",ParameterSetName = "Managed")]
        [ValidateNotNullOrEmpty()]
        [Alias("p", "pw")]
        [string]$Password,

        [parameter(position = 4,Mandatory = $true, HelpMessage = "Enter licensing intent for servers in this enclosure (OneView, OneViewNoiLO, or OneViewStandard).",ParameterSetName = "Managed")]
        [ValidateSet('OneView', 'OneViewNoiLO', 'OneViewStandard', IgnoreCase = $False)]
        [Alias("license", "l")]
        [string]$LicensingIntent,

        [parameter(position = 5, Mandatory = $false,ParameterSetName = "Managed")]
        [Alias("fwIso","fwBaselineIsoFilename")]
        [object]$Baseline = $NULL,

        [parameter(Mandatory = $false,ParameterSetName = "Managed")]
        [alias('forceFw','forceInstall')]
        [switch]$ForceInstallFirmware,

        [parameter(Mandatory = $true,ParameterSetName = "Monitored")]
        [switch]$Monitored,

		[parameter(Mandatory = $true,ParameterSetName = "Monitored")]
		[parameter(Mandatory = $true,ParameterSetName = "Managed")]
		[ValidateNotNullorEmpty()]
		[object]$ApplianceConnection = $null

    )

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$colStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

        #Locate the Enclosure Group specified
        write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Starting"

		$_import          = NewObject -EnclosureImport
		$_import.hostname = $hostname
        $_import.username = $username
        $_import.password = $password

        if (-not([bool]$Monitored))
		{

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Building Managed Enclosure request"

			switch ($EnclosureGroup.GetType().Name)
			{

				'PSCustomObject'
				{

						write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - EnclosureGroup parameter is 'PSCustomObject'"

						write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - EnclosureGroup object category: '$($EnclosureGroup.category)'"

						write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - EnclosureGroup object name: '$($EnclosureGroup.name)'"

						if ($EnclosureGroup.category -ne 'enclosure-groups')
						{

							$errorRecord = New-ErrorRecord HPOneView.EnclosureGroupResourceException InvalidEnclosureGroupObject InvalidArgument 'EnclosureGroup' -TargetType 'PSObject' -Message "The EnclosureGroup parameter value contains an invalid or unsupported resource category, '$($EnclosureGroup.category)'.  The object category must be 'enclosure-groups'.  Please correct the value and try again." #-verbose
							$PSCmdlet.ThrowTerminatingError($errorRecord)

						}

						else
						{

							$_enclosuregroup = $EnclosureGroup.PSObject.Copy()

						}

					}

				'String'
				{

						if ($EnclosureGroup.StartsWith($enclosureGroupsUri))
						{

							Try
							{

								$_enclosuregroup = Get-HPOVEnclosureGroup $EnclosureGroup -ApplianceConnection $ApplianceConnection

							}

							catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

						}

						else
						{

							Try
							{

								$_enclosuregroup = Get-HPOVEnclosureGroup $EnclosureGroup -ApplianceConnection $ApplianceConnection

							}
							
							Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

						}
						
						write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Found Enclosure Group $($_enclosuregroup | out-String)"

					}

			}
            			

            $_import.licensingIntent      = $licensingIntent
            $_import.enclosureGroupUri    = $_enclosuregroup.uri
            $_import.forceInstallFirmware = [bool]$forceInstallFirmware
            $_import.updateFirmwareOn     = "EnclosureOnly" 
            
            if ($baseline) 
			{
					
					write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Firmware Baseline is to be configured"
					
					switch ($baseline.Gettype().Name) 
					{

						"String" 
						{
							
							if ($baseline.StartsWith($script:fwDriversUri)) 
							{
								
								write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Firmware Baseline URI Provided '$Basline'"
								
								Try
								{

									$fwBaseLine = Send-HPOVRequest $baseline -Hostname $ApplianceConnection.Name

								}
								
								Catch
								{

									$PSCmdlet.ThrowTerminatingError($_)

								}
						
							
							}
							
							elseif ((-not ($baseline.StartsWith($script:fwDriversUri)) -and ($baseline.StartsWith('/rest/')))) 
							{

								write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Invalid Firmware Baseline URI Provided '$Basline'"
								
								$errorRecord = New-ErrorRecord HPOneView.BaselineResourceException InavlideBaselineUri InvalidArgument 'Baseline' -Message "The Basline URI '$baseline' provided does not begin with '$script:fwDriversUri'.  Please correct the value and try again." #-verbose
								$PSCmdlet.ThrowTerminatingError($errorRecord)
							
							}

							else 
							{

								write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Firmware Baseline Name Provided '$Basline'"
								
								if ($baseline -match ".iso") 
								{

									write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Getting Baseline based on isoFileName."
									
									$fwBaseLine = Get-HPOVBaseline -isoFileName $baseline -ApplianceConnection $ApplianceConnection
								
								}

								else 
								{

									write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Getting Baseline based on Baseline Name."
									
									$fwBaseLine = Get-HPOVBaseline -SppName $baseline -ApplianceConnection $ApplianceConnection
								
								}
							}

							$_import.firmwareBaselineUri = $fwBaseLine.uri
						
						}
						"PSCustomObject" 
						{

							if ($baseline.category -eq "firmware-drivers" -and $baseline.ApplianceConnection.Name -eq $ApplianceConnection.Name) 
							{

								write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Firmware Baseline Object Provided: $($Basline | Out-String)"
								
								$import.firmwareBaselineUri = $Basline.uri	

							}

							else 
							{

								write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Invalid Firmware Baseline Object Provided: $($Basline | Out-String)"

								if ($baseline.category -ne "firmware-drivers" -and $baseline.ApplianceConnection.Name -eq $ApplianceConnection.Name) 
								{

									$errorRecord = New-ErrorRecord HPOneView.BaselineResourceException InvalideBaselineObject InvalidArgument 'Baseline' -TargetType 'PSObject' -Message "The Basline Category '$($baseline.category)' provided does not match the required value 'firmware-drivers'.  Please correct the value and try again." #-verbose

								}
								
								elseif ($baseline.category -eq "firmware-drivers" -and $baseline.ApplianceConnection.Name -ne $ApplianceConnection.Name) 
								{

									$errorRecord = New-ErrorRecord HPOneView.BaselineResourceException InvalidBaselineOrigin InvalidArgument 'Baseline' -TargetType 'PSObject' -Message "The Basline '$($baseline.name)' provided does not originate from the same ApplianceConnection you have specified.  Please correct the value and try again." #-verbose

								}
								
								$PSCmdlet.ThrowTerminatingError($errorRecord)

							}

						}

					}

                }       

        }

        else 
		{

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Building Monitored Enclosure request"

            $_import.licensingIntent = "OneViewStandard"
            $_import.state           = "Monitored"

        }

		write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Sending request to claim enclosure"

		Try
		{

			$resp = Send-HPOVRequest $script:enclosuresUri POST $_import -Hostname $ApplianceConnection.Name

		}
        
		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		Try
		{

			#Wait for task to get into Starting stage
			$resp = Wait-HPOVTaskStart $resp
		
		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

        write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - task response: $($resp | out-string)"

        #Check to see if the task errored, which should be in the Task Validation stage
        if ($resp.taskState -ne "Running") 
		{

            if (($resp.taskState -eq "Error") -and ($resp.stateReason -eq "ValidationError")) 
			{

                write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Task error found $($resp.taskState) $($resp.stateReason) "

                if ($resp.taskerrors | Where-Object { ($_.errorCode -eq "ENCLOSURE_ALREADY_MANAGED") -or ($_.errorCode -eq "ENCLOSURE_MANAGED_BY_VCM") }) 
				{
                
                    $errorMessage = $resp.taskerrors | Where-Object { ($_.errorCode -eq "ENCLOSURE_ALREADY_MANAGED") -or ($_.errorCode -eq "ENCLOSURE_MANAGED_BY_VCM") }

                    $externalManagerType = $errorMessage.data.managementProduct
                    $externalManagerIP   = $errorMessage.data.managementUrl.Replace("https://","")
                    $externalManagerFQDN = [System.Net.DNS]::GetHostByAddress($externalManagerIP)

                    write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Found enclosure '$hostname' is already being managed by $externalManagerType at $externalManagerIP."
                    write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - $externalManagerIP resolves to $($externalManagerFQDN | out-string)"
                    
					write-warning "Enclosure '$hostname' is already being managed by $externalManagerType at $externalManagerIP ($($externalManagerFQDN.HostName))."

                    if ($pscmdlet.ShouldProcess($hostname,"Enclosure '$hostname' is already being managed by $externalManagerType at $externalManagerIP ($($externalManagerFQDN.HostName)). Force add?")) 
					{
		            
                        write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Server was claimed and user chose YES to force add."

                        $_import.force = $true
                        
						Try
						{
						
							$resp = Send-HPOVRequest $enclosuresUri POST $_import -Hostname $ApplianceConnection.Name
						
						}

						Catch
						{

							$PSCmdlet.ThrowTerminatingError($_)

						}
						

		            }

		            else 
					{

                        if ($PSBoundParameters['whatif'].ispresent) 
						{	 
                    
                            write-warning "-WhatIf was passed, would have force added '$hostname' enclosure to appliance."

                            $resp = $null
                    
                        }

                        else 
						{

		                    #If here, user chose "No", end processing
		                    write-warning "Not importing enclosure, $hostname."

                            $resp = $Null

                        }

		            }

                }

                else 
				{

                    $errorMessage = $resp.taskerrors

                    if ($errorMessage -is [Array]) 
					{ 
                
                        #Loop to find a Message value that is not blank.
                        $displayMessage = $errorMessage | ? { $_.message }

                        $errorRecord = New-ErrorRecord HPOneView.EnclosureResourceException $displayMessage.errorCode InvalidResult 'New-HPOVEnclosure' -Message $displayMessage.message }
                
                    else 
					{ 
						
						$errorRecord = New-ErrorRecord HPOneView.EnclosureResourceException $errorMessage.errorCode InvalidResult 'New-HPOVEnclosure' -Message ($errorMessage.details + " " + $errorMessage.message) 
					
					}

                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                }

            }

        }

		[void]$colStatus.Add($resp)

    }

    end 
	{
        
        Return $colStatus

    }

}

function Update-HPOVEnclosure 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Refresh", SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    Param 
	(
        
        [parameter(Position = 0, ValueFromPipeline = $True, Mandatory = $false, HelpMessage = "Enter the Enclosure Name, or an Array of names.", ParameterSetName = "Reapply")]
        [parameter(Position = 0, ValueFromPipeline = $True, Mandatory = $false, HelpMessage = "Enter the Enclosure Name, or an Array of names.", ParameterSetName = "Refresh")]
        [ValidateNotNullOrEmpty()]
        [object]$Enclosure,

		[parameter(Position = 1, ValueFromPipelineByPropertyName, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

        [parameter(Mandatory = $true, HelpMessage = "Refresh the Enclosure configuration.", ParameterSetName = "Refresh")]
        [Switch]$Refresh,

        [parameter(Mandatory = $true, HelpMessage = "Reapply Enclosure Configuration", ParameterSetName = "Reapply")]
        [Switch]$Reapply,

        [parameter(Mandatory = $false, HelpMessage = "Monitor the progress.", ParameterSetName = "Reapply")]
        [parameter(Mandatory = $false, HelpMessage = "Monitor the progress.", ParameterSetName = "Refresh")]
        [switch]$Monitor

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		#Support ApplianceConnection property value via pipeline from Enclosure Object
		if($PSboundParameters['ApplianceConnection'])
		{

			ForEach ($_connection in $ApplianceConnection) 
			{

				Try 
				{
			
					$ApplianceConnection[$c] = Test-HPOVAuth $_connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}

		}

		if (-not($PSBoundParameters['Enclosure'])) { $PipelineInput = $True }

		$_TaskCollection      = New-Object System.Collections.ArrayList
		$_EnclosureCollection = New-OBject System.Collections.ArrayList
        
	}

    Process 
	{

		if ($PipelineInput) 
		{
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input."

			#error if the input value is not a PSObject
			if (-not($Enclosure -is [PSCustomObject]))
			{

				$errorRecord = New-ErrorRecord HPOneView.EnclosureResourceException InvalidEnclosureObjectType InvalidArgument 'Enclosure' -TargetType 'PSObject' -Message "The provided Enclosure value is not a valid PSObject ($($Enclosure.GetType().Name)). Please correct your input value." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure PSObject: $($Enclosure | FL * | out-string)."

			#Validate the Input object is the allowed category
			if ($Enclosure.category -ne 'enclosures')
			{

				$errorRecord = New-ErrorRecord HPOneView.LogicalEnclosureResourceException InvalidLogicalEnclosureCategory InvalidArgument 'Enclosure' -TargetType 'PSObject' -Message "The provided Enclosure object ($($Enclosure.name)) category '$($LogicalEnclosure.category)' is not an allowed value.  Expected category value is 'enclosures'. Please correct your input value." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			if(-not($Enclosure.ApplianceConnection))
			{

				$errorRecord = New-ErrorRecord HPOneView.LogicalEnclosureResourceException InvalidLogicalEnclosureObject InvalidArgument 'Enclosure' -TargetType 'PSObject' -Message "The provided Enclosure object ($($Enclosure.name)) does not contain the required 'ApplianceConnection' object property. Please correct your input value." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			[void]$_EnclosureCollection.Add($Enclosure)
		
		}

		#Not Pipeline input, and support Array of Enclosure Name or PSObject
		else
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing LogicalEnclosure parameter."

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LogicalEnclosure is [$($Enclosure.GetType().Name)]."

			ForEach ($_encl in $Enclosure)
			{

				switch ($_encl.GetType().Name)
				{

					#Enclosure Name
					'String' 
					{
					
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure value: $($_encl)."

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for Enclosure Name on connected sessions provided"

						#Loop through all Appliance Connections
						ForEach ($_connection in $ApplianceConnection)
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_connection.Name)' Session."

							Try
							{

								$_resp = Get-HPOVLogicalEnclosure $_encl -ApplianceConnection $_connection.Name

							}

							Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

							[void]$_EnclosureCollection.Add($_resp)

						}
					
					}

					#Enclosure Object
					'PSCustomObject'
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure PSObject: $($_encl | FL * | out-string)."

						#Validate the Input object is the allowed category
						if ($_encl.category -ne 'enclosures')
						{

							$errorRecord = New-ErrorRecord HPOneView.EnclosureResourceException InvalidEnclosureCategory InvalidArgument 'Enclosure' -TargetType 'PSObject' -Message "The provided Enclosure object ($($_encl.name)) category '$($_encl.category)' is not an allowed value.  Expected category value is 'enclosures'. Please correct your input value." #-verbose
							$PSCmdlet.ThrowTerminatingError($errorRecord)

						}

						[void]$_EnclosureCollection.Add($_resp)

					}

				}

			}

		}

	}

	End
	{
        #Perform the work
        ForEach ($_enclosure in $_EnclosureCollection) 
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Enclosure: '$($_enclosure.name) [$($_enclosure.uri)]'"
            
			if ($pscmdlet.ShouldProcess($_enclosure.name,"$($PSCmdlet.ParameterSetName) Enclosure configuration. WARNING: Depending on this action, there might be a brief outage."))
			{ 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to $($PSCmdlet.ParameterSetName) Enclosure configuration"

				Try
				{
					
					switch ($PSCmdlet.ParameterSetName) 
					{

						"Reapply" 
						{ 

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Reapply Enclosure configuration."
							
							$_task = Send-HPOVRequest ($_enclosure.uri + "/configuration") PUT -Hostname $_enclosure.ApplianceConnection.Name
						
						}
						
						"Refresh"
						{ 

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Refreshing Enclosure data."

							$body = [PSCustomObject]@{ refreshState = "Refreshing" }

							$_task = Send-HPOVRequest ($_enclosure.uri + "/refreshState" ) PUT $body -Hostname $_enclosure.ApplianceConnection.Name
						
						}
                
					}

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				if ($PSBoundParameters['Monitor'])
				{
					
					 $_task = Wait-HPOVTaskComplete $_task -ApplianceConnection $_enclosure.ApplianceConnection.Name
				
				}

				[void]$_TaskCollection.Add($_task)
                    
            }

            elseif ($PSBoundParamters['WhatIf'])
			{
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User included -WhatIf."
			
			}

			else
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User cancelled."

			}           

        }

		Return $_TaskCollection

    }




}

function Get-HPOVLogicalEnclosure 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
  
    [CmdletBinding(DefaultParameterSetName = "default")]    
    Param 
	(

        [parameter(Mandatory = $false,ParameterSetName = "default", Position = 0)]
		[validateNotNullorEmpty()]
        [string]$Name = $null,

		[parameter(Position = 1, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0
		
		ForEach ($_connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_LogicalEnclosureCollection = New-Object System.Collections.ArrayList
        
	}

    Process 
	{

		ForEach ($_connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($Appliance.Count))"

			if ($PSboundParameters['Name']) 
			{

	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Enclosure name provided: '$Name'"
	
				$Name = $Name -replace ("[*]","%25") -replace ("[&]","%26")
	
				$uri = $logicalEnclosuresUri + "?filter=name matches '$Name'&sort=name:asc"
	
	        }
	
	        else 
			{
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Logical Enclosure name provided. Looking for all resources."
	
	            $uri = $logicalEnclosuresUri + "?sort=name:asc"
	
	        }

			Try
			{
	
				$_LogicalEnclosures = Send-HPOVRequest $uri -Hostname $_connection
	
			}
	        
			Catch
			{
	
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] API Error Caught: $($_.Exception.Message)"
	
				$PSCmdlet.ThrowTerminatingError($_)
	
			}
	
	        if ($_LogicalEnclosures.count -eq 0 -and $Name) 
			{ 
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Enclosure '$Name' resource not found. Generating error"

	            $errorRecord = New-ErrorRecord HPOneView.LogicalEnclosureResourceException LogicalEnclosureNotFound ObjectNotFound 'Name' -Message "The specified Logical Enclosure '$Name' was not found on '$($_connection.Name)'.  Please check the name and try again."  #-verbose
	            $pscmdlet.ThrowTerminatingError($errorRecord)  
	            
	        }
	
	        elseif ($_enclosures.count -eq 0) 
			{ 
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Logical Enclosure resources found on $($_connection.name)."
	
	        }
	
	        else 
			{
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found $($_LogicalEnclosures.count) Enclosure Group resources."
	
				# // Todo Update ConvertTo-Object with LIG
				$_LogicalEnclosures.members | % { 
					
					$_.PSObject.TypeNames.Insert(0,'HPOneView.LogicalEnclosure')	
	
					[void]$_LogicalEnclosureCollection.Add($_ ) 
					
				}
	 
	        }

		}

	}

	End 
	{
                
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Done. $($_LogicalEnclosureCollection.count) enclosure(s) found."
				
		#Export results to exportfile
		if ($exportFile) 
		{ 
			
			$_LogicalEnclosureCollection | convertto-json -depth 99 > $exportFile 
		
		}
		
		# else Return Logical Enclosure object(s)
		else 
		{ 

            Return $_LogicalEnclosureCollection
        
        }

	}

}

function Update-HPOVLogicalEnclosure 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Reapply", SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    Param 
	(
        
        [parameter(Position = 0, ValueFromPipeline = $True, Mandatory = $false, HelpMessage = "Enter the Logical Enclosure Object, Name, or an Array of names.", ParameterSetName = "Update")]
        [parameter(Position = 0, ValueFromPipeline = $True, Mandatory = $false, HelpMessage = "Enter the Logical Enclosure Object, Name, or an Array of names.", ParameterSetName = "Reapply")]
        [ValidateNotNullOrEmpty()]
		[Alias('le')]
        [object]$LogicalEnclosure,

		[parameter(Position = 1, ValueFromPipelineByPropertyName, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

        [parameter(Mandatory = $true, HelpMessage = "Update Logical Enclosure configuration from Enclosure Group for compliance.", ParameterSetName = "Update")]
        [Alias('UpdateFromGroup')]
        [Switch]$Update,

        [parameter(Mandatory = $true, HelpMessage = "", ParameterSetName = "Reapply")]
        [Switch]$Reapply,

        [parameter(Mandatory = $false, HelpMessage = "Return created task object without waiting for completion.", ParameterSetName = "Update")]
        [parameter(Mandatory = $false, HelpMessage = "Return created task object without waiting for completion.", ParameterSetName = "Reapply")]
        [switch]$Async

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		#Support ApplianceConnection property value via pipeline from Enclosure Object
		if($PSboundParameters['ApplianceConnection'])
		{

			ForEach ($_connection in $ApplianceConnection) 
			{

				Try 
				{
			
					$ApplianceConnection[$c] = Test-HPOVAuth $_connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}

		}

		if (-not($PSBoundParameters['LogicalEnclosure'])) { $PipelineInput = $True }

		$_TaskCollection             = New-Object System.Collections.ArrayList
		$_LogicalEnclosureCollection = New-OBject System.Collections.ArrayList
        
	}

    Process 
	{

		if ($PipelineInput) 
		{
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input."

			#error if the input value is not a PSObject
			if (-not($LogicalEnclosure -is [PSCustomObject]))
			{

				$errorRecord = New-ErrorRecord HPOneView.LogicalEnclosureResourceException InvalidLogicalEnclosureObjectType InvalidArgument 'LogicalEnclosure' -TargetType 'PSObject' -Message "The provided LogicalEnclosure value is not a valid PSObject ($($LogicalEnclosure.GetType().Name)). Please correct your input value." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LogicalEnclosure PSObject: $($LogicalEnclosure | FL * | out-string)."

			#Validate the Input object is the allowed category
			if ($LogicalEnclosure.category -ne 'logical-enclosures')
			{

				$errorRecord = New-ErrorRecord HPOneView.LogicalEnclosureResourceException InvalidLogicalEnclosureCategory InvalidArgument 'LogicalEnclosure' -TargetType 'PSObject' -Message "The provided LogicalEnclosure object ($($LogicalEnclosure.name)) category '$($LogicalEnclosure.category)' is not an allowed value.  Expected category value is 'logical-enclosures'. Please correct your input value." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			if(-not($LogicalEnclosure.ApplianceConnection))
			{

				$errorRecord = New-ErrorRecord HPOneView.LogicalEnclosureResourceException InvalidLogicalEnclosureObject InvalidArgument 'LogicalEnclosure' -TargetType 'PSObject' -Message "The provided LogicalEnclosure object ($($LogicalEnclosure.name)) does not contain the required 'ApplianceConnection' object property. Please correct your input value." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			[void]$_LogicalEnclosureCollection.Add($LogicalEnclosure)
		
		}

		#Not Pipeline input, and support Array of Logical Enclosure Name or PSObject
		else
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing LogicalEnclosure parameter."

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LogicalEnclosure is [$($LogicalEnclosure.GetType().Name)]."

			ForEach ($_le in $LogicalEnclosure)
			{

				switch ($_le.GetType().Name)
				{

					#LE Name
					'String' 
					{
					
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LogicalEnclosure value: $($_le)."

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for Logical Enclosure Name on connected sessions provided"

						#Loop through all Appliance Connections
						ForEach ($_connection in $ApplianceConnection)
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_connection.Name)' Session."

							Try
							{

								$_resp = Get-HPOVLogicalEnclosure $_le -ApplianceConnection $_connection.Name

							}

							Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

							[void]$_LogicalEnclosureCollection.Add($_resp)

						}
					
					}

					#LE Object
					'PSCustomObject'
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LogicalEnclosure PSObject: $($_le | FL * | out-string)."

						#Validate the Input object is the allowed category
						if ($_le.category -ne 'logical-enclosures')
						{

							$errorRecord = New-ErrorRecord HPOneView.LogicalEnclosureResourceException InvalidLogicalEnclosureCategory InvalidArgument 'LogicalEnclosure' -TargetType 'PSObject' -Message "The provided LogicalInterconnect object ($($_le.name)) category '$($_le.category)' is not an allowed value.  Expected category value is 'logical-enclosures'. Please correct your input value." #-verbose
							$PSCmdlet.ThrowTerminatingError($errorRecord)

						}

						[void]$_LogicalEnclosureCollection.Add($_resp)

					}

				}

			}

		}

	}

	End
	{
        #Perform the work
        ForEach ($_leObject in $_LogicalEnclosureCollection) 
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Logical Enclosure: '$($_leObject.name) [$($_leObject.uri)]'"
            
            switch ($PSCmdlet.ParameterSetName) {

                "Reapply" 
				{ 

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Reapply configuration."
					
					$uri = $_leObject.uri + "/configuration" 
				
				}
                
				"Update"
				{ 

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Update from Group."
					
					$uri = $_leObject.uri + "/updateFromGroup" 
				
				}
                
            }

			if ($pscmdlet.ShouldProcess($_leObject.name,"$($PSCmdlet.ParameterSetName) Logical Enclosure configuration. WARNING: Depending on this action, there might be a brief outage."))
			{ 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to $($PSCmdlet.ParameterSetName) configuration"

				Try
				{

					$_task = Send-HPOVRequest $uri PUT -Hostname $_letoprocess.ApplianceConnection.Name

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				if (-not($PSBoundParameters['Async']))
				{
					
					 $_task = Wait-HPOVTaskComplete $_task -ApplianceConnection $_letoprocess.ApplianceConnection.Name
				
				}

				[void]$_TaskCollection.Add($_task)
                    
            }

            elseif ($PSBoundParamters['WhatIf'])
			{
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User included -WhatIf."
			
			}

			else
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User cancelled."

			}           

        }

		Return $_TaskCollection

    }

}

function Invoke-HPOVVcmMigration 
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = "Default", SupportsShouldProcess = $true, ConfirmImpact = "High")]
	param
	(

        [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Onboard Administrator IP Address or FQDN", ParameterSetName = "Report")]	
		[parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Onboard Administrator IP Address or FQDN", ParameterSetName = "VCEMMigration")]
        [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Onboard Administrator IP Address or FQDN", ParameterSetName = "Default")]
		[alias('oip')]
		[ValidateNotNullOrEmpty()]
		[System.String]$OAIPAddress,

        [parameter(Position = 1, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Onboard Administrator Administrator account", ParameterSetName = "Report")]
		[parameter(Position = 1, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Onboard Administrator Administrator account", ParameterSetName = "VCEMMigration")]
        [parameter(Position = 1, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Onboard Administrator Administrator account", ParameterSetName = "Default")]
		[alias('ou')]
		[ValidateNotNullOrEmpty()]
		[System.String]$OAUserName,

        [parameter(Position = 2, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Onboard Administrator Administrator password", ParameterSetName = "Report")]
		[parameter(Position = 2, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Onboard Administrator Administrator password", ParameterSetName = "VCEMMigration")]
		[parameter(Position = 2, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Onboard Administrator Administrator password", ParameterSetName = "Default")]
		[alias('op')]
		[ValidateNotNullOrEmpty()]
		[System.String]$OAPassword,

        [parameter(Position = 3, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Administrator account", ParameterSetName = "Report")]
		[parameter(Position = 3, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Administrator account", ParameterSetName = "VCEMMigration")]
		[parameter(Position = 3, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Administrator account", ParameterSetName = "Default")]
		[alias('vu')]
		[ValidateNotNullOrEmpty()]
		[System.String]$VCMUserName,

        [parameter(Position = 4, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Administrator password", ParameterSetName = "Report")]
		[parameter(Position = 4, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Administrator password", ParameterSetName = "VCEMMigration")]
		[parameter(Position = 4, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Administrator password", ParameterSetName = "Default")]
		[alias('vp')]
		[ValidateNotNullOrEmpty()]
		[System.String]$VCMPassword,

		[parameter(Position = 5, Mandatory = $false, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, HelpMessage = "Enclosure Group Resource Name, URI or Object", ParameterSetName = "Report")]
        [parameter(Position = 5, Mandatory = $false, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, HelpMessage = "Enclosure Group Resource Name, URI or Object", ParameterSetName = "VCEMMigration")]
        [parameter(Position = 5, Mandatory = $false, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, HelpMessage = "Enclosure Group Resource Name, URI or Object", ParameterSetName = "Default")]
		[alias('eg')]
        [ValidateScript({
            if (($_ -is [String]) -and ($_.StartsWith('/rest/')) -and (-not ($_.StartsWith('/rest/enclosure-groups')))) { Throw "'$_' is not an allowed resource URI.  Enclosure Group Resource URI must start with '/rest/enclosure-groups'. Please check the value and try again." } 
            elseif ($_ -is [String] -and ($_.StartsWith('/rest/'))) { $True }
            elseif ($_ -is [String]) { $True }
            
            elseif (($_ -is [PSCustomObject]) -and (-not ($_.category -eq "enclosure-groups"))) { 
            
                if ($_.category) { Throw "'$_.category' is not an allowed resource category.  The resource object category must be 'enclosure-groups'. Please check the value and try again." }
                else { Throw "The object provided does not contain an the allowed resource category 'enclosure-groups'. Please check the value and try again." }
            }
            else { $True } })]
		[Object]$EnclosureGroup = $Null,

		[parameter(Position = 6, Mandatory = $false, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, HelpMessage = "Logical Interconnect Group Resource Name, URI or Object", ParameterSetName = "Report")]
        [parameter(Position = 6, Mandatory = $false, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, HelpMessage = "Logical Interconnect Group Resource Name, URI or Object", ParameterSetName = "VCEMMigration")]
        [parameter(Position = 6, Mandatory = $false, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, HelpMessage = "Logical Interconnect Group Resource Name, URI or Object", ParameterSetName = "Default")]
		[alias('lig')]
        [ValidateScript({
            if (($_ -is [String]) -and ($_.StartsWith('/rest/')) -and (-not ($_.StartsWith('/rest/logical-interconnect-groups')))) { Throw "'$_' is not an allowed resource URI.  Logical Interconnect Group Resource URI must start with '/rest/logical-interconnect-groups'. Please check the value and try again." } 
            elseif ($_ -is [String] -and ($_.StartsWith('/rest/'))) { $True }
            elseif ($_ -is [String]) { $True }
            
            elseif (($_ -is [PSCustomObject]) -and (-not ($_.category -eq "logical-interconnect-groups"))) { 
            
                if ($_.category) { Throw "'$_.category' is not an allowed resource category.  The resource object category must be 'logical-interconnect-groups'. Please check the value and try again." }
                else { Throw "The object provided does not contain an the allowed resource category 'logical-interconnect-groups'. Please check the value and try again." }
            }
            else { $True } })]
		[Object]$LogicalInterconnectGroup = $Null,

		[parameter(Position = 7, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Enclosure License Intent; OneView or OneViewNoIlo", ParameterSetName = "Report")]
        [parameter(Position = 7, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Enclosure License Intent; OneView or OneViewNoIlo", ParameterSetName = "VCEMMigration")]
        [parameter(Position = 7, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Enclosure License Intent; OneView or OneViewNoIlo", ParameterSetName = "Default")]
		[ValidateSet("OneView", "OneViewNoiLO", IgnoreCase = $false)]
		[ValidateNotNullOrEmpty()]
        [Alias("license", "l")]
	    [System.String]$licensingIntent,

        [parameter(Position = 8, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Enterprise Manager CMS IP Address or FQDN", ParameterSetName = "Report")]
        [parameter(Position = 8, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Enterprise Manager CMS IP Address or FQDN", ParameterSetName = "VCEMMigration")]
		[String]$VCEMCMS,

        [parameter(Position = 9, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Enterprise Manager Administrator account", ParameterSetName = "Report")]
        [parameter(Position = 9, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Enterprise Manager Administrator account", ParameterSetName = "VCEMMigration")]
		[String]$VCEMUser,

        [parameter(Position = 10, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Enterprise Manager Administrator Password", ParameterSetName = "Report")]
        [parameter(Position = 10, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Virtual Connect Enterprise Manager Administrator Password", ParameterSetName = "VCEMMigration")]
		[String]$VCEMPassword,

		[parameter(Mandatory = $false, HelpMessage = "Do not wait for task to complete", ParameterSetName = "Default")]
		[Switch]$NoWait,

		[parameter(Mandatory = $true, HelpMessage = "Generate report only", ParameterSetName = "Report")]
		[Switch]$Report,

		[parameter(Mandatory = $false, HelpMessage = "Save Report Only", ParameterSetName = "Report")]
        [ValidateScript({
            if ({split-path $_ | Test-Path}) { $True } 
            else { Throw "'$(Split-Path $_)' is not a valid directory.  Please verify $(Split-Path $_) exists and try again." } 
            })]
		[System.String]$Export,

        [parameter(Mandatory = $true)]
		[Alias('Appliance')]
		[object]$ApplianceConnection
		
	)
	
	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_.Exception)

			}

		}

    }
	
	Process 
	{

        $vcMigrationObject = New-Object -vcMigration

        #Check to see if EnclosureGroup was provided
        if ($PSBoundParameters['EnclosureGroup']) 
		{
        
            switch ($EnclosureGroup.Gettype().Name) 
			{

                #Validate the String value
                "String" 
				{ 
                
                    #The value is an Enclosure Group URI
                    if ($EnclosureGroup.startswith('/rest/enclosure-groups')) 
					{

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Enclosure Group URI provided: $EnclosureGroup"
                       
						$vcMigrationObject.enclosureGroupUri = $EnclosureGroup

                    }

                    #The value is an enclosure group name
                    else 
					{
                        
                        #Enclosure group name provided.  Check if this is for a custom EG and LIG (LIG name also provided), or existing EG
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Enclosure Group Name provided: $EnclosureGroup"

                        try 
						{ 
                            
                            $eg = (Get-HPOVEnclosureGroup $EnclosureGroup -appliance $ApplianceConnection).uri 
                                
                            #Add the URI property to the migration object
                            $vcMigrationObject.enclosureGroupUri = $eg
                                
                        }

                        catch 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Enclosure Group '$EnclosureGroup' not found. Specifying custom Enclosure Group Name."
                            $vcMigrationObject | Add-Member -NotePropertyName "enclosureGroupName" -NotePropertyValue $EnclosureGroup -force

                        }

                    }
                    
                }
                "PSCustomObject" 
				{
            
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Enclosure Group resource object provided: $($EnclosureGroup | fl | out-string)"
                    $vcMigrationObject.enclosureGroupUri = $EnclosureGroup.uri
            
                }

            }#SWITCH

        }#If EG provided

		#Check to see if LogicalInterconnectGroup was provided
		if ($PSBoundParameters['LogicalInterconnectGroup']) {
        
            switch ($LogicalInterconnectGroup.Gettype().Name) {

                #Validate the String value
                "String" { 
                
                    #The value is an Enclosure Group URI
                    if ($LogicalInterconnectGroup.startswith('/rest/logical-interconnect-groups')) {

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Logical Interconnect Group URI provided: $LogicalInterconnectGroup"
                        $vcMigrationObject.logicalInterconnectGroupUri = $LogicalInterconnectGroup

                    }

                    #The value is an enclosure group name
                    else {
                        
                        #Enclosure group name provided.  Check if this is for a custom EG and LIG (LIG name also provided), or existing EG
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Logical Interconnect Group Name provided: $LogicalInterconnectGroup"

                        try { 
                            
                            $lig = (Get-HPOVEnclosureGroup $LogicalInterconnectGroup -appliance $ApplianceConnection).uri 
                                
                            #Add the URI property to the migration object
                            $vcMigrationObject.logicalInterconnectGroupUri = $lig
                                
                        }

                        catch {

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Logical Interconnect Group '$LogicalInterconnectGroup' not found. Specifying custom Logical Interconnect Group Name."
                            $vcMigrationObject | Add-Member -NotePropertyName logicalInterconnectGroupName -NotePropertyValue $LogicalInterconnectGroup -force

                        }

                    }
                    
                }
                "PSCustomObject" {
            
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Logical Interconnect Group resource object provided: $($LogicalInterconnectGroup | fl | out-string)"
                    $vcMigrationObject.logicalInterconnectGroupUri  = $LogicalInterconnectGroup.uri
            
                }

            }#SWITCH

        }#If EG provided

        #Send the POST and retrieve the Uri for the MigratableVcDomain resource
        $thisTask = Send-HPOVRequest -method POST -uri "/rest/migratable-vc-domains" -body $vcMigrationObject  -appliance $ApplianceConnection | Wait-HPOVTaskComplete
        
        if ($thisTask.taskState -ieq "Error") {

            $errorRecord = New-ErrorRecord HPOneView.EnclosureResourceException $thisTask.taskErrors.errorCode InvalidArgument 'Invoke-HPOVVcMigration' -Message "$($thisTask.taskErrors.message)" #-verbose
            $PsCmdlet.ThrowTerminatingError($errorRecord)

        }

        #If we get here, task was successful. Get the migration resource
        $vcMigrationReport = MigrationReport $thisTask

		$EnclosureName = $vcMigrationReport.apiVcMigrationReport.enclosureName

        if ($Export) {

            [Array]$Output = @()

			$Output += $vcMigrationReport.apiVcMigrationReport | ft $a -AutoSize -wrap
			$Output += $vcMigrationReport.apiVcMigrationReport| ft $b -AutoSize -wrap
			$Output += $vcMigrationReport.outReport | sort severity | fl $i

            $outFile = "$export\$($vcMigrationReport.apiVcMigrationReport.enclosureName)_$(get-date -uformat %Y%m%d).report"

            $vcMigrationReport.outReport += "Generated on $(get-date -uformat %c)"

            Out-File -InputObject  $Output -FilePath $outFile -Encoding utf8 -force -confirm:$false

            write-host "Report saved to: " -nonewline -ForegroundColor Green
            write-host "$outFile" -ForegroundColor Yellow

        }
        else {

			#Generate and return the report
			""
			"Migration Compatibility Report"
			"------------------------------"
			""
			$vcMigrationReport.apiVcMigrationReport | ft $a -AutoSize -wrap
			$vcMigrationReport.apiVcMigrationReport| ft $b -AutoSize -wrap
			$vcMigrationReport.outReport | sort severity | fl $i

        }

        #Generate terminating error if caller didn't include VCEMCMS parameter and $vcMigrationReport.VcemManaged is True
        if (-not ($PSBoundParameters["vcemcms"]) -and $vcMigrationReport.VcemManaged) {

            $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException VCEMCMSParameterMissing InvalidArgument 'VCEMCMS' -Message "The Enclosure is currently managed by a Virtual Connect Enterprise Manager (VCEM) CMS, and the -VCEMCMS parameter was not provided.  Please provide the required parameter and try again." #-verbose
            $PSCmdlet.ThrowTerminatingError($ErrorRecord)
                            
        }

        if ($VCEMCMS -and $vcMigrationReport.VcemManaged -and ($vcMigrationReport.apiVcMigrationReport.criticalCount -le 1) -and (-not ($Report.IsPresent))) {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Entering Eject VCM from VCEM DG process"
       
            $oaUrl = "https://$OAIPAddress/xmldata?item=all"

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Building SOAP Request to OA: $oaUrl” 

            try {

                $soapWebRequest = [System.Net.WebRequest]::Create($oaUrl) 
                $soapWebRequest.Accept = “text/xml” 
                $soapWebRequest.Method = “GET” 
                $resp = $soapWebRequest.GetResponse() 
                $responseStream = $resp.GetResponseStream() 
                $soapReader = [System.IO.StreamReader]($responseStream) 
                $ReturnXml = [Xml] $soapReader.ReadToEnd() 
                $responseStream.Close() 
                $resp.Close()
                $soapWebRequest = $Null
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Response received: $($returnXML.OuterXml | Out-String)"
    
            }

            catch [Net.WebException]{

                if ($_.exception.InnerException -match "The remote name could not be resolved") {

                    $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException OnboardAdministratorUnavailable ResourceUnavailable 'OAIP' -Message "$($_.exception.InnerException)" #-verbose
                    $PSCmdlet.ThrowTerminatingError($ErrorRecord)

                }

                else {

                    $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException $_.FullyQualifiedErrorId ResourceUnavailable 'OAIP' -Message "$($_.exception.message)" #-verbose
                    $PSCmdlet.ThrowTerminatingError($ErrorRecord)
                }

            }

            catch {

                $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException $_.FullyQualifiedErrorId ResourceUnavailable 'OAIP' -Message "$($_.exception.message)" #-verbose
                $PSCmdlet.ThrowTerminatingError($ErrorRecord)

            }

            #Recieved valid OA XML reply
            if ($ReturnXml.RIMP.INFRA2) { 
    
                if ($ReturnXml.RIMP.INFRA2.VCM.vcmMode -eq "true") {
            
                    $vcDomainName = $ReturnXml.RIMP.INFRA2.VCM.vcmDomainName
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Found VC Domain from OA:  '$vcDomainName'"
                            
                }
                else {

                    $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException NoVCDomainFound ResourceUnavailable 'OAIP' -Message "Enclosure is not managed by VCM or no valid VC Domain Found." #-verbose
                    $PSCmdlet.ThrowTerminatingError($ErrorRecord)

                }
    
            }
    
            #Reply will not have any returned data beyond the RIMP XML node, so generate error
            else {

                $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException NoVCDomainFound ResourceUnavailable 'OAIP' -Message "No data provided from XML Interface. Is it disabled?" #-verbose
                $PSCmdlet.ThrowTerminatingError($ErrorRecord)

            }

            #VCEM CodeBlock
            #Use the mvcd7_3 API Endpoint
            $XmlAuth = @"
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:v7="http://v7_3.api.mvcd.hp.com">
           <soapenv:Header/>
           <soapenv:Body>
              <v7:login>
                 <String_1>$VCEMUser</String_1>
                 <String_2>$VCEMPassword</String_2>
              </v7:login>
           </soapenv:Body>
        </soapenv:Envelope>
"@

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") $(get-date -UFormat `"%Y-%m-%d %T`") Authenticating to VCEM CMS host: $VCEMCMS."

            try {

                $Uri = "https://$($VCEMCMS):50000/mvcd7_3/SoapApi"
                $reply = Invoke-WebRequest -uri $Uri -Method POST -ContentType "text/xml" -Body $XmlAuth

            }
            catch [System.Net.WebException] {

				if ($_.exception -match "The remote name could not be resolved") {
				
					$ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException VcemHostUnavailable ResourceUnavailable 'VCEMCMS' -Message "The VCEM host '$VCEMCMS' remote name could not be resolved. Please check the name and try again." #-verbose
                    $PSCmdlet.ThrowTerminatingError($ErrorRecord)	

				}
				
				else { 

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") [System.Net.WebException] Error Caught: $($_.Exception.Response | out-string)"

					$ResponseCode = [int]$_.Exception.response.statuscode
					$ResponseMessage = $_.Exception.Message

					#Get exception response from Web Service API.
					if ($_.Exception.InnerException) { $HttpWebResponse = $_.Exception.InnerException.Response }
					else { $HttpWebResponse = $_.Exception.Response }

					$rs = $HttpWebResponse.GetResponseStream()
					$reader = New-Object System.IO.StreamReader($rs)
					
					if ($HttpWebResponse.ContentType.Contains("text/xml")) { [XML]$ErrorBodyResponse = $reader.ReadToEnd() }
					else { $ErrorBodyResponse = $reader.ReadToEnd() }

					switch ([int]$ResponseCode) {
					
					    404 {  

					        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") [System.Net.WebException] SOAP API Endpoint not found"
					
					        $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException VCEMSoapAPIEndPointNotFound ResourceUnavailable 'VCEMCMS' -Message "The provided VCEM CMS host '$VCEMCMS' does not have the VCEM role of HP Insight Software installed.  Please verify the VCEMCMS parameter value and try again." #-verbose
					        $PSCmdlet.ThrowTerminatingError($ErrorRecord)
					
					    }

					    default {

					        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") [System.Net.WebException] Internal Server Error or auth exception"
					        
					        if ($ErrorBodyResponse -is [XML]) {

					            $ResponseMessage = $ErrorBodyResponse.Envelope.body.Fault.faultstring

					            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Received XML Response FaultString:  $ResponseMessage"
					        
					        }              
					        
					        $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException VCEMSoapApiInternalError InvalidResult 'VCEMCMS' -Message "HTTP '$ResponseCode' Error. $ResponseMessage" #-verbose
					        $PSCmdlet.ThrowTerminatingError($ErrorRecord)

					    }

					}

				}

            }

            [XML]$ContentResponse = $reply.content
            $AuthToken = $ContentResponse.Envelope.Body.loginResponse.result

            #Check for new VCEM API Endpoint
            $getVcemApiVersion = @"
            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:v7="http://v7_3.api.mvcd.hp.com">
               <soapenv:Header/>
               <soapenv:Body>
                  <v7:getProductVersion>
                     <String_1>$AuthToken</String_1>
                  </v7:getProductVersion>
               </soapenv:Body>
            </soapenv:Envelope>
"@

            $Uri = "https://$($VCEMCMS):50000/mvcd7_3/SoapApi"
            $reply = Invoke-WebRequest -uri $Uri -Method POST -ContentType "text/xml" -Body $getVcemApiVersion
            
            [XML]$ContentResponse = $reply.content
            
            [version]$apiVersion = ($ContentResponse.Envelope.Body.getProductVersionResponse.result) -replace ("Virtual Connect Enterprise Manager v","")
			$apiVersionString = ($ContentResponse.Envelope.Body.getProductVersionResponse.result) -replace ("Virtual Connect Enterprise Manager v","") -replace ("\.","_")

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") VCEM API Version found: $apiVersion"


            if ($apiVersion -lt 7.3) {

                #Generate error that VCEM version is too old to support patch and instruct caller to upgrade to either 7.3+Patch or 7.4.1
                $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException VcemVersionTooOld ResourceUnavailable 'VCEMCMS' -Message "The VCEM host '$VCEMCMS' version '$($apiVersion.ToString())' is not supported. Please upgrade your VCEM CMS to at least 7.3 and obtain the VCEM 7.3/7.4 Patch (ftp://ftp.hp.com/pub/softlib2/software1/pubsw-generic/p270829882/v106568) and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($ErrorRecord)

            }

            #Locate VCM Domain within VCEM
            $FindVCDomainByNameRequest = @"
        <s11:Envelope xmlns:s11='http://schemas.xmlsoap.org/soap/envelope/'>
          <s11:Body>
            <ns1:findVCDomainByName xmlns:ns1='http://v7_3.api.mvcd.hp.com'>
              <String_1>$AuthToken</String_1>
              <String_2>$vcDomainName</String_2>
            </ns1:findVCDomainByName>
          </s11:Body>
        </s11:Envelope>
"@

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Looking for '$vcDomainName' VC Domain on VCEM host."

            $reply = Invoke-WebRequest -uri $Uri -Method POST -ContentType "text/xml" -Body $FindVCDomainByNameRequest

            [xml]$findVCDomainByNameResponse = $reply.content

            if ($findVCDomainByNameResponse.Envelope.body.findVCDomainByNameResponse.result.nil) {

                $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException NoVCDomainFound ResourceUnavailable 'OAIP' -Message "No data provided from XML Interface. Is it disabled?" #-verbose
                $PSCmdlet.ThrowTerminatingError($ErrorRecord)

            }

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Found VC Domain: $($findVCDomainByNameResponse.Envelope.body.findVCDomainByNameResponse.result | out-string)"

            if ($findVCDomainByNameResponse.Envelope.body.findVCDomainByNameResponse.result.status -eq "LICENSED_UNMANAGED") {

                Write-Warning "'$vcDomainName' is not currently managed by the VCEM CMS host."
                Return

            }

            $vcemDomainId = $findVCDomainByNameResponse.Envelope.body.findVCDomainByNameResponse.result.vcDomainId

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Attempting to remove VC Domain from VCEM Domain Group"

            if ($pscmdlet.ShouldProcess("$vcDomainName","Remove VC Domain From VC Domain Group")) {

                if ($apiVersion -ge "7.4.1") { 
                
                    $uri = "https://$($VCEMCMS):50000/mvcd$($apiVersionString)/SoapApi" 
                    $nameSpaceVer = "v$($apiVersionString)"
                }
                else { 
                
                    $uri = "https://$($VCEMCMS):50000/mvcdExtra/SoapApi" 
                    $nameSpaceVer = "vExtra"
                        
                }

                $removeVcDomainRequest = @"
<s11:Envelope xmlns:s11='http://schemas.xmlsoap.org/soap/envelope/'>
    <s11:Body>
    <ns1:removeVcDomainFromGroup xmlns:ns1='http://$nameSpaceVer.api.mvcd.hp.com'>
        <String_1>$AuthToken</String_1>
        <Long_2>$vcemDomainId</Long_2>
    </ns1:removeVcDomainFromGroup>
    </s11:Body>
</s11:Envelope>
"@

                #Attempt removeVcDomainFromGroup request to API
                try {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Attempting SOAP Call to '$uri'"

                    $soapWebRequest = [System.Net.HttpWebRequest]::Create($uri) 
                    $soapWebRequest.Accept = “text/xml” 
                    $soapWebRequest.ContentType = “text/xml”
                    $soapWebRequest.Method = “POST” 
                    $bytes = [System.Text.Encoding]::UTF8.GetBytes($removeVcDomainRequest) 
                    $soapWebRequest.ContentLength = $bytes.Length

                    [System.IO.Stream] $outputStream = [System.IO.Stream]$soapWebRequest.GetRequestStream()
                    $outputStream.Write($bytes,0,$bytes.Length)  
                    $outputStream.Close()

                    $resp = $soapWebRequest.GetResponse() 
                    $responseStream = $resp.GetResponseStream() 
                    $soapReader = [System.IO.StreamReader]($responseStream) 
                    $reply = [Xml]$soapReader.ReadToEnd() 
                    $responseStream.Close() 
                    $resp.Close()
                    $soapWebRequest = $Null
                
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Response received: $($reply.OuterXml)" #-verbose
    
                }

                Catch [System.Net.WebException] {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") [System.Net.WebException] exception caught: $($_.Exception.Response | out-string)"

                    $HttpWebResponse = $_.Exception.Response
                    $ResponseCode = [int]$_.Exception.response.statuscode
                    $ResponseMessage = $_.Exception.Message

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Getting error response stream."
                    
                    $rs = $HttpWebResponse.GetResponseStream()
                    $reader = New-Object System.IO.StreamReader($rs)

                    if ($HttpWebResponse.ContentType.Contains("text/xml")) { [XML]$ErrorBodyResponse = $reader.ReadToEnd() }

                    else { [String]$ErrorBodyResponse = $reader.ReadToEnd() }

                    if ($ErrorBodyResponse -is [String] -and $ErrorBodyResponse.StartsWith("<script>") -and [int]$ResponseCode -eq 404) { 
                    
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") [System.Net.WebException] SOAP API Endpoint not found.  Generating terminating error."
                
                        $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException VCEMSoapAPIEndPointNotFound ResourceUnavailable 'VCEMCMS' -Message "The provided VCEM CMS host '$VCEMCMS' does not have the required VCEM patch installed.  Please download the patch from (ftp://ftp.hp.com/pub/softlib2/software1/pubsw-generic/p270829882/v106568) and try again." #-verbose
                        $PSCmdlet.ThrowTerminatingError($ErrorRecord)

                    }
                    elseif ($ErrorBodyResponse -is [XML] -and [int]$HttpWebResponse.StatusCode -eq 500 -and $ErrorBodyResponse.Envelope.Body.Fault.faultstring -match "Failed to parse source: For input string: `"$vcemDomainId`"") {

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") '$vcDomainName' was not found on the VCEM host '$VCEMCMS'.  Generating terminating error."

                        $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException VcDomainNotFound ResourceUnavailable 'VCEMCMS' -Message "The Virtual Connect Domain '$vcDomainName' not found on VCEM host '$VCEMCMS'.  Please verify the Virtual Connect Domain is managed by the provided VCEM CMS host and try again." #-verbose
                        $PSCmdlet.ThrowTerminatingError($ErrorRecord)

                    }
                    elseif ($ErrorBodyResponse -is [XML]) {

                        $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException $ErrorBodyResponse.Envelope.Body.Fault.faultcode InvalidResult 'VCEMCMS' -Message "$($ErrorBodyResponse.Envelope.Body.Fault.faultstring)" #-verbose
                        $PSCmdlet.ThrowTerminatingError($ErrorRecord)
                    
                    }
                    else {

                        $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException VCEMApiCallGenericError InvalidResult 'VCEMCMS' -Message "HTTP '$ResponseCode ' Error. Message: $ResponseMessage" #-verbose
                        $PSCmdlet.ThrowTerminatingError($ErrorRecord)
                    
                    }

                }

                $jobId = $reply.Envelope.body.removeVcDomainFromGroupResponse.result

                if (-not ($jobId)){

                    $ErrorRecord = New-ErrorRecord HPOneview.VCMigratorException InvalidJobIdResult InvalidResult 'VCEMCMS' -Message "A valid VCEM Job ID was not provided." #-verbose
                    $PSCmdlet.ThrowTerminatingError($ErrorRecord)
                    
                }

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Monitoring VCEM Job ID '$jobId'"

				$Uri = "https://$($VCEMCMS):50000/mvcd7_3/SoapApi"

                $jobMonitorRequest = @"
        <s11:Envelope xmlns:s11='http://schemas.xmlsoap.org/soap/envelope/'>
          <s11:Body>
            <ns1:listStatusForMvcdJob xmlns:ns1='http://v7_3.api.mvcd.hp.com'>
              <String_1>$AuthToken</String_1>
              <Long_2>$jobId</Long_2>
            </ns1:listStatusForMvcdJob>
          </s11:Body>
        </s11:Envelope>
"@

                do {

                    #Hide the progress display of Invoke-WebRequest, which adds unecessary tet to the Write-Progress output
                    $progressPreference = 'silentlyContinue' 
                    $reply = Invoke-WebRequest -uri $Uri -Method POST -ContentType "text/xml" -Body $jobMonitorRequest

                    #Reset hidding progress display prior to executing Write-Progress
                    $progressPreference = 'Continue'  

                    [xml]$jobStatus = $reply.Content

                    Write-Verbose $($jobStatus.Envelope.body.listStatusForMvcdJobResponse.result | out-string)
                    Write-Verbose $($jobStatus.Envelope.body.listStatusForMvcdJobResponse.result.jobProgress[-1] | out-string)

                    if ($jobStatus.Envelope.body.listStatusForMvcdJobResponse.result.jobProgress[-1].progressDescription) { $status = $jobStatus.Envelope.body.listStatusForMvcdJobResponse.result.jobProgress[-1].progressDescription}
                    else { $status = "Waiting" }

                    if ($jobStatus.Envelope.body.listStatusForMvcdJobResponse.result.jobProgress[-1].percentComplete) { $PrecentComplete = $jobStatus.Envelope.body.listStatusForMvcdJobResponse.result.jobProgress[-1].percentComplete}
                    else { $PrecentComplete = 0 }

                    Write-Progress -id 2 -Activity $jobStatus.Envelope.body.listStatusForMvcdJobResponse.result.jobName -Status $status -PercentComplete $PrecentComplete

                } Until ($jobStatus.Envelope.body.listStatusForMvcdJobResponse.result.state -eq "COMPLETED" -or $jobStatus.Envelope.body.listStatusForMvcdJobResponse.result -eq "FAILED")
    
                #Job Failed, terminate
                if ($jobStatus.Envelope.body.listStatusForMvcdJobResponse.result -eq "FAILED") {
                
                    $errorRecord = New-ErrorRecord HPOneView.VCMigratorException $thisTask.taskErrors.errorCode InvalidArgument 'Invoke-HPOVVcMigration' -Message "$($thisTask.taskErrors.message)" #-verbose
                    $PsCmdlet.ThrowTerminatingError($errorRecord)
                
                }           
                
                Write-Progress -id 2 -Activity $jobStatus.Envelope.body.listStatusForMvcdJobResponse.result.jobName -Completed

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(get-date -UFormat `"%Y-%m-%d %T`") Checking Compatibility again."

                #Check for report status now
                $thisTask = Send-HPOVRequest -method POST -uri "/rest/migratable-vc-domains" -body $vcMigrationObject  -appliance $ApplianceConnection | Wait-HPOVTaskComplete

                if ($thisTask.taskState -ieq "Error") {

                    $errorRecord = New-ErrorRecord HPOneView.VCMigratorException $thisTask.taskErrors.errorCode InvalidResult 'Invoke-HPOVVcMigration' -Message "$($thisTask.taskErrors.message)" #-verbose
                    $PsCmdlet.ThrowTerminatingError($errorRecord)

                }

                #If we get here, task was successful. Generate new VCMMigrator report
                #$vcMigrationReport = Send-HPOVRequest $thisTask.associatedResource.resourceUri
                $vcMigrationReport = MigrationReport $thisTask

                if ($vcMigrationReport.apiVcMigrationReport.migrationState -eq "UnableToMigrate") {

                    $errorRecord = New-ErrorRecord HPOneView.VCMigratorException UnableToMigrateVCDomain InvalidResult 'Invoke-HPOVVcMigration' -Message "The VC Domain in unable to be migrated due to $($vcMigrationReport.apiVcMigrationReport.highCount) Critical Issues.  Please examine the VC Migration Report to identify what needs to be resolved before migration can continue." #-verbose
                    $PsCmdlet.ThrowTerminatingError($errorRecord)

                }

				#Generate and return the report
				""
				"Migration Compatibility Report"
				"------------------------------"
				""
				$vcMigrationReport.apiVcMigrationReport | ft $a -AutoSize -wrap
				$vcMigrationReport.apiVcMigrationReport| ft $b -AutoSize -wrap
				$vcMigrationReport.outReport | sort severity | fl $i

            }

            Else {

                if ($PSBoundParameters['whatif'].ispresent) { 
                            
                    write-warning "-WhatIf was passed, would have proceeded with removing '$vcDomainName' from VCEM Domain Group."
                    $resp = $null
            
                }
                else {

	                #If here, user chose "No", end processing
                    write-host ""
	                write-warning "Not removing '$vcDomainName'from VCEM Domain Group and unable to proceed without removing the VC Domain from the VCEM Domain Group."
                    write-host ""
                    
                    $resp = $Null

                }

            }

        }

		#We are ready to migrate
        if ($vcMigrationReport.migrationState -eq "ReadyToMigrate" -and -not ($report.IsPresent)) {
            
            if ($pscmdlet.ShouldProcess("enclosure $EnclosureName at $($vcMigrationReport.apiVcMigrationReport.enclosureIp)","Process migration")) {
                
                #Make the PUT call to migrate
                $migrateTask = Send-HPOVRequest -method PUT -uri $vcMigrationReport.apiVcMigrationReport.uri -body @{migrationState = "Migrated"; type = "migratable-vc-domains"}  -appliance $ApplianceConnection

                if ($NoWait) {

                    $resp = $migrateTask

                }
                else {
                    
                    $resp = $migrateTask | Wait-HPOVTaskComplete -timeout (New-TimeSpan -Minutes 60)

                }

            }
            else {

                if ($PSBoundParameters['whatif'].ispresent) { 
                            
                    write-warning "-WhatIf was passed, would have proceeded with migration of $($vcMigrationReport.apiVcMigrationReport.enclosureName)."
                    $resp = $null
            
                }
                else {

	                #If here, user chose "No", end processing
                    write-host ""
	                write-warning "Not migrating enclosure, $($vcMigrationReport.apiVcMigrationReport.enclosureName)."
                    write-host ""
                    
                    $resp = $Null

                }

            }

        }#End if ReadyToMigrate

		#Handle error conditions that need to be resolved by the caller before migration can be performed.
		elseif ($vcMigrationReport.migrationState -eq "UnableToMigrate" -and $vcMigrationReport.apiVcMigrationReport.criticalCount -ge 1) {
		
			$errorRecord = New-ErrorRecord HPOneView.VCMigratorException UnableToMigrateEnclosure InvalidResult 'Invoke-HPOVVcMigration' -Message "There are 1 or more critical issues preventing the enclosure from being eligible to migrate.  Please run a compatibility report using the -report switch, then review and resolve the reported issues before continuing." #-verbose
            $PsCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif ($vcMigrationReport.migrationState -eq "Migrated") {
		
			$errorRecord = New-ErrorRecord HPOneView.VCMigratorException EnclosureMigrated OperationStopped 'OAIP' -Message "The enclosure '$EnclosureName' was already migrated.  Not performing action again." #-verbose
			$PsCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif ($vcMigrationReport.migrationState -eq "Migrating") {
		
			$errorRecord = New-ErrorRecord HPOneView.VCMigratorException MigratingEnclosure InvalidOperation 'OAIP' -Message "An asynchronOut task migrating enclosure '$EnclosureName' exists and is currently still running." #-verbose
			$PsCmdlet.ThrowTerminatingError($errorRecord)

		}
           
	}#End process
	
	End {
	     
	    $resp
	}

}

function MigrationReport ($task){

    $vcMigrationReport = [PSCustomObject]@{

        apiVcMigrationReport = @{};
        issueCount           = [int]$null;
        migrationState       = [String]$Null;
        VcemManaged          = [Bool]$False;
        outReport            = [Array]@()

    }

    $vcMigrationReport.apiVcMigrationReport = Send-HPOVRequest $task.associatedResource.resourceUri

    $vcMigrationReport.migrationState = $vcMigrationReport.apiVcMigrationReport.migrationState

    $vcMigrationReport.issueCount = $vcMigrationReport.apiVcMigrationReport.highCount + $vcMigrationReport.apiVcMigrationReport.mediumCount + $vcMigrationReport.apiVcMigrationReport.lowCount
        
    if ($vcMigrationReport.migrationState -eq "UnableToMigrate" -or $vcMigrationReport.issueCount -gt 0) {

        [Array]$outReport = $null
            
        foreach ($itemCategory in $vcMigrationReport.apiVcMigrationReport.items) {
            
            foreach ($issue in $itemCategory.issues) {
            
                $issue | % { 

                    if ($_.description -match "The specified enclosure is managed by Virtual Connect Enterprise Manager") {

                        Write-Warning "Enclosure is currently managed by Virtual Connect Enterprise Manager."
                                
                        $vcMigrationReport.VcemManaged = $True
                        
                    }

                    $_ | add-member -NotePropertyName name -NotePropertyValue $itemCategory.name -force 
                    $_ | add-member -NotePropertyName resourceName -NotePropertyValue $_.name -force 
                    $vcMigrationReport.outReport += $_  
                        
                }
            
            }
            
            foreach ($item in $itemCategory.items) { 
            
                $items = $item | where { $_.severity -notmatch "OK" }
                $items | foreach { 
            
                    $_.issues | add-member -NotePropertyName name -NotePropertyValue $itemCategory.name -force 
                    $_.issues | add-member -NotePropertyName resourceName -NotePropertyValue $_.name -force 
                    $vcMigrationReport.outReport += $_.issues
            
                }
                
            }
            
        }

    }
            
    Return $vcMigrationReport

}

function Get-HPOVEnclosure 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
  
    [CmdletBinding(DefaultParameterSetName = "default")]    
    Param 
	(

        [parameter(Mandatory = $false,ParameterSetName = "default", Position = 0)]
		[parameter(Mandatory = $false,ParameterSetName = "export", Position = 0)]
		[parameter(Mandatory = $false,ParameterSetName = "report", Position = 0)]
		[validateNotNullorEmpty()]
        [string]$Name = $null,

		[parameter(Position = 1, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

        [parameter (Mandatory = $false,ParameterSetName = "export", Position = 2)]
        [Alias("x", "export")]
        [ValidateScript({split-path $_ | Test-Path})]
        [String]$exportFile,
			
		[parameter (Mandatory = $false,ParameterSetName = "report")]
		[switch]$Report

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0
		
		ForEach ($_connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$EnclosureCollection = New-Object System.Collections.ArrayList
        
	}

    Process 
	{

		ForEach ($_connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($Appliance.Count))"

			if ($PSboundParameters['name']) 
			{

	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group name provided: '$name'"
	
				$name = $name -replace ("[*]","%25") -replace ("[&]","%26")
	
				$uri = $enclosuresUri + "?filter=name matches '$name'&sort=name:asc"
	
	        }
	
	        else 
			{
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Enclosure Group name provided. Looking for all Enclosure Group resources."
	
	            $uri = $enclosuresUri
	
	        }

			Try
			{
	
				$_enclosures = Send-HPOVRequest $uri -Hostname $_connection
	
			}
	        
			Catch
			{
	
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] API Error Caught: $($_.Exception.Message)"
	
				$PSCmdlet.ThrowTerminatingError($_)
	
			}
	
	        if ($_enclosures.count -eq 0 -and $name) 
			{ 
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure '$name' resource not found. Generating error"

	            $errorRecord = New-ErrorRecord InvalidOperationException EnclosureGroupNotFound ObjectNotFound 'Name' -Message "The specified Enclosure '$name' was not found on '$($_connection.Name)'.  Please check the name and try again."  #-verbose
	            $pscmdlet.ThrowTerminatingError($errorRecord)  
	            
	        }
	
	        elseif ($_enclosures.count -eq 0) 
			{ 
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Enclosure resources found on $($_connection.name)."
	
	        }
	
	        else 
			{
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found $($_enclosures.count) Enclosure Group resources."
	
				# // Todo Update ConvertTo-Object with LIG
				$_enclosures.members | % { 
					
					$_.PSObject.TypeNames.Insert(0,'HPOneView.Enclosure')	
	
					[void]$EnclosureCollection.Add($_ ) 
					
				}
	 
	        }

		}

	}

	End 
	{
                
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Done. $($EnclosureCollection.count) enclosure(s) found."
				
		#Display a report of an enclsosure
        if ($Report) 
		{ 
			
			$EnclosureCollection | % { Enclosure-Report $_ } 
		
		}
		
		#display the JSON body of the enclosure
		elseif ($exportFile) 
		{ 
			
			$EnclosureCollection | convertto-json -depth 99 > $exportFile 
		
		}
		
		# else Return enclosure object
		else 
		{ 

            Return $EnclosureCollection
        
        }

	}

}

function Enclosure-Report 
{

    <#
        .DESCRIPTION
        Internal helper function to display the report of an enclosure

        .PARAMETER Enclosure
        The enclosure object.
	
        .PARAMETER file
        File to save the report to.
	
        .INPUTS
        Enclosure object.

        .OUTPUTS
        Enclosure report.

        .LINK
        Get-HPOVEnclosure

        .LINK
        Send-HPOVRequest

        .EXAMPLE
        PS C:\> $enclosures = Get-HPOVEnclosure
        Return all the enclosure hardware  managed by this appliance.

    #>
    
	[CmdletBinding()]    
    Param 
	(

        [parameter(Mandatory = $true,ValueFromPipeline = $true, Position = 0)]
        [object]$Enclosure,
	
	    [parameter(Mandatory = $false,ValueFromPipeline = $false, Position = 1)]
        [object]$file = $null,
	
		[parameter(Mandatory = $false)]
        [switch]$fwreport
    )

	Process 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"
		
		write-verbose "ENCLOSURE OBJECT:  $($enclosure)"
        write-verbose "ENCLOSURE UUID:  $($Enclosure.uuid)"
	
	#ENCLOSURE REPORT DATA
        $a = @{Expression={$_.name};Label="Enclosure Name";width=15},
			 @{Expression={$_.serialNumber};Label="Serial Number";width=15},
			 @{Expression={$_.enclosureType};Label="Enclosure Model";width=30},
			 @{Expression={$_.rackName};Label="Rack Name";width=12},
			 @{Expression={$_.isFwManaged};Label="FW Managed";width=10},
			 @{Expression={$_.fwBaseLineName};Label="Baseline Name";width=30}

		#Generate Report
        $Enclosure | format-table $a -AutoSize
		
		#License Intent Report
		$a = @{Expression={$_.licensingIntent};Label="Licensing";width=15}

		$Enclosure | format-table $a -AutoSize
		
	#ONBOARD ADMINISTRATOR REPORT DATA
        $a = @{Expression={$_.bayNumber};Label="OA Bay";width=10},
			 @{Expression={$_.role};Label="Role";width=15},
			 @{Expression={$_.ipAddress};Label="IP Address";width=15},
			 @{Expression={($_.fwVersion + " " + $_.fwBuildDate)};Label="Firmware Version";width=20}
        
        $Enclosure.oa | Format-Table $a -AutoSize
		
	#DEVICE BAY REPORT DATA
		#Looking for servers related to the requested enclosure
		$serversCol = New-Object System.Collections.ArrayList
		
		#Loop through populated device bays
		ForEach ($_DeviceBay in ($Enclosure.deviceBays | ? { $_.devicePresence -eq 'Present' -and $_.deviceUri } ))
		{
			
			#Loop through index association results
			#$enclosureDeviceAssociation.members | % { [void]$deviceBays.Add((send-hpovrequest $_.childuri -Hostname $Enclosure.ApplianceConnection.Name)) }
			[void]$serversCol.Add((Send-HPOVRequest $_DeviceBay.deviceUri -Hostname $Enclosure.ApplianceConnection.Name))

		}
		
        $serversCol | out-string | write-verbose
		
		$a = @{Expression={$_.name};Label="Server Name";width=20},
			 @{Expression={$_.serialNumber};Label="Serial Number";width=15},
			 @{Expression={$_.shortModel};Label="Model";width=12},
			 @{Expression={$_.romVersion};Label="System ROM";width=15},
			 @{Expression={($_.mpModel + " " + $_.mpFirmwareVersion)};Label="iLO Firmware Version";width=22},
			 @{Expression={

			 	if (-not($_.serverProfileUri))
				{ 
					
					'No Profile' 
				
				}

			 	else 
				{ 
				 
					(Send-HPOVRequest $_.serverProfileUri -Hostname $Enclosure.ApplianceConnection.Name).name 
				
				}

			 };Label="Server Profile";width=30},
			 @{Expression={$_.licensingIntent};Label="Licensing";width=15}
		
        $serversCol | Sort-Object name | format-table $a -AutoSize
		
	#INTERCONNECT BAY REPORT DATA
		#Loop through interconnect bays
		$interconnectsCol = New-Object System.Collections.ArrayList

		foreach ($interconnect in $enclosure.interconnectBays)
		{

			Write-Verbose "INTERCONNECT:  $($interconnect)"

            if ($interconnect.interconnectUri)
			{

                #Get the Interconnect object to read properties
			    $tempInterconnect = Send-HPOVRequest $interconnect.interconnectUri -Hostname $Enclosure.ApplianceConnection.Name

                #Get Logical Interconnect associated with the Interconnect to report its Name
				$li = Send-HPOVRequest $interconnect.logicalInterconnectUri -Hostname $Enclosure.ApplianceConnection.Name

				$tempInterconnect | Add-Member -type NoteProperty -name liName -value $li.name
                $tempInterconnect | out-string | Write-Verbose
				
				[void]$interconnectsCol.Add($tempInterconnect)

		    }

		}

        #Display Interconnect information (Name, Model, Serial Number, FW Ver)
		$a = @{Expression={$_.name};Label="Interconnect Name";width=22},
			 @{Expression={$_.model};Label="Module";width=38},
			 @{Expression={$_.serialNumber};Label="Serial Number";width=20},
			 @{Expression={$_.firmwareVersion};Label="Firmware Version";width=20}

        $interconnectsCol | format-Table $a -AutoSize

        #Display Interconnect information (PAD, Name, Logical Interconnect Name, State, Status)
        $b = @{Expression={'     '};Label="     ";width=5},
			 @{Expression={$_.name};Label="Interconnect Name";width=22},
			 @{Expression={$_.liName};Label="Logical Interconnect";width=30},
			 @{Expression={$_.state};Label="State";width=14},
			 @{Expression={$_.status};Label="Status";width=20},
			 @{Expression={ 
				 
				 $tempLI = Send-HPOVRequest $_.logicalInterconnectUri -Hostname $Enclosure.ApplianceConnection.Name
	             switch ($tempLI.consistencyStatus) 
				 {
 
					'CONSISTENT'     { "Consistent" }
					'NOT_CONSISTENT' { "Inconsistent with group" }
					default          { $tempLI.consistencyStatus }
			     
				 }
			 
			 };Label="Consistency state";width=26}

        $interconnectsCol | format-Table $b -AutoSize

		#Write-Host "=================================================================================================================="

	}

}

function Remove-HPOVEnclosure 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param
    (

        [parameter (Position = 0, Mandatory, ValueFromPipeline, ParameterSetName = "default", HelpMessage = "Enter the enclosure to remove.")]
        [ValidateNotNullOrEmpty()]
        [Alias("uri", "name", "Enclosure")]
        [object]$Resource,

		[parameter(Position = 1, ValueFromPipelineByPropertyName, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = $null,

        [parameter(Mandatory = $false)]
        [switch]$Force

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		#Support ApplianceConnection property value via pipeline from Enclosure Object
		if(-not($PSboundParameters['ApplianceConnection']))
		{

			ForEach ($_connection in $ApplianceConnection) 
			{

				Try {
			
					$ApplianceConnection[$c] = Test-HPOVAuth $_connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] {

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch {

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}

		}

		if (-not($PSBoundParameters['Enclosure'])) { $PipelineInput = $True }

		$_TaskCollection      = New-Object System.Collections.ArrayList
		$_EnclosureCollection = New-OBject System.Collections.ArrayList
        
	}

    Process 
	{

		if ($PipelineInput) 
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Object provided: $($Resource | FL * | Out-String)"

			If ($Resource.category -eq 'enclosures')
			{

				If (-not($Resource.ApplianceConnection))
				{

					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument $Resource.Name -TargetType PSObject -Message "The Network resource provided is missing the source ApplianceConnection property.  Please check the object provided and try again." #-verbose
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				[void]$_EnclosureCollection.Add($Resource)

			}

			else
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "$($Resource.Name)" -TargetType PSObject -Message "The Enclosure resource is not an expected category type [$($Resource.category)].  Allowed resource category type is 'enclosures'.  Please check the object provided and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

		}

		else 
		{

			foreach ($enclosure in $Resource) 
			{

				#Enclosure passed is a URI
				if (($enclosure -is [String]) -and [System.Uri]::IsWellFormedUriString($enclosure,'Relative')) 
				{

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received URI: $($enclosures)"

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Enclosure Object"

					# // NEED APPLIANCE NAME HERE with If Condition
					Try
					{

						$enclosure = Send-HPOVRequest $enclosure -ApplianceConnection $ApplianceConnection

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}
			    
				}

				#Enclosure passed is the Name
				elseif (($enclosure -is [string]) -and (-not($enclosure.startsWith("/rest")))) 
				{

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received Enclosure Name $($enclosure)"

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Enclosure object from Get-HPOVEnclosure"
				    
					# // NEED APPLIANCE NAME HERE with If Condition
					Try
					{

						$enclosure = Get-HPOVEnclosure $enclosure -ApplianceConnection $ApplianceConnection

					}
				    

				    Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}

				#Enclosure passed is an object
				elseif ($enclosure -is [PSCustomObject] -and ($enclosure.category -ieq 'enclosures')) 
				{
				    
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Object provided: $($enclosure | FL * | out-string)"
				
				}

				else 
				{

				    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Resource' -TargetType 'PSObject' -Message "Invalid Resource parameter: $($enclosure | FL * | Out-String)" #-verbose
				    $PSCmdlet.WriteError($errorRecord)

				}

				[void]$_EnclosureCollection.Add($enclosure)

			}

		}
        
    }

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($_EnclosureCollection.count) Enclosure resources to remove."

		#Process Enclosure Resources
		ForEach ($_enclosure in $_EnclosureCollection)
		{

			if ($pscmdlet.ShouldProcess($_enclosure.name,"Remove Enclosure from appliance '$($_enclosure.ApplianceConnection.Name)'?'")) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing Enclosure '$($_enclosure.name)' from appliance '$($_enclosure.ApplianceConnection.Name)'."

				Try
				{
					
					if ($PSBoundParameters['Force'])
					{

						$_enclosure.uri += "?force=true"

					}

					$_resp = Send-HPOVRequest $_enclosure.Uri DELETE -Hostname $_enclosure.ApplianceConnection.Name

					[void]$_TaskCollection.Add($_resp)

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			elseif ($PSBoundParameters['WhatIf'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf parameter was passed."

			}

		}

		Return $_TaskCollection

	}

}

function Get-HPOVServerHardwareType 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
	Param
	(

		[parameter(Position = 0, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[string]$Name = $null,

		[parameter(Position = 1, ValueFromPipelineByPropertyName, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

		[parameter (Position = 2, Mandatory = $false)]
        [Alias("x", "export")]
        [ValidateScript({split-path $_ | Test-Path})]
        [String]$exportFile

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
		
		$c = 0
		
		#Support ApplianceConnection property value via pipeline from Enclosure Object
		if(-not($PSboundParameters['ApplianceConnection']))
		{

			ForEach ($_connection in $ApplianceConnection) 
			{

				Try 
				{
			
					$ApplianceConnection[$c] = Test-HPOVAuth $_connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}

		}

		$_SHTCollection = New-OBject System.Collections.ArrayList
        
	}

    Process 
	{

		ForEach ($_connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance Connection $($_connection.Name)."

			if ($PSBoundParameters['Name'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Hardware Type name provided: '$Name'"

				$uri = $script:serverHardwareTypesUri + "?filter=name matches '$name'&sort=name:asc"

			}

			else
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for all Server Hardware Type resources."

				$uri = $script:serverHardwareTypesUri

			}

			Try
			{

				$_resp = Send-HPOVRequest $uri -hostname $_connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			if ($PSBoundParameters['Name'] -and $_resp.count -eq 0)
			{

				$errorRecord = New-ErrorRecord InvalidOperationException ServerHardwareTypeNotFound ObjectNotFound 'Name' -Message "'$name' Server Hardware Type not found. Please check the name and try again." #-verbose
				$pscmdlet.ThrowTerminatingError($errorRecord)

			}

			if ($_resp.count -gt 0)
			{

				$_resp.members | % { 
					
					$_.PSObject.TypeNames.Insert(0,'HPOneView.ServerHardwareType')

					[void]$_SHTCollection.Add($_)
				
				}

			}

		}

    }

    End 
	{

        if ($PSboundParameters['ExportFile']) 
		{

			
			$_SHTCollection | ConvertTo-JSON -Depth 99 > $ExportFile

        }

        else
		{

			Return $_SHTCollection

		}

    }

}

function Show-HPOVFirmwareReport {

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdletBinding()]
     
    Param (

        [parameter(Mandatory = $true, ValueFromPipeline = $false)]
        [validateSet("EG","Enclosure","Server","Interconnect")]
        [String]$Resource,
	
	    [parameter(Mandatory = $false, ValueFromPipeline = $false)]
        [String]$Name = $Null,
	
	    [parameter(Mandatory = $false, ValueFromPipeline = $True)]
        [Object]$Baseline,
            
		[parameter(Mandatory = $false)]
        [Switch]$Export,
            
		[parameter(Mandatory = $false)]
        [String]$Location = (get-location).Path

     )
	
    Begin { 
    
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Validating user is authenticated"

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError "Show-HPOVFirmwareReport" -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        
        #Test for location
        if ($Export) {
        
            if ( -not (Test-Path $Location)) {  

                $errorRecord = New-ErrorRecord InvalidOperationException LocationPathNotFound ObjectNotFound 'Show-HPOVFirmwareReport' -Message "The specified path $Location does not exist. Please verify it and try again." #-verbose
                $pscmdlet.ThrowTerminatingError($errorRecord)
            
            }
        }
    
    }

    Process {	

        
    
        switch ($Resource) {

            "eg" {

                if ($name) { [array]$egs = Get-HPOVEnclosureGroup $name }
                else { [array]$egs = Get-HPOVEnclosureGroup }

                #If no results were found, terminate.  Error reporting is handled by Get-HPOVEnclosureGroup
                if ($egs) {

                    $Collection = @()

                    #Keep track of the number of Enclosure Groups
                    $script:g = 0

                    #Keep track of the number of Enclosures
                    $script:e = 0

                    foreach ($eg in $egs) {

                        $script:g++

                        #Handle the call from -Verbose so Write-Progress does not get borked on display.
                        if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Collecting Enclosure Firmware Information - Skipping Write-Progress display."  }
                    
                        else { Write-Progress -Id 1 -activity "Collecting Enclosure Group Firmware Information" -CurrentOperation "Processing `'$($eg.name)`': $g of $($egs.count) Enclosure Groups" -percentComplete (($g / $egs.count) * 100) }

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Enclosure Group to Enclosure associations, then getting found Enclosure Resources."
                        [Array]$enclosures = (Send-HPOVRequest "/rest/index/associations?parentUri=$($eg.uri)&name=ENCLOSURE_GROUP_TO_ENCLOSURE").members  | % { Send-HPOVRequest $_.childUri }
                        
                        #Make sure the EG has associated Enclosures.
                        if ($enclosures) {

                            foreach ($enclosure in $enclosures) { 

                                $script:e++

                                #Handle the call from -Verbose so Write-Progress does not get borked on display.
                                if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Collecting Enclosure Firmware Information - Skipping Write-Progress display."  }
                    
                                else { Write-Progress -ParentId 1 -id 2 -activity "Collecting Enclosure Firmware Information" -CurrentOperation "Processing `'$($enclosure.name)`': $e of $($enclosures.count) Enclosure(s)" -percentComplete (($e / $enclosures.count) * 100) }

                                $temp = Get-EnclosureFirmware $Enclosure $Baseline 1
                                $temp | add-member -Type NoteProperty -Name eg -value $eg.name
                                $Collection += $temp

                            } #End Enclosures

                        } #End Enclosure to EG check
                        
                        #Clear Child Write-Progress progress bars

                        #Handle the call from -Verbose so Write-Progress does not get borked on display.
                        if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Completed Collecting Enclosure Firmware Information - Skipping Write-Progress display."  }
             
                        else { Write-Progress -ParentId 1 -id 2 -activity "Collecting Enclosure Firmware Information" -CurrentOperation "Completed" -Completed }

                    } #End EG
                    
                    #Handle the call from -Verbose so Write-Progress does not get borked on display.
                    if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Completed Collecting Enclosure Group Firmware Information Skipping Write-Progress display."  }
             
                    else { Write-Progress -Id 1 -activity "Collecting Enclosure Group Firmware Information" -CurrentOperation "Completed" -Completed }

                }

            } #end eg switch

            "enclosure" {

	            if ($name) { [array]$enclosures = Get-HPOVEnclosure $name }
		
	            else { [array]$enclosures = Get-HPOVEnclosure}
		    
                $Collection = @()

                #Keep track of the number of enclosures
                $script:e = 0

                foreach ($enclosure in $enclosures) {

                    $script:e++

                    #Handle the call from -Verbose so Write-Progress does not get borked on display.
                    if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Collecting Enclosure Firmware Information - Skipping Write-Progress display."  }
                    
                    else { Write-Progress -Id 1 -activity "Collecting Enclosure Firmware Information" -CurrentOperation "Processing `'$($enclosure.name)`': $e of $($enclosures.count) Enclosure(s)" -percentComplete (($e / $enclosures.count) * 100) }

                    $Collection += Get-EnclosureFirmware $Enclosure $Baseline

                } #End Enclosures Collection

                #Handle the call from -Verbose so Write-Progress does not get borked on display.
                if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Completed Collecting Enclosure Firmware Information - Skipping Write-Progress display."  }
                
                else { Write-Progress -id 1 -activity "Collecting Enclosure Firmware Information" -CurrentOperation "Completed" -Completed }

            } #End Enclosure switch

            "server" { 

                $Collection = @()
            
                #Keep track of the number of Servers
                $script:s = 0

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Servers"
                
                if ($name) { [Array]$servers = Get-HPOVServer $Name }
                else { [Array]$servers = Get-HPOVServer }

                foreach ($server in $servers) {

                    $script:s++
                    
                    #Handle the call from -Verbose so Write-Progress does not get borked on display.
                    if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Collecting Server Firmware Information - Skipping Write-Progress display."  }
                     
                    else { Write-Progress -id 1 -activity "Collecting Server Firmware Information" -CurrentOperation "Processing `'$($server.name)`': $s of $($servers.Count) Server(s)" -percentComplete (($s / $servers.Count) * 100) }

                    $Collection += Get-ServerFirmware -server $server -baseline $baseline

                } #End Server Collection
                
                #Handle the call from -Verbose so Write-Progress does not get borked on display.
                if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Completed Collecting Server Firmware Information - Skipping Write-Progress display."  }
             
                else { Write-Progress -id 1 -activity "Collecting Server Firmware Information" -CurrentOperation "Completed" -Completed }
            
            } #End Server switch

            "interconnect" { 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Interconnects"

                if ($name) { [Array]$interconnects = Get-HPOVInterconnect -name $Name }
                else { [Array]$interconnects = Get-HPOVInterconnect }

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found $($interconnects.Count) Interconnects"

                $Collection = @()

                $script:i = 0
            
                #Get Interconnect Information
		        foreach ($interconnect in $interconnects) {

                    $script:i++

                    #Handle the call from -Verbose so Write-Progress does not get borked on display.
                    if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Collecting Interconnect Firmware Information - Skipping Write-Progress display."  }
             
                    else { Write-Progress -id 1 -activity "Collecting Interconnect Firmware Information" -CurrentOperation "Processing `'$($interconnect.name)`': $i of $($interconnects.Count) Interconnects" -percentComplete (($i / $interconnects.Count) * 100) }

                    $Collection += Get-InterconnectFirmware $interconnect $Baseline

                } #End Interconnects Collection
            
                #Handle the call from -Verbose so Write-Progress does not get borked on display.
                if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Completed Collecting Interconnect Firmware Information - Skipping Write-Progress display."  }
             
                else { Write-Progress -id 1 -activity "Collecting Interconnect Firmware Information" -CurrentOperation "Completed" -Completed }
            
            } #End Interconnect switch

        }

    }

    End {

        Write-Progress -Activity "Firmware collection report complete." -PercentComplete (100) -Status "Finished." -Completed

        #Generate alternate report for Enclosure Groups
        switch ($Resource) {
        
            "interconnect" {

                #Export to CSV
                if ($Export) { $collection | select-object EG, Name,Device,Component,Installed,Baseline,BaselinePolicy,Compliance | Export-Csv -Path $Location\interconnect_report_$(get-Date -uformat "%Y.%m.%d").csv -Encoding UTF8 -NoTypeInformation }

                #Display Report
                else {
                
                    $Table = @{Expression={$_.name};Label="Name"},
                             @{Expression={$_.device};Label="Device";width=16},
                             @{Expression={$_.installed};Label="Installed"},
                             @{Expression={$_.Baseline};Label="Baseline"},
                             @{Expression={$_.BaselinePolicy};Label="Baseline Policy"},
                             @{Expression={$_.Compliance};Label="Compliance"}

                     $collection | Sort-Object name | format-table $Table -Wrap

                }

                "Done: {0} interconnect(s) processed." -f $i

            }

            "server" {

                #Export to CSV
                if ($Export) { $collection | select-object Name,Device,Component,Installed,Baseline,BaselinePolicy,Compliance | Export-Csv -Path $Location\server_report_$(get-Date -uformat "%Y.%m.%d").csv -Encoding UTF8 -NoTypeInformation }

                #Display Report
                else {
                
                    $Table = @{Expression={$_.name};Label="Name"},
                             @{Expression={$_.device};Label="Device"},
                             @{Expression={$_.Component};Label="Component";width=10},
                             @{Expression={$_.installed};Label="Installed"; width=14},
                             @{Expression={$_.Baseline};Label="Baseline"; width=14},
                             @{Expression={$_.BaselinePolicy};Label="Baseline Policy"},
                             @{Expression={$_.Compliance};Label="Compliance"}

                     $collection | Sort-Object name | format-table $Table -Wrap

                }

                "Done: {0} server(s) processed." -f $s

            }

            "enclosure" {


                #Export to CSV
                if ($Export) { $collection | select-object Name,Device,Component,Installed,Baseline,BaselinePolicy,Compliance | Export-Csv -Path $Location\enclosure_report_$(get-Date -uformat "%Y.%m.%d").csv -Encoding UTF8 -NoTypeInformation }

                #Display Report
                else {
                
                    $Table = @{Expression={$_.name};Label="Name"},
                             @{Expression={$_.device};Label="Device";width=16},
                             @{Expression={$_.Component};Label="Component"},
                             @{Expression={$_.installed};Label="Installed"},
                             @{Expression={$_.Baseline};Label="Baseline"},
                             @{Expression={$_.BaselinePolicy};Label="Baseline Policy"},
                             @{Expression={$_.Compliance};Label="Compliance"}

                     $collection | Sort-Object name | format-table $Table -Wrap

                }

                write-host ""
                "Done: {0} enclosure(s), {1} server(s), {2} interconnect(s) processed." -f $e, $s, $i

            }
            
            "eg" {

                #Export to CSV
                if ($Export) { $collection | select-object Name,Device,Component,Installed,Baseline,BaselinePolicy,Compliance | Export-Csv -Path $Location\eg_report_$(get-Date -uformat "%Y.%m.%d").csv -Encoding UTF8 -NoTypeInformation }

                #Display Report
                else {
                
                    $Table = @{Expression={$_.eg};Label="EG"},
                             @{Expression={$_.name};Label="Name"},
                             @{Expression={$_.device};Label="Device";width=16},
                             @{Expression={$_.Component};Label="Component"},
                             @{Expression={$_.installed};Label="Installed"},
                             @{Expression={$_.Baseline};Label="Baseline"},
                             @{Expression={$_.BaselinePolicy};Label="Baseline Policy"},
                             @{Expression={$_.Compliance};Label="Compliance"}

                     $collection | Sort-Object name | format-table $Table -Wrap

                }

                "Done: {0} enclosure group(s), {1} enclosure(s), {2} server(s), {3} interconnect(s) processed." -f $g, $e, $s, $i

            }

        }

    }

}

function Get-EnclosureFirmware {

    <#
        Internal-only function.
    #>

    [CmdletBinding()]
    Param (
    
        [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = "Default", HelpMessage = "Enclosure resource object")]
        [PsCustomObject]$EnclosureObject = $Null, 

        [parameter(Position = 1, Mandatory = $false, ParameterSetName = "Default", HelpMessage = "SPP Baseline resource object, Name or URI")]
        [object]$Baseline = $Null,

        [parameter(Position = 2, Mandatory = $false, ParameterSetName = "Default", HelpMessage = "Specify the level of the Write-Progress ID")]
        [int]$ProgressID = 0
        
    )


    Begin {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

        #Reset private variables
        $BaseLinePolicy = $Null
        $enclosureReport = @()

        #Keep track of the number of Servers
        $script:s = 0

        #Keep track of the number of Interconnects
        $script:i = 0
		
        #Keep track of the number of OAs
        $o = 0

        #See if EnclosureObject was passed via Pipeline
        if (-not $PSBoundParameters['EnclosureObject']) { $PipelineInput = $True }

    }

    Process {
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Object passed via pipeline: $($PipelineInput)"
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Enclosure firmware report for: '$($enclosureObject.name)'"

        #Use the Enclosure FwBaseline if it is set
        if (($EnclosureObject.isFwManaged) -and ($Baseline -eq $Null)) { 

            $BaseLinePolicy = Send-HPOVRequest $EnclosureObject.fwBaselineUri
        
        }

        elseif (($Baseline) -and ($Baseline -is [PsCustomObject]) -and ($Baseline.category -eq "firmware-drivers")) { 
        
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline resource passed."
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline resource name: $($Baseline.baselineShortName)"
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline resource uri: $($Baseline.uri)"
            $BaseLinePolicy = $Baseline
            
        }
        
        #Check to see if the wrong Object has been passed
        elseif (($Baseline) -and ($Baseline -is [PsCustomObject]) -and ($Baseline.category -ne "firmware-drivers")) { 
        
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid Baseline resource passed. Generating error."
            $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentType InvalidArgument 'GET-ENCLOSUREFIRMWARE' -Message "The wrong Baseline Object was passed.  Expected Category type `'firmware-drivers`', received `'$($Baseline.category)`' (Object Name: $($Baseline.name)" #-verbose
            $PsCmdLet.ThrowTerminatingError($errorRecord)
            
        }
        
        elseif (($Baseline) -and ($Baseline -is [string]) -and ($Baseline.StartsWith(($script:fwDriversUri)))) { 
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline URI passed: $Baseline"
            $BaseLinePolicy = Send-HPOVRequest $Baseline 
        
        }
        
        #Check to see if the wrong URI has been passed
        elseif (($Baseline) -and ($Baseline -is [string]) -and $Baseline.StartsWith("/rest/") -and ( ! $Baseline.StartsWith(("/rest/firmware-drivers/")))) { 
        
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid Baseline URI passed. Generating error."
            $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentType InvalidArgument 'GET-ENCLOSUREFIRMWARE' -Message "The wrong Baseline URI was passed.  URI must start with '/rest/firmware-drivers/', received '$($Baseline)'" #-verbose
            $PsCmdLet.ThrowTerminatingError($errorRecord)        
            
        }
        
        elseif (($Baseline) -and ($Baseline -is [string])) { 
        
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline Name passed: $Baseline"
            $BaseLinePolicy = Get-HPOVSppFile -name $Baseline 
            
        }
        
        else { 
        
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Baseline provided."
            $BaseLinePolicy = [PsCustomObject]@{ baselineShortName = "No Policy Set" } 
        
        }

        #Get OA Firmware Information
		foreach ($oa in $EnclosureObject.oa) {

            #Handle the call from -Verbose so Write-Progress does not get borked on display.
            if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Collecting Onboard Administrator Firmware Information - Skipping Write-Progress display."  }
            
            else { Write-Progress -id (2 + $ProgressID) -ParentId 1 -activity "Collecting Onboard Administrator Firmware Information" -CurrentOperation "Processing `'$($oa.role)`': $o of $($enclosure.oa.count) OAs" -percentComplete (($o / $EnclosureObject.oa.count) * 100) }

            #If OA is absent report it as such
            if ($oa.role -eq "OaAbsent") { $enclosureReport += [pscustomobject]@{ Name = $EnclosureObject.name; Device = ($Enclosure.enclosureType.substring(0,($enclosure.enclosureType.length - 3))); Component = "OA Bay $($oa.bayNumber) Absent"; Installed = "N/A"; Baseline = "N/A" ; BaselinePolicy = "N/A"; Compliance = "N/A" } }
		    
            else {
                if ($BaseLinePolicy.baselineShortName -eq "No Policy Set") { $BaselineVer = "N/A" }

                else { $BaselineVer = ($BaseLinePolicy.fwComponents | where { $_.swKeyNameList -match "oa" }).componentVersion }

                if ($BaselineVer -eq "N/A") { $Compliance = "N/A" }
                elseif (($oa.fwVersion -lt $BaselineVer) -or ($oa.fwVersion -lt $BaselineVer)) { $Compliance = "Not Compliant" } 
                else { $Compliance = "Compliant" }

		        $enclosureReport += [pscustomobject]@{ Name = $EnclosureObject.name; Device = ($Enclosure.enclosureType.substring(0,($enclosure.enclosureType.length - 3))); Component = "OA Bay $($oa.bayNumber) $($oa.role)"; Installed = $oa.fwVersion; Baseline = $BaselineVer ; BaselinePolicy = $BaseLinePolicy.baselineShortName; Compliance = $Compliance }
            }
		          
            $o++
		
		} #End OA's

        #Get Server Resource Objects
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Server resources from the enclosure."
        $servers = ($EnclosureObject.deviceBays | where { $_.devicePresence -eq "present" } | % { Send-HPOVRequest $_.deviceUri })

        foreach ($server in $servers) {

            $script:s++

            #Handle the call from -Verbose so Write-Progress does not get borked on display.
            if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Collecting Server Firmware Information - Skipping Write-Progress display."  }
             
            else { Write-Progress -id (3 + $ProgressID) -ParentId 1 -activity "Collecting Server Firmware Information" -CurrentOperation "Processing `'$($server.name)`': $s of $($servers.Count) Server(s)" -percentComplete (($s / $servers.Count) * 100) }

            $enclosureReport += Get-ServerFirmware $server $Baseline

        } #end Servers Collection

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Interconnect resources from the enclosure."
        $interconnects = ($enclosure.interconnectBays | where { $_.interconnectUri -ne $Null } | % { Send-HPOVRequest $_.interconnectUri })

        #Get Interconnect Information
		foreach ($interconnect in $interconnects) {

            $script:i++

            #Handle the call from -Verbose so Write-Progress does not get borked on display.
            if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Collecting Interconnect Firmware Information - Skipping Write-Progress display."  }
             
            else { Write-Progress -id (4 + $ProgressID) -ParentId 1 -activity "Collecting Interconnect Firmware Information" -CurrentOperation "Processing `'$($interconnect.name)`': $i of $($interconnectS.Count) Interconnects" -percentComplete (($i / $interconnectS.Count) * 100) }

            $enclosureReport += Get-InterconnectFirmware $interconnect $Baseline

        } #End Interconnects Collection

        #Handle the call from -Verbose so Write-Progress does not get borked on display.
        if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Completed Collecting OA/Server/Interconnect Firmware Information - Skipping Write-Progress display."  }
         
        else { 
        
            Write-Progress -ParentId 1 -id (2 + $ProgressID) -activity "Collecting Onboard Administrator Firmware Information" -CurrentOperation "Completed" -Completed                    
            Write-Progress -ParentId 1 -id (3 + $ProgressID) -activity "Collecting Server Firmware Information" -CurrentOperation "Completed" -Completed
            Write-Progress -ParentId 1 -id (4 + $ProgressID) -activity "Collecting Interconnect Firmware Information" -CurrentOperation "Completed" -Completed

        }

    }


    end {

        Return $enclosureReport

    }

}

function Get-ServerFirmware {

    <#
        Internal-only function.
    #>

    [CmdletBinding()]
    Param (
    
        [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = "Default", HelpMessage = "Server resource object")]
        [PsCustomObject]$serverObject, 

        [parameter(Position = 1, Mandatory = $false, ParameterSetName = "Default", HelpMessage = "SPP Baseline resource object, Name or URI")]
        [object]$Baseline = $Null
        
    )


    Begin {

        #See if serverObject was passed via Pipeline
        if (-not $PSBoundParameters['serverObject']) { $PipelineInput = $True }
        
        $serverReport = @()

    }

    Process {
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Object passed via pipeline: $($PipelineInput)"
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Server firmware report for: '$($server.name)'"
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Server Hardware Type"
        #Check if the server hardware type allows firmware management
        $sht = Send-HPOVRequest $server.serverHardwareTypeUri

        if ($sht.capabilities -match "FirmwareUpdate") {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Hardware Type supports firmware management."

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline value provided: '$Baseline'"
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($Baseline | out-string)'"

            #If a bladeserver and that the caller hasn't specified a Baseline, Use the Enclosure FwBaseline if it is set
            if (-not $Baseline) { 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Baseline provided.  Checking Server Profile."

                #Check to see if there is a profile
                if ($server.serverProfileUri) {
                            
                    $profile = Send-HPOVRequest $server.serverProfileUri

                    #Then check if a Baseline is attached there
                    if ($profile.firmware.manageFirmware) { 
                    
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Profile has baseline attached. Getting baseline details."
                        $BaselinePolicy = Send-HPOVRequest $profile.firmware.firmwareBaselineUri 
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Profile Baseline name: $($BaselinePolicy.name)"
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Profile Baseline name: $($BaselinePolicy.uri)"
                    }
                    
                    #If firmware is not managed by the profile, check if the server is a BL and if Enclosure has a baseline assigned.
                    elseif ($server.locationUri) {
                    
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Profile does not have a baseline attached. Checking Enclosure."
                        $Enclosure = Send-HPOVRequest $server.locationUri

                        #Use the Enclosure FwBaseline if it is set
                        if ($enclosure.isFwManaged) { 
                        
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure has baseline attached. Getting baseline details."                
                            $BaseLinePolicy = Send-HPOVRequest $enclosure.fwBaselineUri
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Baseline name: $($BaselinePolicy.name)"
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Baseline name: $($BaselinePolicy.uri)"
                                
                        }

                        else {
                        
                            write-verbose "[GETSERVERFIRMWARE] Enclosure does not have a baseline policy set."
                            $BaseLinePolicy = [PsCustomObject]@{ baselineShortName = "No Policy Set" } 

                        }

                    }
                                    
                    #If not, set $BaselinePolicy to No Policy Set
                    else { 
                    
                        if (-not $server.locationUri) { write-verbose "[GETSERVERFIRMWARE] Server is not a BL, so no Enclosure to check." }
                        write-verbose "[GETSERVERFIRMWARE] Server Profile does not have a baseline attached."
                        $BaseLinePolicy = [PsCustomObject]@{ baselineShortName = "No Policy Set" } 
                        
                    }

                }

                else {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Server Profile assigned."

                    if ($server.locationUri) {
                    
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Checking Enclosure for policy."
                        $Enclosure = Send-HPOVRequest $server.locationUri

                        #Use the Enclosure FwBaseline if it is set
                        if ($enclosure.isFwManaged) { 

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure has baseline attached. Getting baseline details."                
                            $BaseLinePolicy = Send-HPOVRequest $enclosure.fwBaselineUri
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Baseline name: $($BaselinePolicy.name)"
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Baseline name: $($BaselinePolicy.uri)"
                                
                        }

                        else {
                        
                            write-verbose "[GETSERVERFIRMWARE] Enclosure does not have a baseline policy set."
                            $BaseLinePolicy = [PsCustomObject]@{ baselineShortName = "No Policy Set" } 

                        }

                    }

                    #If not, set $BaselinePolicy to No Policy Set
                    else { 
                    
                        if (-not $server.locationUri) { write-verbose "[GETSERVERFIRMWARE] Server is not a BL, so no Enclosure to check." }
                        write-verbose "[GETSERVERFIRMWARE] Server Profile does not have a baseline attached."
                        $BaseLinePolicy = [PsCustomObject]@{ baselineShortName = "No Policy Set" } 
                        
                    }

                }
                   
            }

            elseif (($Baseline) -and ($Baseline -is [PsCustomObject]) -and ($Baseline.category -eq "firmware-drivers")) { 
            
                write-verbose "[GETSERVERFIRMWARE] Baseline resource passed."
                write-verbose "[GETSERVERFIRMWARE] Baseline resource name: $($Baseline.baselineShortName)"
                write-verbose "[GETSERVERFIRMWARE] Baseline resource uri: $($Baseline.uri)"
                $BaseLinePolicy = $Baseline
                
            }

            #Check to see if the wrong Object has been passed
            elseif (($Baseline) -and ($Baseline -is [PsCustomObject]) -and ($Baseline.category -ne "firmware-drivers")) { 
            
                write-verbose "[GETSERVERFIRMWARE] Invalid Baseline resource passed. Generating error."
                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentType InvalidArgument 'getserverfirmware' -Message "The wrong Baseline Object was passed.  Expected Category type `'firmware-drivers`', received `'$($Baseline.category)`' (Object Name: $($Baseline.name)" #-verbose
                $PsCmdLet.ThrowTerminatingError($errorRecord)
                
            }

            elseif (($Baseline) -and ($Baseline -is [string]) -and ($Baseline.StartsWith(($script:fwDriversUri)))) { 
                
                write-verbose "[GETSERVERFIRMWARE] Baseline URI passed: $Baseline"
                $BaseLinePolicy = Send-HPOVRequest $Baseline 
            
            }

            #Check to see if the wrong URI has been passed
            elseif (($Baseline) -and ($Baseline -is [string]) -and $Baseline.StartsWith("/rest/") -and ( ! $Baseline.StartsWith(("/rest/firmware-drivers/")))) { 

                write-verbose "[GETSERVERFIRMWARE] Invalid Baseline URI passed. Generating error."
                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentType InvalidArgument 'getserverfirmware' -Message "The wrong Baseline URI was passed.  URI must start with '/rest/firmware-drivers/', received '$($Baseline)'" #-verbose
                $PsCmdLet.ThrowTerminatingError($errorRecord)        
                
            }

            elseif (($Baseline) -and ($Baseline -is [string])) { 
            
                write-verbose "[GETSERVERFIRMWARE] Baseline Name passed: $Baseline"
                $BaseLinePolicy = Get-HPOVSppFile -name $Baseline 
                
            }

            else { 
            
                write-verbose "[GETSERVERFIRMWARE] No Baseline provided."
                $BaseLinePolicy = [PsCustomObject]@{ baselineShortName = "No Policy Set" } 
            
            }

            write-verbose "[GETSERVERFIRMWARE] Processing Server ROM Information."

            #Saving SystemROM Information
            $serverRomVersion = ($server.romVersion -replace "/",".").SubString(4)

            #Check Baseline Policy and set Compliance statement
            if ($BaseLinePolicy.baselineShortName -eq "No Policy Set") { 
                            
                $BaselineVer = "N/A" 
                $Compliance = "N/A"
                                    
            }

            else { 
                            
                $BaselineVer = ($BaseLinePolicy.fwComponents | where { $_.swKeyNameList -match $server.romVersion.SubString(0,3) }).componentVersion
                write-verbose "Found Baseline version: $($BaselineVer | out-string)"
                if ($BaselineVer -is [Array]) { $BaselineVer = get-Date -format MM.dd.yyyy $BaselineVer[0] }
                else { $BaselineVer = get-Date -format MM.dd.yyyy $BaselineVer }

                if ($BaselineVer -eq "N/A") { $Compliance = "N/A" }
                elseif (($serverRomVersion -gt $BaseLineVer) -or ($serverRomVersion -lt $BaseLineVer)) { $Compliance = "Not Compliant" } 
                else { $Compliance = "Compliant" } 
            }

            $serverReport += [pscustomobject]@{ Name = $server.name; Device = $server.shortModel; Component = "ROM"; Installed = $serverRomVersion; Baseline = $BaselineVer ; BaselinePolicy = $BaseLinePolicy.baselineShortName; Compliance = $Compliance }

            write-verbose "[GETSERVERFIRMWARE] Processing Server iLO Information."

            #Saving iLO Information
            $mpFirmwareVersion = $server.mpFirmwareVersion.SubString(0,4)

            #Check Baseline Policy and set Compliance statement
            if ($BaseLinePolicy.baselineShortName -eq "No Policy Set") {
                            
                $BaselineVer = "N/A" 
                $Compliance = "N/A"
                                    
            }

            else { 
                            
                $BaselineVer = ($BaseLinePolicy.fwComponents | where { $_.swKeyNameList -match $script:mpModelTable.($server.mpModel) }).componentVersion

                if ($BaselineVer -is [Array]) { $BaselineVer = $BaselineVer[0] }

                #Check iLO Version Compliance
                if ($BaselineVer -eq "N/A") { $Compliance = "N/A" }
                elseif (($mpFirmwareVersion -gt $BaseLineVer) -or ($mpFirmwareVersion -lt $BaseLineVer)) { $Compliance = "Not Compliant" } 
                else { $Compliance = "Compliant" } 
                                
            }

            $serverReport += [pscustomobject]@{ Name = $server.name; Device = $server.shortModel; Component = "iLO"; Installed = $mpFirmwareVersion; Baseline = $BaselineVer ; BaselinePolicy = $BaseLinePolicy.baselineShortName; Compliance = $Compliance  }

        }

        #Server firmware is unmanageable based on its Server Hardware Type
        else { 
            
            write-verbose "[GETSERVERFIRMWARE] Server Hardware Type does not support firmware management."      
            $serverReport += [pscustomobject]@{ Name = $server.name; Device = $server.shortModel; Component = "N/A"; Installed = "N/A"; Baseline = "N/A" ; BaselinePolicy = "Unmanageable" }

        }

    }


    end {

        Return $serverReport

    }

}

function Get-InterconnectFirmware {

    <#
        Internal-only function.
    #>

    [CmdletBinding()]
    Param (
    
        [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = "Default", HelpMessage = "Interconnect resource object")]
        [PsCustomObject]$interconnectObject, 

        [parameter(Position = 1, Mandatory = $false, ParameterSetName = "Default", HelpMessage = "SPP Baseline resource object, Name or URI")]
        [object]$Baseline = $Null
        
    )


    Begin {

        $interconnectReport = @()

    }

    Process {
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Interconnect firmware report for: '$($InterconnectObject.name)'"
        
        if (-not $Baseline) {
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline was not provided, checking Enclosure Firmware Baseline set."
            $enclosure = send-hpovrequest $interconnect.enclosureUri

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Firmware Baseline set: $($enclosure.isFwManaged )"

            #Check if the Enclosure has a Firmware Baseline attached
            if ($enclosure.isFwManaged -and $enclosure.fwBaselineUri){ 
    
                $baseline = Get-HPOVSppFile $enclosure.fwBaselineUri
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Firmware Baseline name: $($baseline.name )"
            }

            else { 
            
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Baseline provided."
                $BaseLinePolicy = [PsCustomObject]@{ baselineShortName = "No Policy Set" } 
            
            }
        }

        else {
            
            if (($Baseline) -and ($Baseline -is [PsCustomObject]) -and ($Baseline.category -eq "firmware-drivers")) { 
            
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline resource passed."
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline resource name: $($Baseline.baselineShortName)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline resource uri: $($Baseline.uri)"
                $BaseLinePolicy = $Baseline
                
            }

            #Check to see if the wrong Object has been passed
            elseif (($Baseline) -and ($Baseline -is [PsCustomObject]) -and ($Baseline.category -ne "firmware-drivers")) { 
            
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid Baseline resource passed. Generating error."
                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentType InvalidArgument 'Get-InterconnectFirmware' -Message "The wrong Baseline Object was passed.  Expected Category type `'firmware-drivers`', received `'$($Baseline.category)`' (Object Name: $($Baseline.name)" #-verbose
                $PsCmdLet.ThrowTerminatingError($errorRecord)
                
            }

            elseif (($Baseline) -and ($Baseline -is [string]) -and ($Baseline.StartsWith(($script:fwDriversUri)))) { 
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline URI passed: $Baseline"
                $BaseLinePolicy = Send-HPOVRequest $Baseline 
            
            }

            #Check to see if the wrong URI has been passed
            elseif (($Baseline) -and ($Baseline -is [string]) -and $Baseline.StartsWith("/rest/") -and ( ! $Baseline.StartsWith(("/rest/firmware-drivers/")))) { 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid Baseline URI passed. Generating error."
                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentType InvalidArgument 'Get-InterconnectFirmware' -Message "The wrong Baseline URI was passed.  URI must start with '/rest/firmware-drivers/', received '$($Baseline)'" #-verbose
                $PsCmdLet.ThrowTerminatingError($errorRecord)        
                
            }

            elseif (($Baseline) -and ($Baseline -is [string])) { 
            
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Baseline Name passed: $Baseline"
                $BaseLinePolicy = Get-HPOVSppFile -name $Baseline 
                
            }

            else { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Unknown baseline." }

        }

        if ($BaseLinePolicy.baselineShortName -eq "No Policy Set") { 
        
            $BaselineVer = "N/A"
            $Compliance = "N/A"

        }
        else { 
        
            $BaselineVer = ($BaseLinePolicy.fwComponents | where { $_.swKeyNameList -match "vceth" }).componentVersion

            if (($InterconnectObject.firmwareVersion -lt $BaselineVer) -or ($InterconnectObject.firmwareVersion -lt $BaselineVer)) { $Compliance = "Not Compliant" } 
            else { $Compliance = "Compliant" }

        }
        
        $interconnectReport = [pscustomobject]@{ Name = $InterconnectObject.name; Device = $InterconnectObject.model; Component = (Get-Culture).TextInfo.ToTitleCase($InterconnectObject.type) ; Installed = $InterconnectObject.firmwareVersion; Baseline = $BaselineVer ; BaselinePolicy = $BaseLinePolicy.baselineShortName; Compliance = $Compliance }
    }

    end {

        Return $interconnectReport

    }

}

#######################################################
# Storage Systems and Volume Management:
#

function Get-HPOVStorageSystem 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Name")]
    Param 
	(

        [parameter(Mandatory = $false, HelpMessage = "Enter the Storage System name.", ParameterSetName = "Name", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias('Name')]
        [string]$SystemName,

        [parameter(Mandatory = $false, HelpMessage = "Enter the Storage System serial number.", ParameterSetName = "Serial",Position=0)]
        [ValidateNotNullOrEmpty()]
        [Alias('SN')]
        [string]$SerialNumber,

		[parameter(Position = 1, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

        [parameter(Mandatory = $false, HelpMessage = "Display output in Table List format.", ParameterSetName = "Name")]
        [parameter(Mandatory = $false, HelpMessage = "Display output in Table List format.", ParameterSetName = "Serial")]
        [Alias('Report')]
        [switch]$List

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		if  ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		$c = 0
		
		ForEach ($_connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_StorageSystemCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			$uri = $script:storageSystemUri

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($Appliance.Count))"

			if ($SystemName)
			{ 

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filtering for systemName property"
				
				$SystemName = $SystemName -replace ("[*]","%25") -replace ("[&]","%26") 

				$uri += "?filter=name matches $SystemName'"
						
			}

			elseif ($SerialNumber) 
			{ 

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filtering for serialNumber property"
			    
				$uri += "?filter=serialNumber='$SerialNumber'"
			    
			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of Storage Systems"

			Try
			{

				$_StorageSystems = Send-HPOVRequest $uri -Hostname $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			#Generate Terminating Error if resource not found
			if (-not $_StorageSystems.members.Count -gt 0 -and ($SystemName -or $SerialNumber)) 
			{
			    
			    if ($SystemName) 
				{ 
			        
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! No '$SystemName' Storage System found."
			            
			        $errorRecord = New-ErrorRecord HPOneView.StorageSystemResourceException StorageSystemResourceNotFound ObjectNotFound 'SystemName' -Message "No Storage System with '$SystemName' system name found.  Please check the name or use Add-HPOVSanManager to add the Storage System." #-verbose

			    }

			    elseif ($SerialNumber) 
				{ 
			        
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! No Storage System with '$SerialNumber' serial number found."
			            
			        $errorRecord = New-ErrorRecord HPOneView.StorageSystemResourceException StorageSystemResourceNotFound ObjectNotFound 'SerialNumber' -Message "No Storage System with '$SerialNumber' serial number found.  Please check the serial number or use Add-HPOVSanManager to add the Storage System." #-verbose

			    }
                    
			    #Generate Terminating Error
			    $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			$_StorageSystems.members | % {

				$_.PSObject.TypeNames.Insert(0,'HPOneView.Storage.System')

				[void]$StorageSystemCollection.Add($_)

			}		

		}
		 
    }

    end 
	{

		Write-Verbose "Done. $($_StorageSystems.count) storage system(s) found."

        if ($List) 
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Generating List display"

            foreach ($_system in $_StorageSystems.members) 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_system.name)' Storage System."
                
                #Storage System Details
                $a = @{Expression={$_.status};Label="Status"},
                     @{Expression={$_.name};Label="Name"},
                     @{Expression={$_.serialNumber};Label="Serial Number"},
                     @{Expression={$_.model};Label="Model"},
                     @{Expression={$_.managedDomain};Label="Storage Domain"},
                     @{Expression={$_.wwn};Label="WWN"},
                     @{Expression={$_.firmware};Label="Firmware"}

                #Storage System Credentials and Address
                $b = @{Expression={"   "};Label="[Credentials]"},
                     @{Expression={$_.credentials.username};Label="Username"},
                     @{Expression={$_.credentials.ip_hostname};Label="Address"}				
 
                #Capacity Details
                $c = @{Expression={"   "};Label="[Capacity]"},
                     @{Expression={$_.status};Label="Status"},
                     @{Expression={'{0:N2}TB' -f ($_.totalCapacity / 1TB)};Label="Total   "},
                     @{Expression={'{0:N2}TB' -f ($_.allocatedCapacity / 1TB)};Label="Allocated  "},
                     @{Expression={'{0:N2}TB' -f ($_.freeCapacity / 1TB)};Label="Free   "}
                
                #Managed Storage Pools
                $d = @{Expression={"   "};Label="[Managed Storage Pools]"},
                     @{Expression={$_.status};Label="Status"},
                     @{Expression={$_.name};Label="Name   "},
                     @{Expression={$_.deviceType};Label="Drive Type"},
                     @{Expression={$_.supportedRAIDLevel};Label="RAID"},
                     @{Expression={'{0:N2}TB' -f ($_.totalCapacity / 1GB)};Label="Total   "},
                     @{Expression={'{0:N2}TB' -f ($_.allocatedCapacity / 1GB)};Label="Allocated  "},
                     @{Expression={'{0:N2}TB' -f ($_.freeCapacity / 1GB)};Label="Free   "},
                     @{Expression={ (Send-HPOVRequest ($script:indexUri + "?category=storage-volumes&query=storage_volume_storagepool_uri:'$($_.uri)'") -Hostname $_system.ApplianceConnection.Name).count};Label="Volumes"}

                #Unmanaged Pools
                $e = @{Expression={"   "};Label="[Unmanaged Storage Pools]"},
                     @{Expression={$_.name};Label="Name   "},
                     @{Expression={$_.deviceType};Label="Drive Type"},
                     @{Expression={$_.supportedRAIDLevel};Label="RAID"},
                     @{Expression={'{0:N2}GB' -f ($_.totalCapacity / 1GB)};Label="Total   "},
                     @{Expression={'{0:N2}GB' -f ($_.allocatedCapacity / 1GB)};Label="Allocated  "},
                     @{Expression={'{0:N2}GB' -f ($_.freeCapacity / 1GB)};Label="Free   "}

                $unmanagedPools = $system.unmanagedPools | ? { $_.domain -eq $system.managedDomain }

                

                #Configured Host Ports
                $f = @{Expression={"   "};Label="[Host Ports]"},
                     @{Expression={$_.status};Label="Status"},
                     @{Expression={$_.portName};Label="Port"},
                     @{Expression={$_.portWwn};Label="WWPN"},
                     @{Expression={
                         $net = send-hpovrequest $_.expectedNetworkUri -Hostname $_system.ApplianceConnection.Name
                         "$($net.name) ($(if ($net.fabricType -eq "FabricAttach") {"FA"}
                                          else {"DA"}))"
                     };Label="Expected Network"},
                     @{Expression={
                         $net = send-hpovrequest $_.actualNetworkUri -Hostname $_system.ApplianceConnection.Name
                         "$(if ($net.name) {$net.name} else { "None" }) ($(if ($net.fabricType -eq "FabricAttach") {"FA"}
                                          else {"DA"}))"
                     };Label="Actual Network"},
                     @{Expression={$_.groupName};Label="Port Group Name"}

				$_system | format-table $a -autosize -wrap
                $_system | format-table $b -autosize -wrap
                $_system | format-table $c -autosize -wrap
                $_system.managedPools | sort-object 'Name' | format-table $d -autosize -wrap

				if ($unmanagedPools) 
				{ 
					
					$unmanagedPools | sort-object 'Name' | format-table $e -autosize -wrap 
				
				}

                else 
				{
					 
                    ""
                    "[Unmanaged Storage Pools] Name     Drive Type RAID  Total          Allocated   Free"
                    "------------------------- -------  ---------- ----  --------       ----------- -------"
                    "No unmanaged pools available in '{0}' Managed Domain" -f $system.managedDomain 
                    ""
                    ""
                
				}

                $_system.managedPorts | sort-object 'Port' | format-table $f -autosize -wrap

                if ($_StorageSystems.count -gt 1) 
				{

                    "=================================================================================================================="
                    ""
                }
                                
            }

        }

        else 
		{
        
            Return $_StorageSystems
        
		}

    }

}

function Update-HPOVStorageSystem {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Name")]
    Param (
        [parameter(Mandatory = $false, ValueFromPipeLine = $True, HelpMessage = "Enter the Storage System name.", ParameterSetName = "Name", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias('Name')]
        [Object]$StorageSystem,

        [parameter(Mandatory = $false, HelpMessage = "Enter the Storage System serial number.", ParameterSetName = "Serial",Position=0)]
        [ValidateNotNullOrEmpty()]
        [Alias('SN')]
        [string]$SerialNumber

    )

    Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Get-HPOVStorageSystem' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    process { 

        if (-not ($StorageSystem)) { 
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Storage System resource(s) provided. Calling Get-HPOVStorageSystem."
            $StorageSystem = Get-HPOVStorageSystem 
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found [$($StorageSystem.length)] Storage Systems."
        
        }

        ForEach ($system in $StorageSystem) {

            switch ($system.gettype().name) {

                "String" { 
                    
                    #URI of Storage System provided
                    if ($system.StartsWith($script:storageSystemUri)) {

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] URI was provided, getting resource."
                        $ss = Send-HPOVRequest $system

                    }

                    #Storage System Name
                    else {
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] System Name was provided, calling Get-HPOVStorageSystem."
                        $ss = Get-HPOVStorageSystem $system

                    }
                
                }

                "PSCustomObject" {
                
                    if ($system.category -eq "storage-systems") {
                    
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage System resource object provided"
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage System Name: $($system.name)"
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage System URI: $($system.uri)"
						$ss = $system
                    }

                    else {

                        #Wrong category, generate error
                        $errorRecord = New-ErrorRecord ArgumentException WrongCategoryType InvalidResult 'Update-HPOVstorageSystem' -Message "The '$($system.category)' is the wrong value.  Only 'storage-systems' category is allowed.  Please check the value and try again." #-verbose
                        $PSCmdlet.ThrowTerminatingError($errorRecord)

                    }
                }

                default {                         
                    
                    #Wrong category, generate error
                    $errorRecord = New-ErrorRecord ArgumentException UnsupportedDataType InvalidArgument 'Update-HPOVstorageSystem' -Message "The [$($system.Gettype())] is unsupported.  Only [System.String], [System.Array] or [System.Management.Automation.PSCustomObject] are allowed.  Please check the value and try again." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                        
                }

            }

            $ss.refreshState = "RefreshPending"
            $results += @(Send-HPOVRequest $ss.uri PUT $ss)
        }
   
    }

    end {

        if ($results.length -eq 1) { return $results[0] }
        else { return $results }

    }

}

function Add-HPOVStorageSystem 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param 
	(

        [parameter(Mandatory = $true, position = 0, HelpMessage = "Enter the host name (FQDN) or IP of the Storage System.")]
        [ValidateNotNullOrEmpty()]
        [string]$hostname,
         
        [parameter(Mandatory = $true, position = 1, HelpMessage = "Enter the administrative user name (i.e. 3paradm).")]
        [ValidateNotNullOrEmpty()]
        [string]$username = $null,

        [parameter(Mandatory = $true, position = 2, HelpMessage = "Enter the administrative account password (i.e. 3pardata).")]
        [ValidateNotNullOrEmpty()]
        [string]$password = $null,

        [parameter(Mandatory = $false, position = 3, HelpMessage = "Specify the HP 3PAR Virtual Domain Name to Import resources from.")]
        [ValidateNotNullOrEmpty()]
        [String]$Domain = 'NO DOMAIN',

        [parameter(Mandatory = $false, position = 4, HelpMessage = "Specify the Host Ports and Expected Network in an Array of PSCustomObject entries. Example: @{`"1:1:1`"=`"Fabric A`";`"2:2:2`"=`"Fabric B`"}")]
        [ValidateNotNullOrEmpty()]
        [PsCustomObject]$Ports,

		[parameter(Mandatory = $false, position = 5, HelpMessage = "Specify the Host Ports and Expected Network in an Array of PSCustomObject entries. Example: @{`"1:1:1`"=`"Fabric A`";`"2:2:2`"=`"Fabric B`"}")]
        [ValidateNotNullOrEmpty()]
        [PsCustomObject]$PortGroups,

		[parameter(Mandatory = $false, ParameterSetName = "Name")]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$colStatus = New-Object System.Collections.ArrayList

    }
     
    Process 
	{

		ForEach ($_appliance in $ApplianceConnection)
		{
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing appliance: $($_appliance.Name)"

			$_storagesystemcredentials = NewObject -StorageSystemCredentials

			$_storagesystemcredentials.ip_hostname = $hostname
			$_storagesystemcredentials.username    = $username
			$_storagesystemcredentials.password    = $password


			Try
			{

				$_storageSystemDiscoveryTask = Send-HPOVRequest $storageSystemUri POST $_storagesystemcredentials -Hostname $_appliance.Connection.Name

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}			

			Try
			{

				$_storageSystemDiscoveryTask = Wait-HPOVTaskComplete $_storageSystemDiscoveryTask -ApplianceConnection $_appliance.Connection.Name

			}
			
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}		



			if ($storageSystemDiscoveredTask.taskState -eq "Completed") 
			{

				Try
				{
					
					$_connectedStorageSystem = Send-HPOVRequest $_storageSystemDiscoveryTask.associatedResource.resourceUri -Hostname $_appliance.Connection.Name
			    
				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}		

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_connectedStorageSystem.name)' Storage System."

				$_connectedStorageSystem.PSObject.TypeNames.Insert(0,'HPOneView.StorageSystem')

				#Display Storage System details
				$_connectedStorageSystem | fl
				
				if ($_connectedStorageSystem.unmanagedPools)
				{

					$_connectedStorageSystem.unmanagedPools | % { 
						
						$_.PSObject.TypeNames.Insert(0,'HPOneView.Storage.System.Pool') 
					
						Add-Member -InputObject $_ -NotePropertyName ApplianceConnection -NotePropertyValue $_appliance.Name -force

					}

				}

				#Display Storage System Unmanaged Pool details
				$_connectedStorageSystem.unmanagedPools | FT

				if ($_connectedStorageSystem.unmanagedPorts)
				{

					$_connectedStorageSystem.unmanagedPorts | % { 
						
						
						$_.PSObject.TypeNames.Insert(0,'HPOneView.Storage.System.Port') 
					
						Add-Member -InputObject $_ -NotePropertyName ApplianceConnection -NotePropertyValue $_appliance.Name -force

					}

				}

				#Display Storage System Unmanaged Port details
				$_connectedStorageSystem.unmanagedPorts | FT		    

			    #Handle Host Port configuration
			    if (-not($PSBoundParameters['Ports']))
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Ports parameter was not provided.  Using Default values."

			        $_managedPorts = New-Object System.Collections.ArrayList

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($connectedStorageSystem.unmanagedPorts.count) unmanaged ports."

			        #Loop through all ports, looking for actualNetworkUri property set.
			        foreach ($_port in $_connectedStorageSystem.unmanagedPorts) 
					{

			            $_ManagedPort = NewObject -StroageSystemManagedPort
    
			            #If $Ports parameter was not passed, take the discovered Actual Network URI and default
			            if ($_port.actualNetworkUri -and ($_port.actualNetworkUri -ne "unknown" -and $_port.actualNetworkUri -ne "none")) 
						{

			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] actualNetworkUri contains value for port '$($_port.name)'"

			                $_ManagedPort.portName           = $_port.portName
			                $_ManagedPort.actualNetworkUri   = $_port.actualNetworkUri
			                $_ManagedPort.portWwn            = $_port.portWwn
			                $_ManagedPort.expectedNetworkUri = $_port.actualNetworkUri
			                $_ManagedPort.groupName          = "Auto"
			                $_ManagedPort.name               = $_port.name

			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ManagedPort: $($_ManagedPort | out-string)"

			                [void]$_managedPorts.Add($_ManagedPort)

			            }

			        }

			        if ($_managedPorts.Count -eq 0) 
					{ 
			        
			            #Output warning or non-terminating error?
			            write-warning "No storage system ports have an expected network value.  Unable to assign Host Ports to FC/FCoE Network(s)."

			        }

			    }

			    #If user provided the ports
			    else
				{

			        $_managedPorts = New-Object System.Collections.ArrayList

			        $Ports.GetEnumerator() | ForEach-Object -process {

			            # First get the network.  Will error if network does not exist
			            $_sNet = Get-HPOVNetwork -type fc -name $_.value -ApplianceConnection $_appliance.Name

			            #if the network exists, get the port from unmanaged ports list
			            $_pname = $_.key

			            $_tempPort = $_connectedStorageSystem.unmanagedPorts | ? name -eq $_pname

			            #update the port parameters
			            $_tempPort.expectedNetworkUri = $sNet.uri
			            $_tempPort.actualNetworkUri   = $sNet.uri
			            $_tempPort.groupName          = "Auto"

			            #add the port to the managed ports list
			            [void]$_managedPorts.Add($_tempPort)

			            #remove the port from the unmanaged ports list
			            $_tempUnmanagedPorts = $_connectedStorageSystem.unmanagedPorts | ? name -ne $pname

			            $_connectedStorageSystem.unmanagedPorts = $_tempUnmanagedPorts

			        }

			    }

				# // TODO Map Ports to PortGroup caller wants
				if ($PSBoundParameters['PortGroups'])
				{



				}

			        
			    #update managed ports list
			    $_connectedStorageSystem.managedPorts = $_managedPorts

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding $($_managedPorts.count) managed ports. $($_connectedStorageSystem.unmanagedPorts.count/$_managedPorts.count) remaining unmanaged ports to be claimed later." 

			    #Validate the $Domain parameter exists in the list of unmanaged domains returned in the connect call
			    if ($_connectedStorageSystem.unmanagedDomains -contains $Domain)
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found Virtual Domain '$Domain'."

			        #The domain exists, update the managedDomain property
			        $_connectedStorageSystem.managedDomain = $Domain

			        #remove the domain from the unManagedDomains property
			        $_unManaged = $_connectedStorageSystem.unmanagedDomains | ? { $_ -ne $Domain }

			        $_connectedStorageSystem.unmanagedDomains = $_unManaged

			    }

			    else 
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Domain '$Domain' not found. Cleaning up."

					Try
					{

						$reply = Send-HPOVRequest -uri $connectedStorageSystem.uri -method DELETE -Hostname $_appliance.Name

					}
			        
					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}		

			        $errorRecord = New-ErrorRecord InvalidOperationException StorageDomainResourceNotFound ObjectNotFound 'Domain' -Message "Storage Domain '$Domain' not found.  Please check the storage domain exist on the storage system." #-verbose
			        $PSCmdlet.ThrowTerminatingError($errorRecord)

			    }

			}

			else 
			{

			    #ERROR
			    $_connectedStorageSystem

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Task error occurred. Generating error message."
			    
			    $errorRecord = New-ErrorRecord InvalidOperationException $_storageSystemDiscoveryTask.taskErrors[0].errorCode InvalidResult 'Add-HPOVStorageSystem' -Message "$($storageSystemDiscoveredTask.taskErrors[0].message)" #-verbose
			    $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to finalize adding Storage System to appliance"

			Try
			{

				$task = Send-HPOVRequest -method PUT -body $_connectedStorageSystem -uri $_connectedStorageSystem.uri -Hostname $_appliance.Name

			}

			Catch
			{
				
				$task = $null
				
				$PSCmdlet.ThrowTerminatingError($_)

			}			

			[void]$colStatus.Add($task)

		}
        
    }

    end 
	{

        return $colStatus

    }
   
}

function Remove-HPOVStorageSystem {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param (
        [parameter (Mandatory = $true,ValueFromPipeline = $true,ParameterSetName = "default", HelpMessage = "Enter the Storage System to remove.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias("uri","name")]
        [object]$storageSystem,

        [parameter(Mandatory = $false)]
        [switch]$force
    )

    Begin {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError "Remove-HPOVStorageSystem" -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }
        
    }

    Process {

        foreach ($ss in $storageSystem) {
            $ssNameOrUri = $null;
            $ssDisplayName = $null;
            if ($ss -is [String] -and ! $ss.startswith($script:storageSystemUri)) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] storageSystem (NAME) parameter type is System.String, and value passed is $($ss)"
                $ssNameOrUri = $ss
                $ssDisplayName = $ss
            }
            elseif ($ss -is [String] -and $ss.startswith($script:storageSystemUri)) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] storageSystem (URI) parameter type is System.String, and value passed is $($ss)"
                $ssNameOrUri = $ss
                $ssDisplayName = $ss
            }
            elseif ($ss -is [PSCustomObject] -and $ss.category -ieq 'storage-systems') {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] storageSystem parameter type is PsCustomObject."
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] storageSystem URI is $($ss.uri)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] storageSystem URI is $($ss.name)"

                $ssNameOrUri = $ss.uri
                $ssDisplayName = $ss.name

            }
            else {

                $errorRecord = New-ErrorRecord System.ArgumentException InvalidStorageSystemParameter InvalidArgument 'Remove-HPOVStorageSystem' -Message "Invalid storage system parameter: $ss" #-verbose
                $pscmdlet.ThrowTerminatingError($errorRecord)

            }

            if (-not($ssNameOrUri)) {

                if ($ss.name) { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] The storage system '$($ss.nam)' provided was not found. Please check the storageSystem parameter value and try again." }
                else { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] The storage system '$($ss)' provided was not found. Please check the storageSystem parameter value and try again." }

            }
            elseif ($pscmdlet.ShouldProcess($ssDisplayName,'Remove storage system from appliance?')){

                if ([bool]$force) { Remove-HPOVResource -nameOrUri $ssNameOrUri -force }
                else { Remove-HPOVResource -nameOrUri $ssNameOrUri }                
                
            }
        }
    }
}

function Get-HPOVStoragePool {
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Name")]
    Param (
        [parameter(Mandatory = $false, HelpMessage = "Enter the Storage Pool name.", ParameterSetName = "Name", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias('pool', 'name')]
        [string]$poolName,

        [parameter(Mandatory = $false, HelpMessage = "Enter the Storage System Name or provide the Resource Object.", ParameterSetName = "Name", Position = 1)]
        [ValidateNotNullOrEmpty()]
        [Alias('systemName', 'system')]
        [object]$storageSystem,

        [parameter(Mandatory = $false, HelpMessage = "Display output in Table List format.", ParameterSetName = "Name")]
        [Alias('Report')]
        [switch]$List

    )

    Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Get-HPOVStorageSystem' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    Process {

		if ($PSBoundParameters['poolName'])
		{
			
			$poolName = $poolName -replace ("[*]","%25") -replace ("[&]","%26")

		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of Storage Pools"

        $uri = $script:storagePoolUri

        #if poolName parameter was provided, append an API filter for the Pool Resource Name
        if ($poolName) {
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] -poolName was provided.  Filtering for '$poolname'"
            $uri += "?filter=name matches '$poolName'"
            
        }

        #Send the query
        $storagePools = Send-HPOVRequest $uri

        if ($storageSystem -is [String] -and !$storageSystem.startswith($script:storageSystemUri)) { 
        
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem Name was provided."
            $system = Get-HPOVStorageSystem -SystemName $storageSystem

            if (!$system.uri) {
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage system $storageSystem does not exist on the appliance"
            
                $errorRecord = New-ErrorRecord InvalidOperationException StorageSystemResourceNotFound ObjectNotFound 'Get-HPOVStoragePool' -Message "Storage system '$storageSystem' not found.  Please check the name and try again." #-verbose

                #Generate Terminating Error
                $PSCmdlet.ThrowTerminatingError($errorRecord)    

            }
            
            #Filter results until the API can provide them for us.
            [array]$storagePools.members = $storagePools.members | ? { $_.storageSystemUri -eq $system.uri }
            $storagePools.count = $storagePools.members.length
            $storagePools.total = $storagePools.members.length
            
        }

        elseif ($storageSystem -is [PsCustomObject] -and $storageSystem.category -eq "storage-systems") { 
        
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem Object provided"
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem Name: $($storageSystem.name)"
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem Uri: $($storageSystem.uri)"
            
            [array]$storagePools.members = $storagePools.members | ? { $_.storageSystemUri -eq $storageSystem.uri }
            $storagePools.count = $storagePools.members.length
            $storagePools.total = $storagePools.members.length

        }

    }

    end {

        if (!$storagePools.members -and $name){
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage Pool '$name' not found."
            
                $errorRecord = New-ErrorRecord InvalidOperationException StoragePoolResourceNotFound ObjectNotFound 'Get-HPOVStoragePool' -Message "Storage Pool '$name' not found.  Please check the name and try again." #-verbose

                #Generate Terminating Error
                $PSCmdlet.ThrowTerminatingError($errorRecord)    

        }
        elseif (!$storagePools.members -and -not $name){
            
            #No storage pools found matching the provided criteria
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No storage pools found."
            
            $Null

        }

        else {
            
            if ($List) {

                $d = @{Expression={$_.status};Label="Status"}, `
                     @{Expression={$_.name};Label="Name"}, `
                     @{Expression={(send-hpovrequest $_.storageSystemUri).name};Label="Storage System"}, `
                     @{Expression={$_.domain};Label="Storage Domain"}, `
                     @{Expression={$_.deviceType};Label="Drive Type"}, `
                     @{Expression={$_.supportedRAIDLevel};Label="RAID"}, `
                     @{Expression={
                        $value = '{0:N2}' -f ($_.totalCapacity / 1GB)
                        $value + "GB"
                     };Label="Total   "}, `
                     @{Expression={
                        $value = '{0:N2}' -f ($_.allocatedCapacity / 1GB)
                        $value + "GB"
                     };Label="Allocated  "}, `
                     @{Expression={
                        $value = '{0:N2}' -f ($_.freeCapacity / 1GB)
                        $value + "GB"
                     };Label="Free   "}, `
                     @{Expression={ (Send-HPOVRequest ($script:indexUri + "?category=storage-volumes&query=storage_volume_storagepool_uri:'$($_.uri)'")).count};Label="Volumes"}, `
                     @{Expression={ (Send-HPOVRequest ($script:indexUri + "?sort=name:asc&category=storage-volume-templates&query=storagePoolUri:'$($_.uri)'")).count};Label="Volume Templates"}

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Displaying formated table list."

                $storagePools.members | sort-object 'Name' | format-table $d -autosize
            }
            
            else { $storagePools.members }

        }

        "Done. {0} storage pool(s) found." -f $storagePools.count | write-verbose

    }

}

function Add-HPOVStoragePool 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Name")]
    Param 
	(

        [parameter(Mandatory = $true, ValueFromPipeline = $true, HelpMessage = "Enter the Storage System name.", ParameterSetName = "Name", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias('Hostname', 'name')]
        [object]$StorageSystem,

        [parameter(Mandatory = $true, HelpMessage = "Provide array of Storage Pool names.", ParameterSetName = "Name", Position = 1)]
        [ValidateNotNullOrEmpty()]
        [Alias('pool', 'spName', 'cpg')]
        [array]$PoolName,

		[parameter(Mandatory = $false, ParameterSetName = "Name")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}


		$colStatus = New-Object System.Collections.ArrayList

    }
     
    Process 
	{

		ForEach ($_appliance in $ApplianceConnection)
		{
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing appliance: $($_appliance.Name)"
		
			ForEach ($_pool in $PoolName)
			{

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$_pool'"

			    #Validate StroageSystem parameter object
			    if ($StoageSystem.ApplianceConnection.Name -ne $_appliance.Name)
				{

					$errorRecord = New-ErrorRecord HPOneView.StoragePoolResourceException InvalidateStorageSystemApplianceConnection InvalidArgument 'StorageSystem' -TargetType 'PSObject' -Message "The -StorageSystem object does not appear to originate [$($StorageSystem.ApplianceConnection.Name)] from the same provided ApplianceConnection [$($_appliance.Name)]" #-verbose
			        $PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				elseif ($StorageSystem -is [PsCustomObject] -and $StorageSystem.category -eq "storage-systems") 
				{ 

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage System resource object was provided: $($StorageSystem | out-string)"
			        
			        $_StorageSystem = $StorageSystem.PSObject.Clone()
			        
			    }
			    
			    #else the PsCustomObject is not the correct Category type, so error.
			    elseif ($StorageSystem -is [PsCustomObject]) 
				{
			    
			        $errorRecord = New-ErrorRecord HPOneView.StoragePoolResourceException InvalidResourceCategoryValue InvalidArgument 'StorageSystem' -TargetType 'PSObject' -Message "The -StorageSystem parameter value is the wrong resource type ($($StorageSystem.category)). The correct resource category 'storage-systems' is allowed.  Please check the value and try again." #-verbose
			        $PSCmdlet.ThrowTerminatingError($errorRecord)

			    }

			    #Do not allow an array
			    elseif ($StorageSystem -is [Array]) 
				{

			        $errorRecord = New-ErrorRecord HPOneView.StoragePoolResourceException ArrayNotAllow InvalidArgument 'StorageSystem' -TargetType 'PSObject' -Message "The -StorageSystem parameter only accepts [System.String] or [System.Management.Automation.PSCustomObject] value.  Please correct the value and try again." #-verbose
			        $PSCmdlet.ThrowTerminatingError($errorRecord)

			    }

			    else 
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage System Name is passed $($StoragSystem)"

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of Storage Systems"

			        Try
					{

						$_storagesystem = Get-HPOVStorageSystem -SystemName $StorageSystem -ApppianceConnection $_appliance.Name

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

					#Generate Terminating Error if Storage System resource not found
					if (-not($_storagesystem)) {
					        
					    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! No '$StorageSystem' Storage System found."

					    $errorRecord = New-ErrorRecord HPOneView.StoragePoolResourceException StorageSystemResourceNotFound ObjectNotFound 'Add-HPOVStoragePool' -Message "No Storage System with '$StorageSystem' system name found.  Please check the name or use Add-HPOVStorageSystem to add the Storage System." #-verbose
					    $PSCmdlet.ThrowTerminatingError($errorRecord)

					}
					
			    }

			    #Get the list of unmanaged and managed pools in the managed domain
			    
			    $_ump = $_storagesystem.unmanagedPools | ? {$_.domain -eq $_storagesystem.managedDomain}

			    $_mp = $_storagesystem.managedPools | ? {($_.domain -eq $_storagesystem.managedDomain) -and ($_.name -eq $_pool)}

			    if ($_mp)
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage pool resource '$($_pool)' already exists in the managed list. Generating non-terminating error"

			        $errorRecord = New-ErrorRecord HPOneView.StoragePoolResourceException StoragePoolResourceExists ResourceExists 'PoolName' -Message "Storage pool resource '$_pool' already exists in the managed list." #-verbose
			        $PSCmdlet.WriteError($errorRecord) #"Storage pool resource '$p' already exists"

			    }

			    elseif (-not($_ump))
				{

			        #Storage pool resource does not exist in the existing managed list or in the unmanaged list in the managed domain
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Storage pool resource with '$_pool' found in the managed Storage System.  Generating terminating error."

			        $errorRecord = New-ErrorRecord HPOneView.StoragePoolResourceException StorageSystemResourceNotFound ObjectNotFound 'PoolName' -Message "No Storage pool resource with '$_pool' found in the managed Storage System." #-verbose
			        $PSCmdlet.ThrowTerminatingError($errorRecord)

			    }

			    else
				{

			        #Good here... Add the storage pool
			        $_addPool = [PSCustomObject]@{

			            storageSystemUri = $_storagesystem.uri;
			            poolName         = $_pool
			        
					}
			        
			        #add the pool to array of pools to manage
					Try
					{

						$_resp = Send-HPOVRequest -method POST -body $_addPool -uri $storagePoolUri -Hostname $_appliance.Name

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

					[void]$colStatus.Add($_resp)
			        
			    }

			}

		}

        
        
        

    }

    end  
	{

        write-verbose "END Block"

        Return $colStatus

    }

}

function Remove-HPOVStoragePool {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param
    (
        [parameter (Mandatory = $true,ValueFromPipeline = $true,ParameterSetName = "default",HelpMessage = "Specify the storage pool to remove.",Position=0)]
        [parameter (Mandatory = $true,ValueFromPipeline = $true,ParameterSetName = "StorageSystem",HelpMessage = "Specify the storage pool to remove.",Position=0)]
        [ValidateNotNullOrEmpty()]
        [Alias("uri")]
        [Alias("name")]
        [object]$storagePool=$null,

        [parameter (Mandatory = $true,ValueFromPipeline = $false,ParameterSetName = "StorageSystem",HelpMessage = "Specify the Storage System Name, URI or Resource Object where the Storage Pool is located to remove.",Position=1)]
        [ValidateNotNullOrEmpty()]
        [Alias("storage")]
        [object]$storageSystem=$null
    )

    Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError "Remove-HPOVStoragePool" -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        [array]$taskResp = @()

    }

    Process {

        foreach ($sp in $storagePool) {
            $spNameOrUri = $null;
            $storagePoolDisplayName = $null;

            #Network passed is a URI
            if (($sp -is [String]) -and ($sp.startsWith("/rest"))) {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received URI: $($sp)"
                $spNameOrUri = $sp
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting storage pool Name"
                $spDisplayName = (Send-HPOVRequest $sp).name
            }

            #Storage pool passed is the Name
            elseif (($sp -is [string]) -and (!$sp.startsWith("/rest"))) {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received storage pool Name $($sp)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting storage pool"

                #NEED TO VALIDATE
                [object]$storagePool = (Get-HPOVStoragePool -poolName $sp)
                if ($storagePool.count -gt 1 -and !$storageSystem) { 
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received multiple Storage Pool resources with the same name.  Generating terminating error."
                    $errorRecord = New-ErrorRecord InvalidOperationException MultipleResultsFound InvalidResult 'Remove-HPOVStoragePool' -Message "Storage pool Name $sp is not unique. Please use the -StorageSystem parameter and try again." #-verbose
                    $pscmdlet.ThrowTerminatingError($errorRecord)
                    #Write-Error "Storage pool Name $($sp) is not unique" -Category InvalidResult -CategoryTargetName "REMOVE-HPOVSTORAGEPOOL"; return
                }

                elseif ($storagePool.count -gt 1 -and $storageSystem) { 
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] -StorageSystem parameter was passed."
                        
                    if ($storageSytem -is [String] -and $storageSystem.startsWith("/rest")) {
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem parameter is an resource URI. Getting resource object."    
                        $storageSystemObj = send-hpovrequest $storageSystem

                    }
                    
                    elseif ($storageSystem-is [String] -and !$storageSystem.startsWith("/rest")) {

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem parameter is a resource Name. Sending request to Get-HPOVStorageSystem."
                        $storageSystemObj = Get-HPOVStorageSystem -SystemName $storageSystem
                    }

                    elseif ($storageSystem -is [PSCustomObject] -and $storageSystem.category -ieq 'storage-systems') {
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem parameter is a resource object."
                        $storageSystemObj = $storageSystem
                        
                    }

                    else {
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem parameter is invalid. Generating terminating error."

                        #generate error due to wrong object or object data with $storageSystem parameter
                        $errorRecord = New-ErrorRecord System.ArgumentException InvalidArgumentValue InvalidArgument 'Remove-HPOVStoragePool' -Message "StorageSystem parameter is invalid and not of type System.String or PSCustomObject with Category of 'storage-systems'." #-verbose
                        $pscmdlet.ThrowTerminatingError($errorRecord)

                    }
                    

                    #Loop through managed pools ($storageSystemObj.managedPools) to locate pool resource ($sp)
                    $storageSystemObj = $storageSystemObj.managedPools | ? { $_.name -eq $sp }
                    $spNameOrUri = $storageSystemObj.uri
                    $spDisplayName = $storageSystemObj.name

                }
                else {
                    $spNameOrUri = $storagePool.uri
                    $spDisplayName = $storagePool.name
                }
            }

            #Network passed is the object
            elseif ($sp -is [PSCustomObject] -and ($sp.category -ieq 'storage-pools')) {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]"
                $spNameOrUri = $sp.uri;
                $spDisplayName = $sp.name;
            }
            else {
                
                $errorRecord = New-ErrorRecord System.ArgumentException InvalidArgumentValue InvalidArgument 'Remove-HPOVStoragePool' -Message "Invalid storage pool parameter value: $sp" #-verbose
                $pscmdlet.ThrowTerminatingError($errorRecord)
                #Write-Error "Invalid storage pool parameter: $sp"
                #return

            }

            if (!$spNameOrUri) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No storage pool resources found."

            }
            elseif ($pscmdlet.ShouldProcess($spDisplayName,'Remove storage pool from appliance?')) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User confirmed removal of storage pool resource."
                $taskResp += Remove-HPOVResource -nameOrUri $spNameOrUri

            }

        }

    }

    end {

        Return $taskResp

    }

}

function Get-HPOVStorageVolumeTemplate {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Name")]
    Param (

        [parameter(Position = 0, Mandatory = $false, HelpMessage = "Enter the Volume template name.", ParameterSetName = "Name")]
        [ValidateNotNullOrEmpty()]
        [Alias('Name')]
        [string]$templateName,

        [parameter(Mandatory = $false, ParameterSetName = "Name")]
        [switch]$List

    )

    Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Get-HPOVStorageVolumeTemplate' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    process { 

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of Storage Volume Templates"
        $storageVolumeTemplates = (Send-HPOVRequest $script:storageVolumeTemplateUri).members

        if ($templateName) { $storageVolumeTemplates = $storageVolumeTemplates | where { $_.name -eq $templateName } }

        #Generate Terminating Error if resource not found
        if (! $storageVolumeTemplates) {
            
            if ($storageVolumeTemplates) { 
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$storageVolumeTemplates' Storage Volume Template not found."
                    
                $errorRecord = New-ErrorRecord InvalidOperationException StorageVolumeResourceNotFound ObjectNotFound 'Get-HPOVStorageVolumeTemplate' -Message "No Storage Volume with '$storageVolumeTemplates' name found.  Please check the name or use New-HPOVStorageVolumeTemplate to create the volume." #-verbose

                #Generate Terminating Error
                $PSCmdlet.ThrowTerminatingError($errorRecord)
            
            }

            else {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Storage Volume Templates found."

            }

        }

        if ($List) {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Generating List display"
                
            #Storage Volume Display List
            $a = @{Expression={$_.status};Label="Status"}, `
                    @{Expression={$_.name};Label="Name"}, `
                    @{Expression={$_.provisioning.provisionType};Label="Provisioning"}, `
                    @{Expression={
                    if ($_.provisioning.shareable) { "Shared"}
                    else              { "Private" }
                    };Label="Sharing"}, `
                    @{Expression={
                    $value = '{0:N2}' -f ($_.provisioning.capacity / 1GB)
                    $value + "GB"
                    };Label="Requested Capacity"}, `
                    @{Expression={"$((send-hpovrequest $_.provisioning.storagePoolUri).name) ($((send-hpovrequest $_.storageSystemUri).name))"};Label="Storage Pool (System)"}

            $storageVolumeTemplates | sort-object 'name' | format-table $a -autosize

        }

        else { return $storageVolumeTemplates }
    
    }
}

function New-HPOVStorageVolumeTemplate {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "default")]
    Param (
        [parameter(Mandatory = $true, HelpMessage = "Enter the Volume Template Name.", ParameterSetName = "default")]
        [ValidateNotNullOrEmpty()]
        [Alias('Name')]
        [string]$templateName,

        [parameter(Mandatory = $false, ParameterSetName = "default")]
        [string]$description=$null,

        [parameter(Mandatory = $true, HelpMessage = "Enter the Storage Pool Name, URI or provide the resource object.", ParameterSetName = "default")]
        [object]$storagePool = $Null,

        [parameter(Mandatory = $false, HelpMessage = "Enter the Storage System Name, URI or provide the resource object.", ParameterSetName = "default")]
        [object]$StorageSystem = $Null,

        [parameter(Mandatory = $true, HelpMessage = "Enter the requested capacity in GB.", ParameterSetName = "default")]
        [Alias('size')]
        [int32]$capacity,

        [parameter(Mandatory = $false, ParameterSetName = "default")]
        [switch]$full=$false,

        [parameter(Mandatory = $false, ParameterSetName = "default")]
        [switch]$shared=$false

    )

    begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    Process {

        #Storage Pool Name
        if ($storagePool -is [String] -and !$storagePool.StartsWith($script:storagePoolUri)) {
            
            write-verbose "[NBEW-HPOVSTORAGEVOLUMETEMPLATE] StoragePool name provided as parameter value: $($storagePool)"
            $tmpStoragePool = $storagePool

            #First look for the Storage Pool.
            if ($StorageSystem -is [string]) { $storagePool = Get-HPOVStoragePool $storagePool $StorageSystem }
            elseif ($StorageSystem -is [PsCustomObject]) { $storagePool = Get-HPOVStoragePool $storagePool $StorageSystem }
            else { $storagePool = Get-HPOVStoragePool $storagePool }

            #If multiple Storage Pool Resources are returned that are of the same name, generate error and indicate the -StorageSystem parameter is needed.
            #Validate that the storage pool object is unique and not a collection
            if($storagePool -is [Array] -and !$StorageSystem){

                write-verbose "[HPOVStorageVolumeTemplate] Multiple Storage Pool resources of the name '$tmpStoragePool'. $($storagePool.count) resources found."
                $errorRecord = New-ErrorRecord InvalidOperationException InvalidStoragePoolResource ObjectNotFound 'New-HPOVStorageVolumeTemplate' -Message "Multiple Storage Pools it the '$tmpStoragePool' name were found.  Please use the -StorageSystem parameter to specify the Storage System the Pool is associated with, or use the Get-HPOVStoragePool cmdlet to get the Storage Pool resource and pass as the -StoragePool parameter value."
                
                #Generate Terminating Error
                $PSCmdlet.ThrowTerminatingError($errorRecord)
            }

        }

        #Storage Pool URI
        elseif ($storagePool -is [String] -and $storagePool.StartsWith($script:storagePoolUri)) {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StoragePool URI provided: $storagePool"
            $storagePool = Send-HPOVRequest $storagePool

            if ($storagePool.statusCode) {

                $errorRecord = New-ErrorRecord InvalidOperationException $storagePool.errorCode InvalidOperation 'New-HPOVStorageVolumeTemplate' -Message ($storagePool.details + " " + $storagePool.recommendedActions[0] )
                
                #Generate Terminating Error
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

        }

        #Storage Pool Object
        elseif ($storagePool -is [PsCustomObject] -and $storagePool.category -eq "storage-pools") {

            write-verbose "[NBEW-HPOVSTORAGEVOLUMETEMPLATE] StoragePool resource provided."
            write-verbose "[NBEW-HPOVSTORAGEVOLUMETEMPLATE] StoragePool Name: $($storagePool.name)"
            write-verbose "[NBEW-HPOVSTORAGEVOLUMETEMPLATE] StoragePool URI: $($storagePool.uri)"

        }

        #PsCustomObject provided but wrong category, which would be wrong resource, so generate error
        elseif ($storagePool -is [PsCustomObject] -and $storagePool.category -ne "storage-pools") {

            $errorRecord = New-ErrorRecord ArgumentException WrongCategoryType InvalidArgument 'New-HPOVStorageVolumeTemplate' -Message "The StoragePool resource category '$($storagePool.category)' is the wrong type.  The resource category should be 'storage-pools'.  Please check the value and try again." #-verbose
            
            #Generate Terminating Error
            $PSCmdlet.ThrowTerminatingError($errorRecord)        

        }

        #End catch and will be error if reaching this point
        else { 
        
            $errorRecord = New-ErrorRecord ArgumentException InvalidArgumentType InvalidArgument 'New-HPOVStorageVolumeTemplate' -Message "The StoragePool data type '$($storagePool.gettype().fullname)' is an unsupported data type.  Only [System.String] or [System.ObjectSystem.Management.Automation.PSCustomObject] are supported date types.  Please check the value and try again." #-verbose
            
            #Generate Terminating Error
            $PSCmdlet.ThrowTerminatingError($errorRecord)        
        
        }
        
        #Validate that the storage pool object is unique and not a collection
        if($storagePool -is [Array]){

            write-verbose "[HPOVStorageVolumeTemplate] Not a valid storage pool resource object."
            $errorRecord = New-ErrorRecord InvalidOperationException InvalidStoragePoolResource ObjectNotFound 'New-HPOVStorageVolumeTemplate' -Message "The storage pool object is not a valid instance of an object"
            
            #Generate Terminating Error
            $PSCmdlet.ThrowTerminatingError($errorRecord)
        }
        

        #Translate the capacity to GB
        [int64]$capacity = $capacity * 1GB

        #Translate for provisioning type (thin/full) from the cmdlet switch
        if([bool]$full){$provisionType = "Full"}
        else {$provisionType = "Thin"}
            
        #Build the Object
        [psCustomObject]$provisioning = @{
                        capacity = $capacity;
                        provisionType = $provisionType;
                        shareable = [bool]$shared;
                        storagePoolUri = $storagePool.uri
                        }

        [psCustomObject]$svt = @{
                name = $templateName;
                description = $description;
                provisioning = $provisioning;
                type = "StorageVolumeTemplate"
                }

        #Send the request
        Send-HPOVRequest -method POST -uri $script:storageVolumeTemplateUri -body $svt

    }

}

function Remove-HPOVStorageVolumeTemplate {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param (

        [parameter (Mandatory = $true,ValueFromPipeline = $true,ParameterSetName = "default", HelpMessage = "Specify the storage pool to remove.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias("uri")]
        [Alias("name")]
        [object]$templateName=$null
    
    )

    Process {

        foreach ($svt in $templateName) {

            $svtNameOrUri = $null;
            $svtDisplayName = $null;

            #Network passed is a URI
            if (($svt -is [String]) -and ($svt.startsWith("/rest"))) {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received URI: $($svt)"
                $svtNameOrUri = $svt
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting storage volume template name"
                $svtDisplayName = (Send-HPOVRequest $svt).name
            }

            #Storage pool passed is the Name
            elseif (($svt -is [string]) -and (!$svt.startsWith("/rest"))) {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received storage volume template name $($svt)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting storage volume template"

                #NEED TO VALIDATE
                $templateName = Get-HPOVStorageVolumeTemplate $svt
                if ($templateName.count -gt 1 ) { 
                Write-Error "Storage volume template name $($svt) is not unique" -Category InvalidResult -CategoryTargetName "REMOVE-HPOVSTORAGEVOLUMETEMPLATE"; return
                }
                else {
                    $svtNameOrUri = $templateName.uri
                    $svtDisplayName = $templateName.name
                }
            }

            #Network passed is the object
            elseif ($templateName -is [PSCustomObject] -and ($svt.category -ieq 'storage-volume-templates')) {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]"
                $svtNameOrUri = $svt.uri;
                $svtDisplayName = $svt.name;
            }
            else {
                Write-Error "Invalid storage volume template parameter: $svt"
                return
            }

            if (!$svtNameOrUri) {
                Write-Error "Invalid storage volume template parameter: $svt"
            }
            elseif ($pscmdlet.ShouldProcess($svtDisplayName,'Remove storage volume template from appliance?')) {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]"
                Remove-HPOVResource -nameOrUri $svtNameOrUri
            }

        }

    }

}

function Get-HPOVStorageVolumeTemplatePolicy {

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdLetBinding(DefaultParameterSetName = "default")]
    Param ()

    Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Get-HPOVStorageVolumeTemplatePolicy' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    Process {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting global setting value."
        $script:storageVolumeTemplateRequiredGlobalPolicy = (Send-HPOVRequest /rest/global-settings/StorageVolumeTemplateRequired).value
        
        switch ($script:storageVolumeTemplateRequiredGlobalPolicy) {

            "True" { Return $True }
            "False" { Return $False }

        }

    }

}

function Set-HPOVStorageVolumeTemplatePolicy {

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdLetBinding(DefaultParameterSetName = "default")]
    Param (
    
        [parameter(Mandatory = $True, HelpMessage = "Enable Storage Volume Template global policy.", ParameterSetName = "Enable")]
        [switch]$Enable,
              
        [parameter(Mandatory = $True, HelpMessage = "Disable Storage Volume Template global policy.", ParameterSetName = "Disable")]
        [switch]$Disable    
    
    
    )

    Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Get-HPOVStorageVolumeTemplatePolicy' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    Process {

        switch ($PsCmdlet.ParameterSetName) {

            'Enable' {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User requested to ENABLE the policy"
                $request = [PSCustomObject]@{type = "Setting"; name = "StorageVolumeTemplateRequired"; value = "true"}
            
            }

            'Disable' {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User requested to DISABLE the policy"
                $request = [PSCustomObject]@{type = "Setting"; name = "StorageVolumeTemplateRequired"; value = "false"}
            
            }

        }

        $resp = Send-HPOVRequest /rest/global-settings/StorageVolumeTemplateRequired PUT $request

        if ($resp.errorCode) {
            
            $errorRecord = New-ErrorRecord InvalidOperationException $resp.errorCode InvalidResult 'Set-HPOVStorageVolumeTemplatePolicy' -Message $resp.details #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    end {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Calling 'Get-HPOVStorageVolumeTemplatePolicy' to get global setting."
        Get-HPOVStorageVolumeTemplatePolicy

    }

}

function Get-HPOVStorageVolume 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Name")]
    Param 
    (

        [parameter(Mandatory = $false, HelpMessage = "Enter the Volume name.", ParameterSetName = "Name", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias('Name')]
        [string]$VolumeName = $Null,

        [parameter(Mandatory = $false, HelpMessage = "Show only available storage volumes", ParameterSetName = "Name")]
        [switch]$Available,

        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}
		
		Write-Verbose -message ("ParameterSet: " + $PsCmdLet.ParameterSetName)
        
        $volumeCollection = New-Object System.Collections.ArrayList

    }

    Process 
    { 
        
        ForEach ($_Connection in $ApplianceConnection) 
        {

			if ($VolumeName)
			{


			    $VolumeName = $VolumeName -replace "[*]","%25" -replace "[?]","%26" 
			}
		    
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of Storage Volumes"

            if ($VolumeName -and (-not([bool]$available))) 
            { 
            
                $uri = $script:storageVolumeUri + "?filter=name matches '$VolumeName'"
                
            }
            
            elseif ($VolumeName -and [bool]$available) 
            {
            
                $uri = $script:attachableVolumesUri + "?filter=name matches '$VolumeName'"
            
            }
            
            elseif ((-not ($VolumeName)) -and [bool]$available) 
            {
            
                $uri = $script:attachableVolumesUri 
                
            }
            
            else 
            {
            
                $uri = $script:storageVolumeUri 
                
            }
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Query: $($uri)"

            #Send the query
			Try
			{

				$storageVolumes = Send-HPOVRequest $uri -appliance $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

            #Generate Terminating Error if resource not found
            if (-not($storageVolumes.members))
            {
                
                if ($VolumeName) 
                { 
                    
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$VolumeName' Storage Volume found."
                        
                    $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException StorageVolumeResourceNotFound ObjectNotFound 'Get-HPOVStorageVolume' -Message "No Storage Volume with '$VolumeName' name found.  Please check the name or use New-HPOVStorageVolume to create the volume." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                }

                else 
                {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Storage Volumes found."

                }
                        
            }
                
            else 
            {

		        $storageVolumes.members | % { 

                    $_.PSObject.TypeNames.Insert(0,"HPOneView.Storage.Volume") 
                    
                    [void]$volumeCollection.Add($_)
                    
                } 	

            }

            if ($Available) 
            {
            
                Write-Verbose "Done. $($storageVolumes.count) attachable storage volume(s) found on $($_Connection.name)." 
                
            }
            
            else 
            {
            
                Write-Verbose "Done. $($storageVolumes.count) storage volume(s) found on $($_Connection.name)." 
                
            }

        }

        
    }

    End 
    {

        Return $volumeCollection

    }

}

function New-HPOVStorageVolume 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdletBinding(DefaultParameterSetName = "default")]
    Param 
	(

        [parameter (Mandatory = $true, HelpMessage = "Specify the name of the storage volume.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias("name")]
        [string]$volumeName,

        [parameter(Mandatory = $false, ParameterSetName = "default", Position = 1)]
        [string]$description = "",

        [parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "default", Position = 2)]
        [ValidateNotNullOrEmpty()]
        [Alias("pool","poolName")]
        [object]$StoragePool,

        [parameter(Mandatory = $false, ParameterSetName = "default")]
        [string]$StorageSystem = "",

        [parameter(Mandatory = $true, ParameterSetName = "template")]
        [ValidateNotNullOrEmpty()]
        [Alias('template','svt')]
        [object]$VolumeTemplate,

        [parameter(Mandatory = $true, ParameterSetName = "default", Position = 3)]
        [parameter(Mandatory = $false, ParameterSetName = "template", Position = 2)]
        [ValidateScript({$_ -ge 1})]
        [Alias("size")]
        [int64]$capacity,

        [parameter(Mandatory = $false, ParameterSetName = "default", HelpMessage = "Create Thick provisioned volume.")]
        [switch]$full,

        [parameter(Mandatory = $false, ParameterSetName = "default", HelpMessage = "Allow the volume to be shared between hosts (i.e. shared datastore).")]
        [parameter(Mandatory = $false, ParameterSetName = "template", HelpMessage = "Allow the volume to be shared between hosts (i.e. shared datastore).")]
        [switch]$shared,

        [parameter(Mandatory = $false, ParameterSetName = "default")]
        [parameter(Mandatory = $false, ParameterSetName = "template")]
        [switch]$Permanent,

		[parameter(Mandatory = $true, ParameterSetName = "default")]
		[parameter(Mandatory = $true, ParameterSetName = "template")]
		[ValidateNotNullorEmpty()]
		[object]$ApplianceConnection = $null

    )

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$colStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

        $_newVolume = NewObject -StroageVolume

        $_newVolume.isPermanent = $true
        $_newVolume.name        = $volumeName
        $_newVolume.description = $description

        $_newVolume.provisioningParameters.storagePoolUri    = $null
        $_newVolume.provisioningParameters.requestedCapacity = $null
        $_newVolume.provisioningParameters.provisionType     = "Thin"
        $_newVolume.provisioningParameters.shareable         = $false


        #Check to see if Storage Volume Template Global Setting is enabled
        $_storageVolumeTemplateRequiredGlobalPolicy = (Send-HPOVRequest /rest/global-settings/StorageVolumeTemplateRequired -Hostname $ApplianceConnection.Name).value

        if ($_storageVolumeTemplateRequiredGlobalPolicy -ieq "True" -and (-not($VolumeTemplate)))
		{ 
        
            $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException StorageVolumeTemplateRequired InvalidArgument 'StorageVolumeTemplate' -Message "Storage Volumes cannot be created without providing a Storage Volume Template due to global policy setting.  Please provide a Storage Volume Template and try again." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)
        
        }

        else 
		{

            Switch ($PsCmdlet.ParameterSetName) 
			{
                
                "default" 
				{

                    switch ($StoragePool.Gettype().Name) 
					{

                        "String" 
						{ 
                        
                            #parameter is correct URI
                            if ($StoragePool.StartsWith($script:storagePoolUri))
							{

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StoragePool URI provided by caller."
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request." 
                                                       
								Try
								{

									$_sp = Send-HPOVRequest $StoragePool -Hostname $ApplianceConnection.Name

								}

								Catch
								{

									$PSCmdlet.ThrowTerminatingError($_)

								}
                                
                            
                            }

                            #Parameter is incorrect URI value
                            elseif ($StoragePool.StartsWith("/rest")) 
							{

                                #Invalid parameter value, generate terminating error.
                                $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidArgumentValue InvalidArgument 'StoragePool' -Message "Invalid StoragePool parameter value: $($StoragePool | out-string). Please correct and try again." #-verbose
                                $PSCmdlet.ThrowTerminatingError($errorRecord)

                            }

                            #Parameter is Storage Pool name
                            else 
							{
                                
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StoragePool Name provided by caller."
                                
                                #Get specific storage pool from provi
                                if ($StorageSystem) 
								{ 

                                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem name provided: $StorageSystem"
                                
                                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request."

									Try
									{

										$_sp = Get-HPOVStoragePool $StoragePool -storageSystem $StorageSystem -ApplianceConnection $ApplianceConnection.Name

									}

									Catch
									{

										$PSCmdlet.ThrowTerminatingError($_)

									}
                                    
                                    
                                }

                                else 
								{ 
									
									Try
									{

										$_sp = Get-HPOVStoragePool $StoragePool -ApplianceConnection $ApplianceConnection.Name

									}

									Catch
									{

										$PSCmdlet.ThrowTerminatingError($_)

									}
								
								}

                                if ($_sp -and $_sp.count -gt 1) 
								{

                                    $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException MultipleStoragePoolsFound InvalidResult 'StoragePool' -Message "Multiple StoragePool resources found with the name '$StoragePool'.  Please use the -StorageSystem parameter to specify the Storage System the Storage Pool is to be used, or use Get-HPOVStoragePool to provide the specific Storage Pool resource." #-verbose
                                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                                }

                            }

                        }

                        "PSCustomObject" 
						{ 
                        
                            #Validate the object
                            if ($StoragePool.category -eq 'storage-pools') 
							{ 
								
								#Check the StoragePool object to make sure the ApplianceConnection property matches the ApplianceConnection parameter from caller
								if ($StoragePool.ApplianceConnection.Name -ne $ApplianceConnection.Name)
								{

									$errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidStoragePoolObject InvalidArgument 'StoragePool' -TargetType 'PSObject' -Message "The provided StoragePool object does not appear to originate from the same ApplianceConnection specified -  ApplianceConnection: $($ApplianceConnection.Name) StorageVolume ApplianceConnection $($StorageVolume.ApplianceConnection.Name)." #-verbose
									$PSCmdlet.ThrowTerminatingError($errorRecord)

								}
								
								$_sp = $StoragePool.PSObject.Clone()
							
							}

                            else 
							{

                                $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidStoragePoolCategory InvalidArgument 'StoragePool' -TargetType 'PSObject' -Message "Invalid StoragePool parameter value.  Expected Resource Category 'storage-pools', received '$($VolumeTemplate.category)'." #-verbose
                                $PSCmdlet.ThrowTerminatingError($errorRecord)

                            }                        
                        
                        }

                    }

                    #Amend the request body
                    $_newVolume.provisioningParameters.storagePoolUri    = $_sp.uri
                    $_newVolume.provisioningParameters.requestedCapacity = $capacity * 1GB

                    #Check for the presence of the $full and $shared parameters and set values if so
                    if($full.isPresent)
					{
						
						$_newVolume.provisioningParameters.provisionType = "Full"
					
					}

                    if($shared.isPresent)
					{
						
						$_newVolume.provisioningParameters.shareable = $true
					
					}

                }

                "template" 
				{

                    switch ($VolumeTemplate.gettype().name) 
					{

                        "String" 
						{
                            
                            if ($VolumeTemplate.StartsWith($script:storageVolumeTemplateUri))
							{

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] VolumeTemplate URI provided by caller."

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request."   
								                     
                                Try
								{

									$_svt = Send-HPOVRequest $VolumeTemplate -HostName $ApplianceConnection.Name

								}
								
								Catch
								{

									$PSCmdlet.ThrowTerminatingError($_)

								}
                            
                            }

                            elseif ($VolumeTemplate.StartsWith("/rest")) 
							{

                                #Invalid parameter value, generate terminating error.
                                $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidVolumeTemplateArgumentValue InvalidArgument 'VolumeTemplate' -Message "Invalid VolumeTemplate parameter value: $($VolumeTemplate | out-string)" #-verbose
                                $PSCmdlet.ThrowTerminatingError($errorRecord)

                            }

                            else 
							{
                                
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] VolumeTemplate Name provided by caller."

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request."

                                #Get the storage volume template resource.  Terminating error will throw from the Get-* if no resource is found.
								Try
								{

									$_svt = Get-HPOVStorageVolumeTemplate -templateName $VolumeTemplate
								
								}
								
								Catch
								{

									$PSCmdlet.ThrowTerminatingError($_)

								}

                            }

                        }

                        "PSCustomObject" 
						{

                            #Validate the object
                            if ($VolumeTemplate.category -eq 'storage-volume-templates') 
							{ 
								
								#Check the StorageVolumeTemplate object to make sure the ApplianceConnection property matches the ApplianceConnection parameter from caller
								if ($VolumeTemplate.ApplianceConnection.Name -ne $ApplianceConnection.Name)
								{

									$errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidStorageVolumeTemplateObject InvalidArgument 'VolumeTemplate' -TargetType 'PSObject' -Message "The provided VolumeTemplate object does not appear to originate from the same ApplianceConnection specified -  ApplianceConnection: $($ApplianceConnection.Name) StorageVolume ApplianceConnection $($VolumeTemplate.ApplianceConnection.Name)." #-verbose
									$PSCmdlet.ThrowTerminatingError($errorRecord)

								}

								$_svt = $VolumeTemplate.PSObject.Clone()
							
							}

                            else 
							{

                                $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidVolumeTemplateCategory InvalidArgument 'VolumeTemplate' -Message "Invalid VolumeTemplate parameter value.  Expected Resource Category 'storage-volume-templates', received '$($VolumeTemplate.category)'." #-verbose
                                $PSCmdlet.ThrowTerminatingError($errorRecord)

                            }

                        }

                        default 
						{ 
						
							$errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidVolumeTemplateObjetType InvalidArgument 'VolumeTemplate' -TargetType $VolumeTemplate.GetType().Name -Message "Invalid VolumeTemplate parameter value.  Allowed parameter types 'System.String' or 'PSCustomObject' are allowed." #-verbose
                            $PSCmdlet.ThrowTerminatingError($errorRecord)
						
						}

                    }

                    #Amend the request body
                    $_newVolume.templateUri                              = $_svt.uri
                    $_newVolume.provisioningParameters.storagePoolUri    = $null
                    $_newVolume.provisioningParameters.requestedCapacity = $_svt.provisioning.capacity
                    $_newVolume.provisioningParameters.provisionType     = $null
                    $_newVolume.provisioningParameters.shareable         = $_svt.provisioning.shareable

                    #Check if capacity and shareable parameters were overridden in the request and update the object
                    if($capacity)
					{

                        $_newVolume.provisioningParameters.requestedCapacity = $capacity * 1GB

                    }

                    if($shared.isPresent -ne $_svt.provisioning.shareable)
					{

                        $_newVolume.provisioningParameters.shareable = (-not($_svt.provisioning.shareable))

                    }

                }

            }

            #Send the request
			Try
			{

				$resp = Send-HPOVRequest -method POST -body $_newVolume -uri $script:storageVolumeUri

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			[void]$colStatus.Add($resp)
            
        }

    }

    end 
	{
		
		Return $colStatus

    }

}

function Add-HPOVStorageVolume 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdletBinding(DefaultParameterSetName = "default")]
    Param 
	(

        [parameter(Mandatory = $true, ValueFromPipeline = $True, Position = 0, ParameterSetName = "default")]
        [ValidateNotNullOrEmpty()]
        [object]$StorageSystem,

        [parameter (Mandatory = $true, HelpMessage = "Specify the name of the storage volume.", Position = 1, ParameterSetName = "default")]
        [ValidateNotNullOrEmpty()]
        [Alias("volid","id","wwn")]
        [ValidateScript({if ($_ -match $script:wwnLongAddressPattern) {$true} else { Throw "The input value '$_' does not match the required format of 'AA:BB:CC:DD:EE:AA:BB:CC:DD:EE:AA:BB:CC:DD:EE:AA'. Please correct and try again." }})]
        [string]$VolumeID,

        [parameter (Mandatory = $true, ParameterSetName = "default", HelpMessage = "Specify the name of the storage volume.", Position = 2)]
        [ValidateNotNullOrEmpty()]
        [Alias("name")]
        [string]$VolumeName,

        [parameter(Mandatory = $false, ParameterSetName = "default", Position = 3)]
        [string]$Description = "",

        [parameter(Mandatory = $false, ParameterSetName = "default", HelpMessage = "Allow the volume to be shared between hosts (i.e. shared datastore).")]
        [switch]$Shared,

		[parameter(Mandatory = $true, ParameterSetName = "default", ValueFromPipelineByPropertyName)]
		[ValidateNotNullorEmpty()]
		[object]$ApplianceConnection = $null

    )

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$colStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

        #Create new addVolume object
        $_addVolume = NewObject -AddStorageVolume

        $_addVolume.name             = $volumeName
        $_addVolume.description      = $description
        $_addVolume.storageSystemUri = $null
        $_addVolume.wwn              = $VolumeID
        $_addVolume.provisioningParameters.shareable = $shared.IsPresent

        Switch ($StorageSystem.GetType().Name) 
		{

            "String" 
			{
                            
                if ($StorageSystem.StartsWith($script:storageSystemUri))
				{

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem URI provided by caller."
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request."   
					                     
					Try
					{

						$_ss = Send-HPOVRequest $StorageSystem -Hostname $ApplianceConnection.Name

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}
                    
                }

                elseif ($StorageSystem.StartsWith("/rest")) 
				{

                    #Invalid parameter value, generate terminating error.
                    $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidArgumentValue InvalidArgument 'New-HPOVStorageVolume' -Message "Invalid StorageSystem parameter value: $($StorageSystem | out-string)" #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                }

                else 
				{
                                
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] StorageSystem Name provided by caller."
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request."

                    #Get the storage volume template resource.  Terminating error will throw from the Get-* if no resource is found.

					Try
					{

						$_ss = Get-HPOVStorageSystem $StorageSystem -ApplianceConnection $ApplianceConnection
					
					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

                }

            }

            "PSCustomObject" 
			{

                #Validate the object
                if ($StorageSystem.category -eq 'storage-systems' -and $StorageSystem.ApplianceConnection.Name -eq $ApplianceConnection.Name) 
				{ 
					
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage System Object provided: $($StorageSystem.name)"

					$_ss = $StorageSystem.PSObject.Clone()
				
				}

                else 
				{

                    $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidStorageSystemCategory InvalidArgument 'StorageSystem' -TargetType PSObject -Message "Invalid StorageSystem parameter value.  Expected Resource Category 'storage-systems', received '$($VolumeTemplate.category)'." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                }

            }

            default 
			{
			
				$errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidStorageSystemObject InvalidArgument 'StorageSystem' -TargetType $StorageSystem.GetType().Name -Message "Invalid StorageSystem parameter value object type.  Only [PSCustomObject] or [String] values are allowed." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)
			
			}
        
		}

        $_addVolume.storageSystemUri = $_ss.uri

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Add Storage Volume Object: $($_addVolume | Out-String)"

        #Send the request
        
		Try
		{

			$resp = Send-HPOVRequest POST $_addVolume $storageVolumeUri -Hostname $ApplianceConnection.Name

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		[void]$colStatus.Add($resp)
		
    }

    End 
	{

        Return $colStatus

    }

}

function Set-HPOVStorageVolume {

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdletBinding(DefaultParameterSetName = "default")]
    Param (

        [parameter (Mandatory = $true, ValueFromPipeline = $true, HelpMessage = "Specify the original Storage VOlume Name, URI or Object.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [object]$sourceVolume,

        [parameter (Mandatory = $false, HelpMessage = "Specify the name of the storage volume.", Position = 1)]
        [ValidateNotNullOrEmpty()]
        [string]$volumeName,

        [parameter(Mandatory = $false, ParameterSetName = "default", Position = 2)]
        [string]$description = "",

        [parameter(Mandatory = $false, ParameterSetName = "default", Position = 3)]
        [ValidateScript({$_ -ge 1})]
        [Alias("size")]
        [int64]$capacity,

        [parameter(Mandatory = $false, ParameterSetName = "default", HelpMessage = "Allow the volume to be shared between hosts (i.e. shared datastore).")]
        [bool]$shared,

        [parameter(Mandatory = $false, ParameterSetName = "default")]
        [bool]$Permanent

    )

     Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Set-HPOVStorageVolume' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    Process {

        #Get Source VOlume resource
        Switch ($sourceVolume.GetType().Name) {

            "String" { 
                 
                #parameter is correct URI
                if ($sourceVolume.StartsWith($script:storageVolumeUri)){

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage Volume URI provided by caller: $sourceVolume"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting volume resource object" 
                                                       
                    $volumeObject = Send-HPOVRequest $sourceVolume
                            
                }

                #Parameter is incorrect URI value
                elseif ($sourceVolume.StartsWith("/rest")) {

                    #Invalid parameter value, generate terminating error.
                    $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidArgumentValue InvalidArgument 'Set-HPOVStorageVolume' -Message "Invalid Storage Volume parameter value: $($sourceVolume | out-string). Please correct and try again." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                }

                #Parameter is Storage Pool name
                else {
                                
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage Volume Name provided by caller."
                                
                    $volumeObject = Get-HPOVStorageVolume $sourceVolume

                }
                
            }
            "PSCustomObject" {

                #Validate the object
                if ($sourceVolume.category -eq 'storage-volumes') { $volumeObject = $sourceVolume }

                else {

                    $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidStoragePoolCategory InvalidArgument 'Set-HPOVStorageVolume' -Message "Invalid Storage Volume parameter value.  Expected Resource Category 'storage-volumes', received '$($sourceVolume.category)'." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                }          
                
            }

        }

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ORIGINAL Storage Volume object properties: $($volumeObject | out-string)"

        $volumeObject = $volumeObject | Select-Object * -ExcludeProperty deviceVolumeName,wwn,raidLevel,storagePoolUri,allocatedCapacity,deviceType,category,refreshState,created,modified,stateReason,status,state

        #Volume Object updates
        switch ($PSboundParameters.keys) {

            "volumeName"  { $volumeObject.name = $volumeName }
            "description" { $volumeObject.description = $description }
            "capacity"    { 
            
                 [int64]$capacity = $capacity * 1GB
                 if ([int64]$capacity -gt [int64]$volumeObject.provisionedCapacity) { $volumeObject.provisionedCapacity = $capacity }

                #Generate Terminating Error
                else { 
                
                    $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidStorageVolumeCapacityValue InvalidArgument 'Set-HPOVStorageVolume' -Message "Invalid 'capacity' Storage Volume parameter value.  The value '$([int64]$capacity)' is less than the original volume size $([int64]$volumeObject.provisionedCapacity).  Volume capacity cannot be reduced, only increased." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                
                }

            }
            "shared"      { $volumeObject.shared = [Bool]$shared }
            "Permanent"   { $volumeObject.Permanent = [Bool]$Permanent }
            
        }
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updated Storage Volume object properties: $($volumeObject | out-string)"
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending updated storage volume to appliance."

        $resp = Send-HPOVRequest $volumeObject.uri PUT $volumeObject

    }

    end {

        Return $resp

    }

}

function Remove-HPOVStorageVolume {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    #Need to have scope to be OneView or OneView+Storage System
    [CmdletBinding(SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param (

        [parameter (Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = "default", HelpMessage = "Specify the storage volume to remove.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias("uri")]
        [Alias("name")]
        [object]$storageVolume=$null,

        [parameter(Mandatory = $false, HelpMessage = "Specify whether to delete the export reference or export and provisioning volume.")]
        [switch]$exportOnly

    )

    Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        $taskResults = @()

    }

    Process {
    
        foreach ($volume in $storageVolume) {

            $volumeNameOrUri = $null;
            $volumeDisplayName = $null;

            #Resource passed is a URI
            if (($volume -is [String]) -and ($volume.startsWith($script:storageVolumeUri))) 
            {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received URI: $($volume)"
                $volumeNameOrUri = $volume
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Volume Name"
                $volumeDisplayName = (Send-HPOVRequest $volume).name
            }

            #Resource passed is the Name
            elseif (($volume -is [string]) -and (!$volume.startsWith($script:storageVolumeUri))) 
            {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received Network Name $($volume)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Network"

                #NEED TO VALIDATE
                $storageVolume = Get-HPOVStorageVolume $volume
                if ($storageVolume.count -gt 1 ) 
                { 

                    $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException VolumeNameNotUnique InvalidResult 'Remove-HPOVStorageVolume' -Message "Storage Volume Name '$($volume)' is not unique." #-verbose
                    $PSCmdlet.WriteError($errorRecord)
                    
                }

                else 
                {
                    $volumeNameOrUri = $storageVolume.uri
                    $volumeDisplayName = $storageVolume.name
                }

            }

            #Volume resource passed is the object
            elseif ($volume -is [PSCustomObject] -and ($volume.category -ieq 'storage-volumes')) 
            {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]"
                $volumeNameOrUri = $storageVolume.uri;
                $volumeDisplayName = $storageVolume.name;
            }
            else 
            {

                $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidVolumeParameter InvalidResult 'Remove-HPOVStorageVolume' -Message "Storage Volume parameter '$($volume)' is invalid." #-verbose
                $PSCmdlet.WriteError($errorRecord)

            }

            if (!$volumeNameOrUri) 
            {
                
                $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidVolumeParameter InvalidResult 'Remove-HPOVStorageVolume' -Message "Storage Volume parameter '$($volume)' is invalid." #-verbose
                $PSCmdlet.WriteError($errorRecord)

            }
            
            #Prompt for confirmation if user is going to remove both the export and volume
            if (-not ($exportOnly.IsPresent) -and $pscmdlet.ShouldProcess($volumeDisplayName,'Remove storage volume from appliance?')) 
            {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing volume and export."
                
                #Handle additional header required for this delete operation
                $results = Send-HPOVRequest $volumeNameOrUri DELETE
            }
            
            #No prompt necessary, as volume export is being removed, not the volume.
            elseif ([bool]$exportOnly) 
            {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] removing export only"
                
                #Handle additional header required for this delete operation
                $results = Send-HPOVRequest $volumeNameOrUri DELETE -addHeader @{exportOnly = [bool]$exportOnly}
            }
            else 
            {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User cancelled volume remove request or passed -WhatIf."
            
            }

            $taskResults += $results
        }

    }



    end {

        $taskResults

    }

}

function Get-HPOVSanManager 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param (

        [parameter(Position = 0, Mandatory = $false, HelpMessage = "Enter the SAN Manager Hostname or IP Address.")]
        [ValidateNotNullOrEmpty()]
        [Alias('Name')]
        [string]$SanManager = $Null,

		[parameter(Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$SanManagerCollection = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($Appliance.Count))"

			if ($SanManager)
			{
				
				$SanManager = $SanManager -replace ("[*]","%25") -replace ("[&]","%26")

			}


			#Send Request
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of SAN Managers"

			Try
			{

				$_sanManagers = Send-HPOVRequest ($fcSanManagersUri + "?sort=name:asc") -Hostname $_connection.Name

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			#Filter results for specific SAN Manager
			if ($SanManager) 
			{ 
			
			    $_sanManagers.members = $_sanManagers.members | ? name -eq $SanManager

			    #Generate Terminating Error if resource not found
			    if (-not($_sanManagers.members)) 
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Requested Managed SAN '$($SanManager)' not found on $($_connection.Name)."
			            
			        $errorRecord = New-ErrorRecord InvalidOperationException SanManagerResourceNotFound ObjectNotFound 'SanManager' -Message "Request SAN Manager '$($SanManager)' not found on $($_connection.Name).  Please check the name and try again." #-verbose
			            
			        #Generate Terminating Error
			        $PSCmdlet.ThrowTerminatingError($errorRecord)

			    }

			}

			if (-not($_sanManagers.members)) 
			{

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No SAN Managers found."
			            
			}

			else 
			{

				$_sanManagers.members | % { 
					
					$_.PSObject.TypeNames.Insert(0,"HPOneView.Storage.SanManager") 
				
					[void]$SanManagerCollection.Add($_)
				
				}

			}

		}

    }

    End 
	{

        Return $SanManagerCollection

    }

}

function Add-HPOVSanManager 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "BNA")]
    Param 
	(

        [parameter(Mandatory = $true, HelpMessage = "Specify the SAN Manager Type.  Accepted values are: BNA or HP.", Position = 0, ParameterSetName = "HPCisco")]
		[parameter(Mandatory = $true, HelpMessage = "Specify the SAN Manager Type.  Accepted values are: BNA or HP.", Position = 0, ParameterSetName = "BNA")]
        [ValidateSet("Brocade","BNA","Brocade Network Advisor","HP","Cisco")]
        [string]$Type,

		[parameter(Mandatory = $true, HelpMessage = "Enter the SAN Manager Hostname or IP Address.", Position = 1, ParameterSetName = "HPCisco")]
        [parameter(Mandatory = $true, HelpMessage = "Enter the SAN Manager Hostname or IP Address.", Position = 1, ParameterSetName = "BNA")]
        [ValidateNotNullOrEmpty()]
        [string]$Hostname = $null,

		[parameter(Mandatory = $false, HelpMessage = "Enter the SAN Manager TCP Port (HTTPS port for BNA, SNMP Port for HP).", Position = 2, ParameterSetName = "HPCisco")]
        [parameter(Mandatory = $false, HelpMessage = "Enter the SAN Manager TCP Port (HTTPS port for BNA, SNMP Port for HP).", Position = 2, ParameterSetName = "BNA")]
        [ValidateNotNullOrEmpty()]
        [ValidateRange(1,65535)]
        [int]$Port = 0,
         
		[parameter(Mandatory = $true, HelpMessage = "Enter the administrative user name (i.e. Administrator).", Position = 3, ParameterSetName = "HPCisco")]
        [parameter(Mandatory = $true, HelpMessage = "Enter the administrative user name (i.e. Administrator).", Position = 3, ParameterSetName = "BNA")]
        [ValidateNotNullOrEmpty()]
        [string]$Username = $Null,

		[parameter(Mandatory = $true, HelpMessage = "Enter the administrative account password (i.e. password).", Position = 4, ParameterSetName = "HPCisco")]
        [parameter(Mandatory = $true, HelpMessage = "Enter the administrative account password (i.e. password).", Position = 4, ParameterSetName = "BNA")]
        [ValidateNotNullOrEmpty()]
        [string]$Password = $Null,

		[parameter(Mandatory = $true, HelpMessage = "Enter the SNMPv3 User Account.", ParameterSetName = "HPCisco")]
		[string]$SnmpUserName,

		[parameter(Mandatory = $false, HelpMessage = "Enter the SNMPv3 Authentication Level 'None', 'AuthOnly', or 'AuthAndPriv'", ParameterSetName = "HPCisco")]
		[ValidateSet("None","AuthOnly","AuthAndPriv")]
		[ValidateNotNullOrEmpty()]
		[string]$SnmpAuthLevel = "None",

		[parameter(Mandatory = $false, HelpMessage = "Enter the SNMPv3 Authentication Encryption Protocol SHA or MD5", ParameterSetName = "HPCisco")]
		[ValidateSet("sha","md5")]	
		[ValidateNotNullOrEmpty()]
		[string]$SnmpAuthProtocol,

		[parameter(Mandatory = $false, HelpMessage = "Enter the SNMPv3 Authentication account password (i.e. password).", ParameterSetName = "HPCisco")]
		[ValidateNotNullOrEmpty()]
		[string]$SnmpAuthPassword,

		[parameter(Mandatory = $false, HelpMessage = "Enter the SNMPv3 Privacy Protocol DES or AES", ParameterSetName = "HPCisco")]
		[ValidateSet("aes-128","des56","3des")]	
		[ValidateNotNullOrEmpty()]
		[string]$SnmpPrivProtocol,

		[parameter(Mandatory = $false, HelpMessage = "Enter the SNMPv3 Privacy Password", ParameterSetName = "HPCisco")]
		[ValidateNotNullOrEmpty()]
		[string]$SnmpPrivPassword,

	    [parameter(Mandatory = $false, ParameterSetName = "BNA")]
	    [switch]$UseSsl,
		
		[parameter(Mandatory = $false)]
		[switch]$Async,

		[parameter(Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
    {
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$TaskCollection = New-Object System.Collections.ArrayList

		if ($SnmpAuthLevel -eq "AuthOnly" -and 
			(-not $SnmpAuthProtocol -or 
			-not $SnmpAuthPassword)) 
		{

			#Generate Terminateing error
            $errorRecord = New-ErrorRecord HPOneView.SanManagerResourceException MissingRequiredParameters InvalidArgument 'Add-HPOVSanManager' -Message "The -SnmpAuthLevel parameter was set to 'AuthOnly', but did not include both -SnmpAuthProtocol and -SnmpAuthPassword parameters." #-verbose
            $PsCmdlet.ThrowTerminatingError($errorRecord)
		}

		if ($SnmpAuthLevel -eq "AuthAndPriv" -and (
			-not $SnmpAuthProtocol -or 
			-not $SnmpAuthPassword -or 
			-not $SnmpPrivProtocol -or 
			-not $SnmpPrivPassword )) 
		{

			#Generate Terminateing error
            $errorRecord = New-ErrorRecord HPOneView.SanManagerResourceException MissingRequiredParameters InvalidArgument 'Add-HPOVSanManager' -Message "The -SnmpAuthLevel parameter was set to 'AuthAndPriv', but did not include -SnmpAuthProtocol, -SnmpAuthPassword, -SnmpPrivProtocol and -SnmpPrivPassword parameters." #-verbose
            $PsCmdlet.ThrowTerminatingError($errorRecord)
		}

		#Cisco MDS/Nexus SNMP Auth parameter validation
		if ($type -eq 'Cisco' -and $SnmpAuthLevel -eq 'None')
		{

			$errorRecord = New-ErrorRecord HPOneView.SanManagerResourceException UnsupportedSnmpAuthLevel InvalidArgument 'SnmpAuthLevel' -Message "The -SnmpAuthLevel parameter value $($SnmpAuthLevel) is invalid for configuring a Cisco SAN Manager.  Please specify either 'AuthOnly' or 'AuthAndPriv' and try again." #-verbose
            $PsCmdlet.ThrowTerminatingError($errorRecord)

		}

		#Cisco MDS/Nexus SNMP Auth parameter validation
		if ($type -eq 'Cisco' -and $SnmpPrivProtocol -eq '3DES')
		{

			$errorRecord = New-ErrorRecord HPOneView.SanManagerResourceException UnsupportedSnmpPrivProtocol InvalidArgument 'SnmpPrivProtocol' -Message "The -SnmpPrivProtocol parameter value $($SnmpPrivProtocol) is invalid for configuring a Cisco SAN Manager.  Please specify either 'des56' or 'aes-128' and try again." #-verbose
            $PsCmdlet.ThrowTerminatingError($errorRecord)

		}

		switch ($SnmpAuthLevel)
		{

			"None"
			{
			
				$SnmpAuthLevel = 'NOAUTHNOPRIV'
			
			}
			
			"AuthOnly"
			{
			
				$SnmpAuthLevel = 'AUTHNOPRIV'
			
			}
			
			"AuthAndPriv"
			{
			
				$SnmpAuthLevel = 'AUTHPRIV'

			}

		}

	}

    Process 
	{

		ForEach ($_connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($_connection.Name) (of $($ApplianceConnection.Count))"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SAN Manager Type requested: $Type"

			#Basic SAN Manager Object
			$_sanmanager = NewObject -SanManager

			$_sanmanagerhostconnectinfo = NewObject -SanManagerConnectInfo
			$_sanmanagerhostconnectinfo.name = "Host"
			$_sanmanagerhostconnectinfo.Value = $Hostname
			[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)

			$_sanmanagerhostconnectinfo = NewObject -SanManagerConnectInfo
			$_sanmanagerhostconnectinfo.name = "Username"
			$_sanmanagerhostconnectinfo.Value = $Username
			[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)

			$_sanmanagerhostconnectinfo = NewObject -SanManagerConnectInfo
			$_sanmanagerhostconnectinfo.name = "Password"
			$_sanmanagerhostconnectinfo.Value = $Password
			[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)

			#Get SAN Manager Providers
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting available SAN Manager Providers"
			
			$_SanManagerProviders = Send-HPOVRequest $script:fcSanManagerProvidersUri -Hostname $_connection.Name

			switch ($type) 
			{
				
				{ @('Brocade','BNA','Brocade Network Advisor') -contains $_ } 
				{ 
					
					if ($Port -eq 0) 
					{ 
						
						$Port = 5989 
					
					}

					$_SanManagerProviderUri = ($_SanManagerProviders.members | ? name -eq 'Brocade San Plugin').deviceManagersUri

					$_sanmanagerhostconnectinfo       = NewObject -SanManagerConnectInfo
					$_sanmanagerhostconnectinfo.name  = "UseSsl"
					$_sanmanagerhostconnectinfo.Value = [bool]$UseSsl
					[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)
					
					$_sanmanagerhostconnectinfo       = NewObject -SanManagerConnectInfo
					$_sanmanagerhostconnectinfo.name  = "Port"
					$_sanmanagerhostconnectinfo.Value = $Port
					[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)

				}

				{ @("HP","Cisco") -contains $_ } 
				{ 

					if ($Port -eq 0) 
					{ 
						
						$Port = 161 
					
					}

					$_SanManagerProviderUri = ($_SanManagerProviders.members | ? name -eq 'HP San Plugin').deviceManagersUri

					$_sanmanagerhostconnectinfo       = NewObject -SanManagerConnectInfo
					$_sanmanagerhostconnectinfo.name  = "SnmpPort"
					$_sanmanagerhostconnectinfo.Value = [bool]$Port
					[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)

					$_sanmanagerhostconnectinfo       = NewObject -SanManagerConnectInfo
					$_sanmanagerhostconnectinfo.name  = "SnmpUserName"
					$_sanmanagerhostconnectinfo.Value = [bool]$SnmpUserName
					[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)

					$_sanmanagerhostconnectinfo       = NewObject -SanManagerConnectInfo
					$_sanmanagerhostconnectinfo.name  = "SnmpAuthLevel"
					$_sanmanagerhostconnectinfo.Value = $fcSanManagerSnmpAuthLevel[$SnmpAuthLevel]
					[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)

					$_sanmanagerhostconnectinfo       = NewObject -SanManagerConnectInfo
					$_sanmanagerhostconnectinfo.name  = "SnmpAuthProtocol"
					$_sanmanagerhostconnectinfo.Value = $SnmpAuthProtocol.ToLower()
					[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)

					$_sanmanagerhostconnectinfo       = NewObject -SanManagerConnectInfo
					$_sanmanagerhostconnectinfo.name  = "SnmpAuthString"
					$_sanmanagerhostconnectinfo.Value = $SnmpAuthPassword
					[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)
					
					$_sanmanagerhostconnectinfo       = NewObject -SanManagerConnectInfo
					$_sanmanagerhostconnectinfo.name  = "SnmpPrivProtocol"
					$_sanmanagerhostconnectinfo.Value = $SnmpPrivProtocol.ToLower()
					[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)

					$_sanmanagerhostconnectinfo       = NewObject -SanManagerConnectInfo
					$_sanmanagerhostconnectinfo.name  = "SnmpPrivString"
					$_sanmanagerhostconnectinfo.Value = $SnmpPrivPassword
					[void]$_sanmanager.connectionInfo.Add($_sanmanagerhostconnectinfo)

				}

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SAN Manager Provider URI: $($_SanManagerProviderUri)"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New SAN Manager Request: $($_sanmanager.connectionInfo | out-string)"

			try 
			{
			
			    $resp = Send-HPOVRequest $_SanManagerProviderUri POST $_sanmanager -Hostname $_connection.Name

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received async task, calling Wait-HPOVTaskComplete"

			    $resp = Wait-HPOVTaskComplete $resp

			}

			catch 
			{

				if ($_.FullyQualifiedErrorId -eq 'RESOURCE_CONFLICT_ERROR')
				{

					$errorRecord = New-ErrorRecord HPOneView.SanManagerResourceException SanManagerAlreadyExists ResourceExists 'Hostname' -Message "The SAN Manager $($Hostname) already exists on appliance $($_connection.Name)." -InnerException $_.Exception

				}

				else
				{

					$errorRecord = $_.Exception

				}
				
			    $PsCmdlet.ThrowTerminatingError($errorRecord)

			}

			[void]$TaskCollection.Add($resp)

		}

    }

	End
	{

		Return $TaskCollection

	}

}

function Set-HPOVSanManager {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param (
        [parameter(Mandatory = $true,
        HelpMessage = "Specify the SAN Manager Name.")]
        [ValidateNotNullOrEmpty()]
        [string]$Name = "",

        [parameter(Mandatory = $false,
        HelpMessage = "Specify the new Hostname or IP Address of the SAN Manager.")]
        [ValidateNotNullOrEmpty()]
        [string]$Hostname = "",

        [parameter(Mandatory = $false,
        HelpMessage = "Specify the new TCP Port number of the SAN Manager.")]
        [ValidateNotNullOrEmpty()]
        [ValidateRange(1,65535)]
        [Int]$Port = 0,
                 
        [parameter(Mandatory = $false,
        HelpMessage = "Enter the administrative user name (i.e. 3paradm).")]
        [ValidateNotNullOrEmpty()]
        [string]$Username = "",

        [parameter(Mandatory = $false,
        HelpMessage = "Enter the administrative account password (i.e. 3pardata).")]
        [ValidateNotNullOrEmpty()]
        [string]$Password = "" 

    )

    begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError $script:HPOneViewAppliance -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    process {

        #Generate Terminating Error if resource no parameters were provided.
        if (! $Hostname -and ! $Username -and ! $Password -and ! $Port) {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! No parameter values were provided.  At least one optional parameter (Hostname, Port, Username or Password) must be provided."
                    
            $errorRecord = New-ErrorRecord ArgumentNullException ParametersNotSpecified InvalidArgument 'Set-HPOVSanManager' -Message "No parameter values were provided.  At least one optional parameter (Hostname, Port, Username or Password) must be provided." #-verbose
                    
            #Generate Terminating Error
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        #Get SAN Manager URI
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting available SAN Managers"
        $resp = (Send-HPOVRequest $script:fcSanManagersUri).members | where { $_.name -eq $Name }
        $Manager = [pscustomobject]@{connectionInfo = @(); eTag = $resp.eTag}

        #Generate Terminating Error if resource not found
        if (! $resp) {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! Request SAN Manager '$($SanManager)' not found."
                    
            $errorRecord = New-ErrorRecord InvalidOperationException SanManagerResourceNotFound ObjectNotFound 'Set-HPOVSanManager' -Message "Request SAN Manager '$($Name)' not found.  Please check the name and try again." #-verbose
                    
            #Generate Terminating Error
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        if ($Hostname) { $Manager.connectionInfo += [pscustomobject]@{name = "Host"; value = $Hostname} }
        if ($Port)     { $Manager.connectionInfo += [pscustomobject]@{name = "Port"; value = $Port} }
        if ($Username) { $Manager.connectionInfo += [pscustomobject]@{name = "Username"; value = $Username } }
        if ($Password) { $Manager.connectionInfo += [pscustomobject]@{name = "Password"; value = $Password } }

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updated SAN Manager: $($Manager | out-string)"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"

        $resp = Send-HPOVRequest $resp.uri PUT $Manager

        return $resp

    }

}

function Update-HPOVSanManager {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param (

        [parameter(Mandatory = $true, ValueFromPipeline = $true, HelpMessage = "Enter the Managed SAN Name.")]
        [ValidateNotNullOrEmpty()]
        [Alias('Name')]
        [Object]$SANManager = $Null

    )

    begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError "Update-HPOVSanManager" -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }
        
        #Validate SAN Manager Name Object Type
        if ($SANManager -is [String] -and (! $SANManager.StartsWith($script:fcSanManagersUri))) {
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SANManager name passed:  $($SANManager)"
            $SANManager = Get-HPOVSanManager -Name $SANManager            
        
        }

        elseif ($SANManager -is [String] -and $SANManager.StartsWith($script:fcSanManagersUri)) {
        
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LogicalInterconnect URI passed:  $($SANManager)"
            $SANManager = Send-HPOVRequest $SANManager

        }


        elseif ($SANManager -is [String]) {
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] invalid SANManager passed:  $($SANManager)"
            $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Update-SANManager' -Message "The 'SANManager' parameter value '$($SANManager)' is invalid.  Please check the parameter value and try again." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)
        
        }

        else {

            if ($PSBoundParameters.ContainsKey("SANManager")) {
            
    	        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SANManager parameter data type: $($SANManager.gettype() | out-string)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($SANManager.count)' SANManagers."

            }

            else { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SANManager parameter passed via pipeline?" }
        
        }

        $resp = @()

    }

    process {

        $request = [PsCustomObject]@{refreshState = "RefreshPending"}

        foreach ($manager in $SANManager) {

            if ($manager.isInternal) { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($manager.name)' SAN Manager is internal.  Skipping." }

            else {
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($manager.name)'."

                $resp += @(Send-HPOVRequest $manager.uri PUT $request)

            }
      
        }

    }

    end {

        Return $resp

    }

}

function Remove-HPOVSanManager {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param (

        [parameter(Mandatory = $true,ValueFromPipeline = $true, HelpMessage = "Enter the SAN Manager Name, or provide SAN Manager Resource.")]
        [ValidateNotNullOrEmpty()]
        [Alias('Name')]
        [object]$SanManager = $Null

    )

    begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError $script:HPOneViewAppliance -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }


    process {

        if (($SanManager -is [Hashtable] -or $SanManager -is [PsCustomObject] -or $SanManager -is [Array]) -and $SanManager.category -eq "fc-device-managers") { 

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SanManager Parameter is '$($SanManager.Gettype().Fullname)' type."
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SanManager contains $($SanManager.Count) items."
        
            foreach ($manager in $SanManager) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($manager.Name)'"
        
                #Check to make sure the request SAN Manager is not an Internal Type, especially the Local Direct Attach Manager
                if ($manager.isInternal) {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! Internal SAN Manager was requested to be processed.  Generating non-terminating error."
                    
                    $errorRecord = New-ErrorRecord InvalidOperationException CannotDeleteInternalResource InvalidOperation 'Remove-HPOVSanManager' -Message "Unable to remove an internal SAN Manager resource.  '$($manager.name)' SAN Manager was requested to be removed." #-verbose
                    
                    #Generate Non-Terminating Error
                    $PSCmdlet.WriteError($errorRecord)
                }

                else {

                    if ($pscmdlet.ShouldProcess($manager.Name,"Remove SAN Manager from appliance?")){
                        if ([bool]$force) { Remove-HPOVResource -nameOrUri $manager.uri -force }
                        else { Remove-HPOVResource -nameOrUri $manager } 
                        #Remove-HPOVResource -nameOrUri $enclosureNameOrUri -force $force
                    }

                }

            }
        
        }

        #Expecting a URI to resource
        elseif ($SanManager -is [String] -and $SanManager.startswith("/rest/fc-sans/device-managers/") ){

            #Check to see if the resource exists
            $Manager = Send-HPOVRequest $SanManager
        
            if ($Manager -and $Manager.category -eq "fc-device-managers") {

                if ($pscmdlet.ShouldProcess($Manager.Name,"Remove SAN Manager from appliance?")){    
                    if ([bool]$force) { Remove-HPOVResource -nameOrUri $manager.uri -force }
                    else { Remove-HPOVResource -nameOrUri $manager } 
                    #Remove-HPOVResource -nameOrUri $Manager.uri
                }
                  
            }

            #Generate Terminating Error
            else {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! URI is not a valid SAN Manager.  Expected resource Category: 'fc-device-managers'.  Received resource Category: '$($Manager.category)'"
                    
                $errorRecord = New-ErrorRecord InvalidOperationException WrongCategoryType InvalidResult 'Remove-HPOVSanManager' -Message "URI is not a valid SAN Manager.  Expected resource Category: 'fc-device-managers'.  Received resource Category: '$($Manager.category)'" #-verbose
                    
                #Generate Terminating Error
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

        }

        #Expecting Resource Name
        elseif ($SanManager -is [String] ){
        
            #"?filter=name='$TaskName'"

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to look for '$($SanManager)'."
            $Manager = (Send-HPOVRequest $script:fcSanManagersUri).members | where { $_.name -eq $sanManager }

            #Generate Terminating Error if resource not found
            if (! $Manager) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! Request SAN Manager '$($SanManager)' not found."
                    
                $errorRecord = New-ErrorRecord InvalidOperationException SanManagerResourceNotFound ObjectNotFound 'Remove-HPOVSanManager' -Message "Request SAN Manager '$($SanManager)' not found.  Please check the name and try again." #-verbose
                    
                #Generate Terminating Error
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

            else {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found '$($SanManager)' SAN Manager."

                if ($pscmdlet.ShouldProcess($Manager.Name,"Remove SAN Manager from appliance?")){
                    if ([bool]$force) { Remove-HPOVResource -nameOrUri $manager.uri -force }
                    else { Remove-HPOVResource -nameOrUri $manager.uri }  
                    #Remove-HPOVResource -nameOrUri $Manager.uri
                
                }

            }
        
        }

        #Unrecognized SanManager value
        else {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! SanManager value is not recognized."
                    
            $errorRecord = New-ErrorRecord InvalidOperationException CannotDeleteInternalResource InvalidOperation 'Remove-HPOVSanManager' -Message "Unable to remove an internal SAN Manager resource.  '$($manager.name)' SAN Manager was requested to be removed." #-verbose
                    
            #Generate Non-Terminating Error
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

}

function Get-HPOVManagedSan 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
    Param 
	(

        [parameter(Mandatory = $false, HelpMessage = "Enter the Managed SAN Name.")]
        [ValidateNotNullOrEmpty()]
        [Alias('Fabric')]
        [string]$Name = $null,

		[parameter(Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$ManagedSansCollection = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($Appliance.Count))"

			$uri = $fcManagedSansUri

			if ($Name)
			{

				$Name = $Name -replace ("[*]","%25") -replace ("[&]","%26")

				$uri += "?query=name match '$Name'&sort=name:asc"

			}
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of Managed SANs"
			
			Try
			{

				$_managedSans = Send-HPOVRequest $uri -Hostname $_connection.Name

			}
			
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			if ($_managedSans.count -eq 0 -and $Name) 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! Requested Managed SAN '$($_managedSans)' not found."
                    
                $errorRecord = New-ErrorRecord InvalidOperationException ManagedSanResourceNotFound ObjectNotFound 'Name' -Message "Request Managed SAN '$($Name)' not found on appliance $($_connection.Name).  Please check the name and try again." #-verbose
                    
                #Generate Terminating Error
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

			else
			{

				$_managedSans.members | % { 
					
					$_.PSObject.TypeNames.Insert(0,"HPOneView.Storage.ManagedSan")
				
					[void]$ManagedSansCollection.Add($_)

				}

			}

		}

	}

	End 
	{

		return $ManagedSansCollection 
    
    }

}

function Set-HPOVManagedSan {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Enable")]
    Param (

        [parameter(Mandatory = $true, HelpMessage = "Enter the Managed SAN Name.",ValueFromPipeline = $true,ParameterSetName = "Enable",position=0)]
        [parameter(Mandatory = $true, HelpMessage = "Enter the Managed SAN Name.",ValueFromPipeline = $true,ParameterSetName = "Disable",position=0)]
        [parameter(Mandatory = $true, HelpMessage = "Enter the Managed SAN Name.",ValueFromPipeline = $true,ParameterSetName = "DisableAlias",position=0)]
        [ValidateNotNullOrEmpty()]
        [Alias('Fabric','Name')]
        [object]$ManagedSan = $Null,

        [parameter(Mandatory = $false, HelpMessage = "Enable Automated Zoning for the specified Managed SAN.",ParameterSetName = "Enable")]
        [parameter(Mandatory = $false, HelpMessage = "Enable Automated Zoning for the specified Managed SAN.",ParameterSetName = "DisableAlias")]
        [Alias('ZoningEnable','Enable')]
        [switch]$EnableAutomatedZoning,

        [parameter(Mandatory = $false, HelpMessage = "Disable Automated Zoning for the specified Managed SAN.",ParameterSetName = "Disable")]
        [Alias('ZoningDisable','Disable')]
        [switch]$DisableAutomatedZoning,

        [parameter(Mandatory = $false, HelpMessage = "helpmsg", ParameterSetName = "Enable")]
        [parameter(Mandatory = $false, HelpMessage = "helpmsg", ParameterSetName = "Disable")]
        [parameter(Mandatory = $false, HelpMessage = "helpmsg", ParameterSetName = "DisableAlias")]
		[ValidateSet("NoZoning","SingleInitiatorAllTargets","SingleInitiatorSingleStorageSystem")]
		[ValidateNotNullOrEmpty()]
		[string]$ZoningPolicy = $Null,
      
        [parameter(Mandatory = $false,ParameterSetName = "Enable")]
        [switch]$EnableAliasing,

        [parameter(Mandatory = $false,ParameterSetName = "DisableAlias")]
        [switch]$DisableAliasing,

        [parameter(Mandatory = $false, HelpMessage = "helpmsg",ParameterSetName = "Enable")]
		[ValidateNotNullOrEmpty()]
		[string]$InitiatorNameFormat = $Null,

        [parameter(Mandatory = $false, HelpMessage = "helpmsg",ParameterSetName = "Enable")]
		[ValidateNotNullOrEmpty()]
		[string]$TargetGroupNameFormat = $Null,

        [parameter(Mandatory = $false, HelpMessage = "helpmsg",ParameterSetName = "Enable")]
		[ValidateNotNullOrEmpty()]
		[string]$TargetNameFormat = $Null,

        [parameter(Mandatory = $false, HelpMessage = "helpmsg",ParameterSetName = "Enable")]
		[ValidateNotNullOrEmpty()]
		[string]$ZoneNameFormat = $Null

    )

    begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Set-HPOVManagedSan' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        if ($EnableAutomatedZoning.IsPresent) { Write-Warning "Please note '-EnableAutomatedZoning' parameter is deprecated.  Setting Zoning Policy to default 'SingleInitiatorAllTargets'. To control Automated Zoning, please use the '-ZoningPolicy' parameter to specify an alternate Enabled Automated Zoning Policy setting." }
        if ($DisableAutomatedZoning.IsPresent) { Write-Warning "Please note '-DisableAutomatedZoning' parameter is deprecated.  Disabling Automated Zoning and Zoning Policy.  To control Automated Zoning, please use the '-ZoningPolicy' parameter." }

    }

    process {

        #Check to see if the input is Hashtable/PSCustomObject
        if (($ManagedSan -is [PsCustomObject] -and $ManagedSan.category -eq "fc-sans") -or ($ManagedSan -is [Array])) { 

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ManagedSan Parameter is '$($ManagedSan.Gettype().Fullname)' type."
            if ($managedSan -is [Array]) { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ManagedSan contains $($ManagedSan.Count) items." }

        }

        #Check to see if the input is type String and is URI
        elseif ($ManagedSan -is [String] -and $ManagedSan.startswith('/rest')) {
        
            $managedSan = Send-HPOVRequest $ManagedSan

            #Generate Terminating Error if resource not found
            if (! $managedSan) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! Requested Managed SAN '$($ManagedSan)' not found."
                    
                $errorRecord = New-ErrorRecord InvalidOperationException SanManagerResourceNotFound ObjectNotFound 'Set-HPOVManagedSan' -Message "Request SAN Manager '$($Name)' not found.  Please check the name and try again." #-verbose
                    
                #Generate Terminating Error
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }
        
        }

        #Check to see if the input is type String as it should be the Name of the Managed SAN
        elseif ($ManagedSan -is [String]) {

            $managedSan = (Send-HPOVRequest $script:fcManagedSansUri).members | where { $_.name -eq $ManagedSan }

            #Generate Terminating Error if resource not found
            if (! $managedSan) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Woops! Requested Managed SAN '$($ManagedSan)' not found."
                    
                $errorRecord = New-ErrorRecord InvalidOperationException SanManagerResourceNotFound ObjectNotFound 'Set-HPOVManagedSan' -Message "Request SAN Manager '$($Name)' not found.  Please check the name and try again." #-verbose
                    
                #Generate Terminating Error
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

        }

        foreach ($san in $ManagedSan) {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($san.Name)'"

            if (-not ($san.isInternal)) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($san.Name)'"

                $updateManagedSan = $san
                
                if ($EnableAutomatedZoning.IsPresent) { $updateManagedSan.sanPolicy.zoningPolicy = "SingleInitiatorAllTargets" }
                elseif ($DisableAutomatedZoning) { 
                
                    $updateManagedSan.sanPolicy.zoningPolicy = "NoZoning"

                    #Need to disable Aliasing Support as well with the request
                    $updateManagedSan.sanPolicy.enableAliasing = $false
                    
                }
                elseif ($ZoningPolicy) { 
                
                    $updateManagedSan.sanPolicy.zoningPolicy = $ZoningPolicy 
                    
                    #Need to disable Aliasing Support as well with the request
                    if ($ZoningPolicy -eq "NoZoning") { $updateManagedSan.sanPolicy.enableAliasing = $false }
                    
                }

                if ($EnableAliasing.IsPresent) { 
                    
                    $updateManagedSan.sanPolicy.enableAliasing = $True

                    if ($InitiatorNameFormat)   { $updateManagedSan.sanPolicy.initiatorNameFormat   = $InitiatorNameFormat }
                    if ($TargetGroupNameFormat) { $updateManagedSan.sanPolicy.targetGroupNameFormat = $TargetGroupNameFormat }
                    if ($TargetNameFormat)      { $updateManagedSan.sanPolicy.targetNameFormat      = $TargetNameFormat }
                    if ($ZoneNameFormat)        { $updateManagedSan.sanPolicy.zoneNameFormat        = $ZoneNameFormat }
                    
                }
                elseif ($DisableAliasing.IsPresent) { $updateManagedSan.sanPolicy.enableAliasing = $false }

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updated Managed SAN Object: $( $updateManagedSan | out-string )"

                [array]$resp += (Send-HPOVRequest -uri $san.uri -method PUT -body $updateManagedSan)
            }

            else { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($san.name)' Internal SAN Manager resource provided. SKipping." }

        }
       
    }

    end {
        
        Return $resp

    }

}

#######################################################
# Unmanaged Devices: 
#

function Get-HPOVUnmanagedDevice {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName='Default')]

    Param (

        [Parameter(Mandatory = $false, Position = 0, ParameterSetName = 'Default', HelpMessage = "Enter the name of the unmanaged device.")]
        [String]$Name,

        [Parameter(Mandatory = $false, ParameterSetName = 'Default')]
        [Alias('report')]
        [Switch]$List
    )

    Begin {
    
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
            
    }

    Process {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"

        $unmanagedDevices = Send-HPOVRequest $script:unmanagedDevicesUri

        if ($unmanagedDevices.count -eq 0 -and (-not ($name))) {  Write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No unmanaged devices found." }

        else {

            #Look for the specified name
            If ($name) { 
				
				$unmanagedDevices.members = $unmanagedDevices.members | ? name -like $name

				$unmanagedDevices.count = ($unmanagedDevices.members | Measure-Object).count
            
                #If not found, throw error
                if ($unmanagedDevices.count -eq 0) { 

					Write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($unmanagedDevices | Out-String)"

                    $errorRecord = New-ErrorRecord HPOneview.UnmanagedDeviceResourceException UnmangedDeviceResouceNotFound ObjectNotFound 'Name' -Message "The '$($name)' Unmanaged Device resource was not found. Please check the name and try again." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                
                }

            }

		}

		Write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($unmanagedDevices | Out-String)"

	}

	End {

		if ($unmanagedDevices.count -gt 0) { $unmanagedDevices | % { $_.PSObject.TypeNames.Insert(0,"HPOneView.UnmanagedResource") } }

		return $unmanagedDevices.members

    }

}

function New-HPOVUnmanagedDevice {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName='Default')]

    Param (

        [Parameter(Mandatory = $true, Position = 0, ParameterSetName = 'Default', HelpMessage = "Enter the name of the unmanaged device.")]
        [ValidateNotNullOrEmpty()]
        [String]$Name,

        [Parameter(Mandatory = $true, Position = 1, ParameterSetName = 'Default', HelpMessage = "Provide a device model description (e.g. HPN 5900CP).")]
        [ValidateNotNullOrEmpty()]
        [string]$model,

        [Parameter(Mandatory = $true, Position = 2, ParameterSetName = 'Default', HelpMessage = "Enter the Rack Unit height (e.g. 1).")]
        [ValidateNotNullOrEmpty()]
        [int]$height,

        [Parameter(Mandatory = $true, Position = 3, ParameterSetName = 'Default', HelpMessage = "Enter the max power consumption in WATTS (e.g. 300).")]
        [ValidateNotNullOrEmpty()]
        [int]$maxPower
    )

    Begin {
    
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }
            
    }

    Process {
        
        $newDevice = [pscustomobject]@{ name = $Name; model = $model; height = $height; maxPwrConsumed = $maxPower }

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New Unmanaged Device:  $($newDevice)"
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"

        $resp = Send-HPOVRequest $script:unmanagedDevicesUri POST $newDevice

		 $resp | % { $_.PSObject.TypeNames.Insert(0,"HPOneView.UnmanagedResource") }
        return $resp

    }

}

function Remove-HPOVUnmanagedDevice {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]

    Param (
        [parameter(Mandatory = $true,ValueFromPipeline = $true,ParameterSetName = "default",
            HelpMessage = "Enter the the Unmanaged Device to be removed.")]
        [ValidateNotNullOrEmpty()]
        [Alias("uri")]
        [Alias("name")]
        [object]$UnmanagedDevice = $null,

	    [parameter(Mandatory = $false)]
	    [switch]$force
    )

    Begin {
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
 
        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    Process {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

        foreach ($device in $UnmanagedDevice) {

            $deviceNameOrUri = $null
            $deviceDisplayName = $null

            if ($device -is [String]) {

                $deviceNameOrUri = $device
                $deviceDisplayName = $device

            }
            elseif ($device -is [PSCustomObject] -and $device.category -ieq 'unmanaged-devices') {

                $deviceNameOrUri = $device.uri
                $deviceDisplayName = $device.name

            }
            else {

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "Invalid UnmanagedDevice parameter: $($device | out-string)" #-verbose
                $pscmdlet.WriteError($errorRecord)

            }

            if (!$deviceNameOrUri) {

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "Could not determine the name or URI from the parameter value provided: $($device | out-string)" #-verbose
                $pscmdlet.WriteError($errorRecord)

            }
            elseif ($pscmdlet.ShouldProcess($deviceDisplayName,'Remove unmanaged device from appliance?')){

                if ([bool]$force) { Remove-HPOVResource -nameOrUri $deviceNameOrUri -force }

                else { Remove-HPOVResource -nameOrUri $deviceNameOrUri }

            }

        } 

    }

}

#######################################################
# Power Delivery Devices
#

function Get-HPOVPowerDevice {
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding()]
	Param (
		[parameter(Mandatory = $false, Position = 0)]
		[string]$name = $null,
        
        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	)

    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_.Exception)

			}

			$c++

		}
        
        $_Collection = New-Object System.Collections.ArrayList
    }

    Process {

        ForEach ($_Connection in $ApplianceConnection) {

            $ipdus = Send-HPOVRequest $powerDevicesUri -appliance $_Connection #($powerDevicesUri + "?filter=`"name matches '$name'`"")
            #Set-DefaultDisplay $ipdus.members -defProps 'name', 'serialNumber', 'model', 'deviceType', 'uri'

            $ipdus.members | % { $_.psobject.typenames.Insert(0,”HPOneView.PowerDeliveryDevice") }

            if ($name) { 
                #$resource = $ipdus.members | Where-Object {$_.name -eq $name}
                $ipdus.members | Where-Object {$_.name -eq $name} | ForEach-Object {[void]$_Collection.Add($_)}
                #[void]$_Collection.Add($resource) 
            }
            else { 
                #$resource = $ipdus.members
                $ipdus.members | ForEach-Object {[void]$_Collection.Add($_)}
                #[void]$_Collection.Add($resource)  
            }

        }
    }

    End {

        if (-not ($_Collection) -and $name) {

            $errorRecord = New-ErrorRecord HPOneView.PowerDeliveryDeviceException ResourceNotFound ObjectNotFound "Name" -Message "The specific '$name' iPDU was not found." #-verbose
            $pscmdlet.WriteError($errorRecord)

        }

        $_Collection
        
        Write-Verbose "Done. $($_Collection.count) Power Delivery Device(s) found."

    }

}

function Add-HPOVPowerDevice 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(SupportsShouldProcess = $true,ConfirmImpact = "High")]
    Param 
	(

        [parameter(Mandatory, HelpMessage = "Enter the host name (FQDN) or IP of the iPDU's management processor.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [string]$Hostname,
         
        [parameter(Mandatory, HelpMessage = "Enter the iPDU administrative user name.", Position = 1)]
        [ValidateNotNullOrEmpty()]
        [string]$Username = "",

        [parameter(Mandatory, HelpMessage = "Enter the iPDU administrative account password.", Position = 2)]
        [ValidateNotNullOrEmpty()]
        [string]$Password = "",

	    [parameter(Mandatory = $false)]
	    [switch]$Force,

		[parameter(Mandatory)]
		[ValidateNotNullorEmpty()]
		[object]$ApplianceConnection = $null

    )

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$colStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

        #Locate the Enclosure Group specified
        write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Starting"

        $_import = NewObject -PowerDeliveryDeviceAdd
		
        $_import.hostname = $hostname
        $_import.username = $username
        $_import.password = $password
        $_import.force    = $Force.IsPresent

        write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Sending request to add iPDU."

		Try
		{

			$_resp = Send-HPOVRequest $powerDevicesDiscoveryUri POST $_import -Hostname $ApplianceConnection.Name

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}
        
        #Wait for task to get into Starting stage
        Try
		{

			$_resp = Wait-HPOVTaskStart $_resp

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}
            
        write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Task response: $($_resp | out-string)"

        #Check to see if the task errored, which should be in the Task Validation stage
        if ($_resp.taskState -ne "Running" -and $_resp.taskState -eq "Error" -and $_resp.stateReason -eq "ValidationError") 
		{

            write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Task error found $($resp.taskState) $($resp.stateReason) "

            if ($_resp.taskerrors | Where-Object { $_.errorCode -eq "PDD_IPDU_TRAPRECEIVERACCOUNT_TAKEN" }) 
			{
                        
                $_errorMessage = $_resp.taskerrors | Where-Object { $_.errorCode -eq "PDD_IPDU_TRAPRECEIVERACCOUNT_TAKEN" }

                $_externalManagerIP = $_errorMessage.data.mgmtSystemIP

				Try
				{

					$_externalManagerFQDN = [System.Net.DNS]::GetHostByAddress($_externalManagerIP)

				}

				Catch
				{

					write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Couldn't resolve $_externalManagerIP to FQDN [$($_.Exception.Message)]."

					$_externalManagerFQDN = [PSCustomObject]@{HostName = $_externalManagerIP}

				}
                

                write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - Found iPDU '$Hostname' is already being managed by $_externalManagerIP."

                write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - $_externalManagerIP resolves to $($_externalManagerFQDN.HostName | out-string)"

                write-warning "iPDU '$Hostname' is already claimed by another management system $_externalManagerIP ($($_externalManagerFQDN.HostName))."

                if ($force -and $pscmdlet.ShouldProcess($Hostname,"iPDU is already claimed by another management system $_externalManagerIP ($($_externalManagerFQDN.HostName)). Force add?")) 
				{
		        	        
                    write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - iPDU is being claimed due to user chosing YES to force add."

                    $import.force = $true

					Try
					{
						
						$_resp = Send-HPOVRequest $script:powerDevicesDiscoveryUri POST $_import -Hostnamme $ApplianceConnection.Name

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

		        }

                elseif ($pscmdlet.ShouldProcess($Hostname,"iPDU is already claimed by another management system $_externalManagerIP ($($_externalManagerFQDN.HostName)). Force add?")) 
				{
		        	        
                    write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] - iPDU is being claimed due to user chosing YES to force add."

                    $import.force = $true

                    Try
					{
						
						$_resp = Send-HPOVRequest $script:powerDevicesDiscoveryUri POST $_import -Hostnamme $ApplianceConnection.Name

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

		        }

		        else 
				{

                    if ($PSBoundParameters['whatif'].ispresent) 
					{ 
                            
                        write-warning "-WhatIf was passed, would have force added '$Hostname' iPDU to appliance."

                        $_resp = $null
                            
                    }

                    else 
					{

		        	    #If here, user chose "No", end processing

		        	    write-warning "Not importing iPDU, $Hostname."

                        $_resp = $Null

                    }

		        }

            }

            else 
			{

                $_errorMessage = $_resp.taskerrors

                if ($_errorMessage -is [Array]) 
				{ 
                        
                    #Loop to find a Message value that is not blank.
                    $displayMessage = $errorMessage | ? { $_.message }

                    $errorRecord = New-ErrorRecord InvalidOperationException $displayMessage.errorCode InvalidResult 'Add-HPOVPowerDevice' -Message $displayMessage.message 
				
				}
                        
                else 
				{ 
					
					$errorRecord = New-ErrorRecord InvalidOperationException $errorMessage.errorCode InvalidResult 'Add-HPOVPowerDevice' -Message ($errorMessage.details + " " + $errorMessage.message) 
				
				}

                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

        }
    
        [void]$colStatus.Add($_resp)
    
    }

	End
	{

		Return $colStatus

	}

}

function Remove-HPOVPowerDevice {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param (
        [parameter(Mandatory = $true,ValueFromPipeline = $true,ParameterSetName = "default",
            HelpMessage = "Enter the the power-device to be removed.")]
        [ValidateNotNullOrEmpty()]
        [Alias("uri")]
        [Alias("name")]
        [object]$powerDevice = $null,

	    [parameter(Mandatory = $false)]
	    [switch]$force
    )

    Begin {
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
 
        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    Process {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

        foreach ($pd in $powerDevice) {

            $powerDeviceNameOrUri = $null
            $powerDeviceDisplayName = $null

            if ($pd -is [String]) {

                $powerDeviceNameOrUri = $pd
                $powerDeviceDisplayName = $pd

            }
            elseif ($pd -is [PSCustomObject] -and $pd.category -ieq 'power-devices') {

                $powerDeviceNameOrUri = $pd.uri
                $powerDeviceDisplayName = $pd.name

            }
            else {

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Remove-HPOVPowerDevice' -Message "Invalid powerDevice parameter: $pd" #-verbose
                $pscmdlet.WriteError($errorRecord)

            }

            if (!$powerDeviceNameOrUri) {

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Remove-HPOVPowerDevice' -Message "Invalid powerDevice parameter: $pd" #-verbose
                $pscmdlet.WriteError($errorRecord)

            }
            elseif ($pscmdlet.ShouldProcess($powerDeviceDisplayName,'Remove power device from appliance?')){

                if ([bool]$force) { Remove-HPOVResource -nameOrUri $powerDeviceNameOrUri -force }

                else { Remove-HPOVResource -nameOrUri $powerDeviceNameOrUri }

            }

        } 

    }

}

function Get-HPOVPowerPotentialDeviceConnection {

	# .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default")]
    Param (
        [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = "default", HelpMessage = "Specify the Power Device to retrive potential power connections of rack resources.")]
        [ValidateNotNullOrEmpty()]
        [Alias("uri")]
        [Alias("name")]
        [object]$powerDevice = $null
    )

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

        if (-not($global:cimgmtSessionId)) 
		{

            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

	}

	Process 
	{

		switch ($powerDevice.GetType().Name)
		{

			"String"
			{

				if ($powerDevice.StartsWith($script:powerDevicesUri))
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] powerDevice is [String] and URI"
					$uri = $script:powerDevicePotentialConnections + $powerDevice

				}

				elseif ($powerDevice.StartsWith('/rest/'))
				{

					$errorRecord = New-ErrorRecord HPOneView.Appliance.PowerDeviceException InvalidArgumentValue InvalidArgument 'powerDevice' -Message "The provided URI '$powerDevice' does not begin with '/rest/power-devices'.  Please check the value and try again." #-verbose
					$pscmdlet.ThrowTerminatingError($errorRecord)

				}

				else
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] powerDevice is [String] and power device name. Calling Get-HPOVPowerDevice."
					$uri = $script:powerDevicePotentialConnections + (Get-HPOVPowerDevice $powerDevice).uri

				}

			}

			"PSCustomObject"
			{

				if ($powerDevice.category -eq 'power-devices')
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] powerDevice is [PSCustomObject]"

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] powerDevice name: $($powerDevice.name)"

					$uri = $script:powerDevicePotentialConnections + $powerDevice.uri

				}

				else
				{

					$errorRecord = New-ErrorRecord HPOneView.Appliance.PowerDeviceException InvalidArgumentValue InvalidArgument 'powerDevice' -TargetType PSObject -Message "The provided power device object '$($powerDevice.name)' category '$($powerDevice.category)' does not match the required value 'power-devices'.  Please check the value and try again." #-verbose
					$pscmdlet.ThrowTerminatingError($errorRecord)

				}

			}

		}

		$resp = Send-HPOVRequest $uri

		if ($resp)
		{

			$resp | % { $_.PSObject.TypeNames.Insert(0,'HPOneView.PowerDevice.PotentialPowerConnection')}

		}

	}

	End 
	{

		Return $resp

	}

}

#######################################################
# Networking and Connections
#

function New-HPOVNetwork 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "Ethernet")]
    Param 
	(

		[parameter(Mandatory = $true, ParameterSetName = "FC",Position=0)]
		[parameter(Mandatory = $true, ParameterSetName = "Ethernet",Position=0)]
		[parameter(Mandatory = $true, ParameterSetName = "FCOE",Position=0)]
		[parameter(Mandatory = $true, ParameterSetName = "VLANIDRange",Position=0)]
		[string]$Name, 

		[parameter(Mandatory = $true, ParameterSetName = "FC",Position=1)]
		[parameter(Mandatory = $false, ParameterSetName = "Ethernet",Position=1)]
		[parameter(Mandatory = $false, ParameterSetName = "FCOE",Position=1)]
		[parameter(Mandatory = $false, ParameterSetName = "VLANIDRange",Position=1)]
		[ValidateSet("Ethernet", "FC", "FibreChannel", "Fibre Channel", "FCoE")]
		[string]$type = "Ethernet",
        
		[parameter(Mandatory = $true, ParameterSetName = "Ethernet",Position=2)] 
		[parameter(Mandatory = $true, ParameterSetName = "FCOE",Position=2)] 
		[int32]$vlanId,

		[parameter(Mandatory = $true, ParameterSetName = "VLANIDRange",Position=1)]
		[string]$vlanRange,

		[parameter(Mandatory = $false, ParameterSetName = "Ethernet",Position=3)] 
		[parameter(Mandatory = $false, ParameterSetName = "VLANIDRange",Position=2)]
		[ValidateSet('Untagged','Tagged','Tunnel')]
		[string]$VLANType = "Tagged", 

		[parameter(Mandatory = $false, ParameterSetName = "VLANIDRange")]
		[parameter(Mandatory = $false, ParameterSetName = "Ethernet")]
		[ValidateSet("General", "Management", "VMMigration", "FaultTolerance")]
		[string]$purpose = "General", 

		[parameter(Mandatory = $false, ParameterSetName = "VLANIDRange")]
		[parameter(Mandatory = $false, ParameterSetName = "Ethernet")]
		[boolean]$smartLink = $true, 

		[parameter(Mandatory = $false, ParameterSetName = "VLANIDRange")]
		[parameter(Mandatory = $false, ParameterSetName = "Ethernet")]
		[boolean]$privateNetwork = $false, 

		[parameter(Mandatory = $false, ParameterSetName = "VLANIDRange")]
		[parameter(Mandatory = $false, ParameterSetName = "Ethernet")]
		[parameter(Mandatory = $false, ParameterSetName = "FC")]
		[validaterange(2,20000)]
		[int32]$typicalBandwidth = 2500, 
        
		[parameter(Mandatory = $false, ParameterSetName = "VLANIDRange")]
		[parameter(Mandatory = $false, ParameterSetName = "Ethernet")]
		[parameter(Mandatory = $false, ParameterSetName = "FC")]
		[validaterange(100,20000)]
		[int32]$maximumBandwidth = 10000, 

		[parameter(Mandatory = $false, ParameterSetName = "FC")]
		[int32]$linkStabilityTime = 30, 

		[parameter(Mandatory = $false, ParameterSetName = "FC")]
		[boolean]$autoLoginRedistribution = $False,

		[parameter(Mandatory = $false, ParameterSetName = "FC")]
		[ValidateSet("FabricAttach","FA", "DirectAttach","DA")]
		[string]$fabricType = "FabricAttach",

		[parameter(Mandatory = $false, ParameterSetName = "FC", ValueFromPipeline = $True)]
		[parameter(Mandatory = $false, ParameterSetName = "FCOE", ValueFromPipeline = $True, Position = 3)] 
		[ValidateNotNullOrEmpty()]
		[object]$managedSan = $Null,

		[parameter(Mandatory = $false, ParameterSetName = "FC")]
		[parameter(Mandatory = $false, ParameterSetName = "Ethernet")]
		[parameter(Mandatory = $false, ParameterSetName = "FCOE")]
		[parameter(Mandatory = $false, ParameterSetName = "VLANIDRange")]
		[parameter(Mandatory = $false, ParameterSetName = "importFile")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

		[parameter(Mandatory = $true, ParameterSetName = "importFile", HelpMessage = "Enter the full path and file name for the input file.")]
		[Alias("i", "import")]
		[string]$importFile

    )

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{

				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

        if ($fcUplinkBandwidth) 
		{

            Write-Warning "FcUplinkBandwidth parameter has been deprecated and is no longer used. Please specify the Uplink Bandwidth when creating the Uplink Set using New-HPOVUplinkSet -FcUplinkSpeed parameter."

        }

		$colStatus = New-Object System.Collections.ArrayList

    }
     
    Process 
	{

		ForEach ($_appliance in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resolved Parameter Set Name: $($PsCmdLet.ParameterSetName)"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing CMDLET for '$($_appliance.name)' appliance."

			If ($importFile) 
			{

			    try 
				{

			        $network = [string]::Join("", (gc $importfile -ErrorAction Stop)) | convertfrom-json -ErrorAction Stop

			    }

			    catch [System.Management.Automation.ItemNotFoundException] 
				{

			        $errorRecord = New-ErrorRecord System.Management.Automation.ItemNotFoundException InputFileNotFound ObjectNotFound 'New-HPOVNetwork' -Message "$importFile not found.  Please check the filename or path is valid and try again." #-verbose
			            
			        #Generate Terminating Error
			        $PSCmdlet.ThrowTerminatingError($errorRecord)

			    }

			    catch [System.ArgumentException] 
				{

			        $errorRecord = New-ErrorRecord System.ArgumentException InvalidJSON ParseError 'New-HPOVNetwork' -Message "JSON incorrect or invalid within '$importFile' input file." #-verbose
			            
			        #Generate Terminating Error
			        $PSCmdlet.ThrowTerminatingError($errorRecord)

			    }

			}
			
			else
			{
			
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Type Requested: $($type)"

				switch ($type) 
				{

					"Ethernet" 
					{

					    if (-not $vlanRange) 
						{

						    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating '$name' Ethernet Network"

						    $network = NewObject -EthernetNetwork

							$network.vlanId              = $vlanId
							$network.ethernetNetworkType = $VLANType
							$network.purpose             = $purpose
							$network.name                = $Name
							$network.smartLink           = $smartLink
							$network.privateNetwork      = $privateNetwork

						}

					    else {
                    
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating bulk '$name' + '$vlanRange' Ethernet Networks"

							$network = NewObject -BulkEthernetNetworks

							$network.vlanIdRange                = $vlanRange
							$network.purpose                    = $purpose
							$network.namePrefix                 = $Name
							$network.smartLink                  = $smartLink
							$network.privateNetwork             = $privateNetwork
							$network.bandwidth.typicalBandwidth = $typicalBandwidth
							$network.bandwidth.maximumBandwidth = $maximumBandwidth
							        
						}

					}
					
					{ @("FC","FibreChannel","Fibre Channel") -contains $_ } {

					    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating '$name' FC Network"

						$network = NewObject -FCNetwork

						$network.name                    = $Name
						$network.linkStabilityTime       = $linkStabilityTime
						$network.autoLoginRedistribution = $autoLoginRedistribution
						$network.fabricType              = $fabricType
						$network.connectionTemplateUri   = $null
						$network.managedSanUri           = (VerifyManagedSan $managedSan $_appliance)

					    #If maxbandiwdth value isn't specified, 10Gb is the default value, must change to 8Gb
					    if ( $maximumBandwidth -eq 10000 ){ $maximumBandwidth = 8000 }

					}

					"FCOE" {

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating '$name' FCOE Network"

					    $network = NewObject -FCoENetwork

						$network.name                  = $Name
						$network.vlanId                = $vlanId
						$network.connectionTemplateUri = $null
						$network.managedSanUri         = (VerifyManagedSan $managedSan $_appliance)

					}

				}
			
			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Object:  $($network | fl | out-string)"
			
			foreach($net in $network) 
			{

			    if ($net.defaultTypicalBandwidth) { $typicalBandwidth = $net.defaultTypicalBandwidth }
			    if ($net.defaultMaximumBandwidth) { $maximumBandwidth = $net.defaultMaximumBandwidth }
			    if ($net.typicalBandwidth) { $typicalBandwidth = $net.typicalBandwidth }
			    if ($net.maximumBandwidth) { $maximumBandwidth = $net.maximumBandwidth }

			    switch ($net.type) 
				{

			        "ethernet-networkV3" 
					{

			            write-host "Creating Ethernet Network" $net.name 

			            $netUri = $script:ethNetworksUri

			            $net = $net | select name, type, vlanId, smartLink, privateNetwork, purpose, ethernetNetworkType, connectionTemplateUri

			        }

			        "fc-networkV2" 
					{

			            write-host "Creating FC Network" $net.name

			            $netUri = $script:fcNetworksUri

			            $net = $net | select name, linkStabilityTime, autoLoginRedistribution, type, fabricType, managedSanUri, connectionTemplateUri 

			        }

					"fcoe-network"
					{

						write-host "Creating FCoE Network" $net.name

			            $netUri = $script:fcoeNetworksUri

			            $net = $net | select name, type, vlanId, connectionTemplateUri, managedSanUri

					}

			        "bulk-ethernet-network" 
					{
			            
			            write-host "Creating bulk '$name' + '$vlanRange' Ethernet Networks"
			            $netUri = $script:ethNetworksUri + "/bulk"

			        }
			        
			        #Should never get here.  If so, this is an internal error we need to fix.
			        default 
					{

			            $errorRecord = New-ErrorRecord System.ArgumentException InvalidNetworkType InvalidType 'New-HPOVNetwork' -Message "(INTERNAL ERROR) The Network Resource Type $($net.type) is invalid for '$($net.name)' network." #-verbose
			            
			            #Generate Terminating Error
			            $PSCmdlet.ThrowTerminatingError($errorRecord)

			        }

			    }

				#Not sure why this is here
				#if ($net.connectionTemplateUri) { $net.connectionTemplateUri = $Null }

			    $objStatus = [pscustomobject]@{ 
					
					Name      = $net.Name; 
					Status    = $Null; 
					Details   = $Null;
					Exception = $Null;
				
				}

			    #Check if Network Type is Direct Attach and if ManagedFabric parameter is being called at the same time.
			    if (($fabricType -eq "DirectAttach" -or $fabricType -eq "DA") -and $managedfabric) { 

			        $objStatus.Details = "You specified a DirectAttach Fabric Type and passed the ManagedSan parameter.  The ManagedSan parameter is to be used for FabricAttach networks only."
			       
			    }

			    else 
				{
					 
					Try
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to create '$($net.name)' network."

						$task = Send-HPOVRequest $netUri POST $net -Hostname $_appliance 
					
					}	
					
					Catch
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Exception caught when trying to create '$($net.name)' network."

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Exception: $($_.Exception.Message.ToString())"

						$objStatus.Status    = "Failed"
						$objStatus.Details   = $_.exception.message
						$objStatus.Exception = $_

					}

				}

			    if (-not ($task.Uri)) {

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Create Network Object '$($net.name)' request was rejected."

			        $objStatus.Status = "Failed"
			        
			        #Do not want to overwrite the details value from the Fabric Type check above.
			        if ($task) { $objStatus.Details = $task }

			    }

			    else { 
			        
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Create Network Object '$($net.name)' creating. Monitor task."

			        #Wait for the network to be created
			        $task = Wait-HPOVTaskComplete $task -Appliance $_appliance

			        $objStatus.Status  = $task.taskState
			        $objStatus.Details = $task

			    }

			    [void] $colStatus.add($objStatus) #| Out-Null

				#Update Bandwidth allocation if set to different than default values
			    #if($objStatus.details.associatedResource.resourceUri) {
				if (($typicalBandwidth -or $maximumBandwidth) -and (-not($objStatus.Status -eq "Failed"))) 
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting bandwidth to network object"

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Network object to retrieve ConnectionTemplate URI"

					#Get network resource URI
			        $net = Send-HPOVRequest $objStatus.Details.associatedResource.resourceUri -Hostname $_appliance

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ConnectionTemplate URI '$($net.connectionTemplateUri)'"

			        if ($net -and $net.connectionTemplateUri) 
					{

			            $ctUri = $net.connectionTemplateUri

			            $ct = Send-HPOVRequest $ctUri -Hostname $_appliance

			            if ($ct -and $ct.bandwidth) 
						{

			                if ($typicalBandwidth) { $ct.bandwidth.typicalBandwidth = $typicalBandwidth }

			                if ($maximumBandwidth) { $ct.bandwidth.maximumBandwidth = $maximumBandwidth }

			                Set-HPOVResource -resource $ct -Appliance $_appliance | Out-Null

			            }

			        }

			    }

			}

		}

    }

    end {

        if ($colStatus | ? { $_.Status -ne "Completed" }) { write-error "One or more networks failed the creation attempt!" }

        Return $colStatus
        
    }
}

function VerifyManagedSan 
{

	[CmdLetBinding()]
    Param (
		[parameter (Mandatory = $false, Position = 0)]
		[Object]$managedSan,

		[parameter (Mandatory = $true, Position = 1)]		
		[object]$Appliance
    )
	
	Process {

        if ($managedSan -eq "" -or $managedSan -eq $Null) {
           
            $managedSanUri = $Null

        }

        elseif ($managedSan -is [PSCustomObject] -and $managedSan.category -eq 'fc-sans') 
		{ 
                    
            $managedSanUri = $managedSan.uri
                        
        }

        elseif ($managedSan -is [PSCustomObject] -and -not ($managedSan.category -eq 'fc-sans')) 
		{ 
                    
            $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidManagedSanUri InvalidArgument 'managedSan' -Message "The Managed SAN object category provided '$($managedSan.category)' is not the the expected value of 'fc-sans'. Please verify the parameter value and try again." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)   
                        
        }
                   
        elseif ($managedSan -is [String] -and $managedSan.StartsWith('/rest/')) 
		{ 
                    
            $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidManagedSanUri InvalidArgument 'managedSan' -Message "The Managed SAN Uri provided '$managedSan' is incorrect.  Managed SAN URI must begin with '/rest/fc-sans/managed-sans'." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)                       
                    
        }
                    
        elseif ($managedSan -is [String] -and (-not($managedSan.StartsWith($script:fcManagedSansUri)))) 
		{

			#Get ManagedSan object
            Try { $managedSanUri = (Get-HPOVManagedSan $managedSan -appliance $tmpApplianceName).uri }

			#If specified ManagedSan object does not exist, generate trappable error
			catch 
			{
		
				$errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidManagedSanName InvalidArgument 'managedSan' -Message "The Managed SAN Name provided '$managedSan' was not found." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)   

			}

        }

		else 
		{

			$managedSanUri = $managedSan

		}

		Return $managedSanUri

    }

}

function Get-HPOVNetwork 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param 
	(

		[parameter (Mandatory = $false, position = 0)]
		[String]$Name = $null,
		
		[parameter (Mandatory = $false, position = 1)]
		[ValidateSet("Ethernet","FC","FibreChannel","FCOE")]
		[String]$Type = $null,
		
		[parameter (Mandatory = $false, position = 2)]
		[ValidateSet("Management","FaultTolerance","General","VMMigration", IgnoreCase = $False)]
		[String]$Purpose,
		
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},
		
		[parameter (Mandatory = $false, position = 4)]
		[alias("x", "export")]
		[ValidateScript({split-path $_ | Test-Path})]
		[String]$exportFile
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if (-not($PSBoundParameters['type']))
		{
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] -Type parameter wasn't provided. Specifying all Network Resource Types."

			[Array]$type = "Ethernet","FibreChannel","FCOE"

		}

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$NetworkCollection = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			if ($name)
			{
				
				$name = $name -replace ("[*]","%25") -replace ("[&]","%26")

			}
			
			switch  ($type) 
			{

				{ @("FC", "FibreChannel") -contains $_ } 
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing FibreChannel Networks."

					if ($name) 
					{ 
			            
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for '$($name)' Fibre Channel Network resources."

						$FcNetsUri = $script:fcNetworksUri + "?filter=`"name matches '$name'`"&sort=name:ascending"

					}

					else 
					{
						
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for all Fibre Channel Network resources."

						$FcNetsUri = $script:fcNetworksUri + "?sort=name:ascending"
					
					}

					$FcNets = Send-HPOVRequest -uri $FcNetsUri -Hostname $Connection

					#Add to final collection arraylist
					if ($FcNets.members) 
					{ 
						
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding results to collection"

						$FcNets.members | % { 

							$_.psobject.typenames.Insert(0,”HPOneView.Networking.FibreChannelNetwork")  

							[void]$NetworkCollection.Add($_)
						
						} 

					}

			    }

			    { @("Ethernet") -contains $_ } 
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Ethernet Network resources."

			        if ($name) 
					{ 
			            
			            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for '$($name)' Ethernet Network resources."

			            $EnetsUri = $script:ethNetworksUri + "?filter=`"name matches '$name'`"&sort=name:ascending"

			        }

			        else 
					{  

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for all Ethernet Network resources."

						$EnetsUri = $script:ethNetworksUri + "?sort=name:ascending" 
						
					}

					$ENets = Send-HPOVRequest -uri $EnetsUri -Hostname $Connection
					
					#Add to final collection arraylist
					if ($ENets.members) 
					{ 

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding results to collection"

						$ENets.members | % { 

							$_.psobject.typenames.Insert(0,”HPOneView.Networking.EthernetNetwork")  

							[void]$NetworkCollection.Add($_)

						} 

					}

			    }

				{ @("FCoE") -contains $_ }
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for FCoE Network resources."

			        if ($name) 
					{ 
			            
			            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for '$($name)' FCoE Network resources."

			            $FCoEUri = $script:FCoENetworksUri + "?filter=`"name matches '$name'`"&sort=name:desc"

			        }

			        else 
					{  

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for all FCOE Network resources."

						$FCoEUri = $script:FCoENetworksUri + "?sort=name:desc" 
						
					}

					$FCoENets = Send-HPOVRequest -uri $FCoEUri -Hostname $Connection

					#Add to final collection arraylist
					if ($FCoENets.members) 
					{ 

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding results to collection"

						$FCoENets.members | % { 

							$_.psobject.typenames.Insert(0,”HPOneView.Networking.FCoENetwork")  
						
							[void]$NetworkCollection.Add($_)
						
						} 

					}

			    }

			}

		}

    }

    End 
	{

		#If network not found, report error
		if ((-not($NetworkCollection)) -and $name)
		{ 

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Resource Name was provided, yet no results were found.  Generate Error."

			$errorRecord = New-ErrorRecord HPOneView.NetworkResourceException NetworkResourceNotFound ObjectNotFound "Name" -Message "The specified '$name' Network resource were not found.  Please check the name and try again." #-verbose
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

        if ($NetworkCollection) 
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Results returned "

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Networks Found: $($NetworkCollection | fl * | out-string ) "

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Network resource Connection Template Object to add bandwidth values to network objects."

			ForEach ($NetObject in $NetworkCollection) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($NetObject.Name)' Network resource."

				if ($NetObject.connectionTemplateUri) 
				{

					$ct = Send-HPOVRequest -uri $NetObject.connectionTemplateUri -Hostname $NetObject.ApplianceConnection.Name
            
					Add-Member -InputObject $NetObject -NotePropertyName defaultMaximumBandwidth -NotePropertyValue $ct.bandwidth.maximumBandwidth -Force 
					Add-Member -InputObject $NetObject -NotePropertyName defaultTypicalBandwidth -NotePropertyValue $ct.bandwidth.typicalBandwidth -Force

				}
        
			}

			"[$($MyInvocation.InvocationName.ToString().ToUpper())] Done. {0} network resource(s) found." -f $NetworkCollection.Count | Write-Verbose 
            
			if ($exportFile) 
			{ 
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Exporting JSON to $($exportFile)"
			
                $NetworkCollection | Sort type,name | convertto-json > $exportFile
			
            }
            
			else
			{

				Return $NetworkCollection | Sort type,name
			
			}
        
		}

        #No networks found
        else
		{ 
			
			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Network resources found." 
		
		}

    }

}

function Set-HPOVNetwork 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "Ethernet")]
    Param (

        [parameter(Position = 0, Mandatory, ValueFromPipeline, HelpMessage = "Provide the Network Name, URI or Resource Object to be modified.",ParameterSetName = "Ethernet")]
        [parameter(Position = 0, Mandatory, ValueFromPipeline, HelpMessage = "Provide the Network Name, URI or Resource Object to be modified.",ParameterSetName = "FibreChannel")]
		[parameter(Position = 0, Mandatory, ValueFromPipeline, HelpMessage = "Provide the Network Name, URI or Resource Object to be modified.",ParameterSetName = "FCoE")]
        [ValidateNotNullOrEmpty()]
        [Alias('net')]
        [Object]$Network,

        [parameter(Position = 1, Mandatory = $false, ValueFromPipeline = $false, HelpMessage = "Enter the new Name of the network object.", ParameterSetName = "Ethernet")]
        [parameter(Position = 1, Mandatory = $false, ValueFromPipeline = $false, HelpMessage = "Enter the new Name of the network object.", ParameterSetName = "FibreChannel")]
		[parameter(Position = 1, Mandatory = $false, ValueFromPipeline = $false, HelpMessage = "Enter the new Name of the network object.", ParameterSetName = "FCoE")]
        [ValidateNotNullOrEmpty()]
        [string]$Name = $Null,

        [parameter(Mandatory = $false, ParameterSetName = "Ethernet")]
        [parameter(Mandatory = $false, ParameterSetName = "FibreChannel")]
		[parameter(Mandatory = $false, ParameterSetName = "FCoE")]
        [ValidateNotNullOrEmpty()]
        [string]$Prefix,

        [parameter(Mandatory = $false, ParameterSetName = "Ethernet")]
        [parameter(Mandatory = $false, ParameterSetName = "FibreChannel")]
		[parameter(Mandatory = $false, ParameterSetName = "FCoE")]
        [ValidateNotNullOrEmpty()]
        [string]$Suffix,

        [parameter(Position = 2, Mandatory = $false, ValueFromPipeline = $false, HelpMessage = "Enter the new Purpose of the network object.", ParameterSetName = "Ethernet")]
        [ValidateNotNullOrEmpty()]
        [ValidateSet("General", "Management", "VMMigration", "FaultTolerance")]
        [string]$Purpose = $Null,

        [parameter(Mandatory = $false, ParameterSetName = "Ethernet")]
        [Bool]$Smartlink = $True, 

        [parameter(Mandatory = $false, ParameterSetName = "Ethernet")]
        [Bool]$PrivateNetwork = $False, 

        [parameter(Position = 5, Mandatory = $false, ParameterSetName = "Ethernet")]
        [parameter(Position = 2, Mandatory = $false, ParameterSetName = "FibreChannel")]
		[parameter(Position = 2, Mandatory = $false, ParameterSetName = "FCoE")]
        [validaterange(2,20000)]
        [int32]$TypicalBandwidth = $null, 
        
        [parameter(Position = 6, Mandatory = $false, ParameterSetName = "Ethernet")]
        [parameter(Position = 3, Mandatory = $false, ParameterSetName = "FibreChannel")]
		[parameter(Position = 3, Mandatory = $false, ParameterSetName = "FCoE")]
        [validaterange(100,20000)]
        [int32]$MaximumBandwidth = $Null, 

        [parameter(Position = 4, Mandatory = $false, ParameterSetName = "FibreChannel")]
        [ValidateRange(1,1800)]
		[Alias('lst')]
        [int32]$LinkStabilityTime = $NUll, 

        [parameter(Position = 5, Mandatory = $false, ParameterSetName = "FibreChannel")]
		[Alias('ald')]
        [Bool]$AutoLoginRedistribution = $True,

        [parameter(Position = 6, Mandatory = $false, ParameterSetName = "FibreChannel")]
		[parameter(Position = 4, Mandatory = $false, ParameterSetName = "FCoE")]
        [Object]$ManagedSan = $Null,

		[parameter(ValueFromPipelineByPropertyName, ValueFromPipeline = $False, Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = ${Global:ConnectedSessions}

    )
    
    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		#Network Name and Appliance Connection are both required.
		if ($Network -is [String] -and (-not($ApplianceConnection)))
		{
		
			$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Task' -Message "The -Task parameter requires an Appliance to be specified.  Please provide the Appliance Connection object or name by using the -ApplianceConnection parameter." #-verbose
			$PSCmdLet.ThrowTerminatingError($errorRecord)

		}

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

        if (-not($PSBoundParameters['Network'])) { 
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network resource passed via pipeline."
		
			$PipelineInput = $True 
		
		}

		$_NetworksToUpdate = New-Object System.Collections.ArrayList
		$NetCollection     = New-Object System.Collections.ArrayList

    }

    Process 
	{

		#build collection of networks to modify
        foreach ($net in $network) 
		{

            #Check the name parameter value if the caller inadvertantly provided an object for name parameter
            if ($name -and ($name -match "category=ethernet-networks" -or $name -match "category=fc-networks" -or $name -match "category=fcoe-networks"))
			{ 
            
                $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidArgumentValue InvalidArgument 'Name' -Message "The -name parameter value appears to have been passed the network resource object, which is converted to type [String] and is an invalid operation.  Please verify that you provided the Network Name attribute in the -name parameter value and try again."
                $PSCmdLet.ThrowTerminatingError($errorRecord)
            
            }

            elseif ($name -and $name.length -gt 255) 
			{

                $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidArgumentValue InvalidArgument 'Name' -Message "The -name parameter value is greater than 255 characters.  Please check the -name parameter value and try again."
                $PSCmdLet.ThrowTerminatingError($errorRecord)

            }

            switch ($net.Gettype().Name) 
			{

                "PSCustomObject" 
				{ 
    
                    if ($net -is [PSCustomObject] -and ($net.category -eq "ethernet-networks" -or $net.category -eq "fc-networks" -or $net.category -eq "fcoe-networks")) 
					{

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Collecting $($net.type) $($net.name) resource."

						[void]$_NetworksToUpdate.Add($net)
                        #$updatedNetwork = $net

                    }

                    else 
					{

                        $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidArgumentValue InvalidArgument 'Network' -TargetType 'PSObject' -Message "[$($net.gettype().name)] is an unspported data type.  Only [System.String] or [PSCustomObject] or an [Array] of [System.String] or [PSCustomObject] network resources are allowed.  Please check the -network parameter value and try again."
                        $PSCmdLet.ThrowTerminatingError($errorRecord)

                    }
                    
                }

                "String" 
				{ 
                
					#User provided Network 'name' and 1 or more Appliance Connections
                    if ($net -is [String] -and (-not ($net.StartsWith('/rest/'))))
					{
                    
                        ForEach ($_appliance in $ApplianceConnection)
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting '$($net)' resource from appliance."
							
							Try 
							{

								$_tempNet = Get-HPOVNetwork $net -type $PSCmdlet.ParameterSetName -ApplianceConnection $_appliance

							}
							
							Catch [HPOneView.NetworkResourceException]
							{

								if ($_.CategoryInfo.Category -eq 'ObjectNotFound')
								{

									$errorRecord = New-ErrorRecord HPOneView.NetworkResourceException NetworkResourceNotFound ObjectNotFound 'Network' -Message "'$net' Network was not found.  Please check the value and try again." #-verbose
									$PSCmdLet.ThrowTerminatingError($errorRecord)

								}
								
								else
								{

									$PSCmdlet.ThrowTerminatingError($_)

								}

							}
							
							if ($_tempNet.count -gt 1)
							{

								$errorRecord = New-ErrorRecord HPOneView.NetworkResourceException NonUniqueNetworkName InvalidResult 'Network' -Message "Multiple '$_tempNet' Network resource found with the same name.  Please check the value and try again, or provide the Network Resource Object instead of the name." #-verbose
							    $PSCmdLet.ThrowTerminatingError($errorRecord)

							}
                    
							[void]$_NetworksToUpdate.Add($_tempNet)

						}
						
                    }

                    elseif ($net -is [String] -and ($net.StartsWith('/rest/ethernet-networks/') -or $net.StartsWith('/rest/fc-networks/'))) {
                    
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting '$($net)' resource from appliance."
                        [void]$NetCollection.Add((Send-HPOVRequest $net -Appliance $ApplianceConnection))
                    
                    }
                
                }

            }

		}

	}

    end {

		ForEach ($_net in $_NetworksToUpdate)
		{

			#Set Specific Network Type settings
			switch ($_net.category) 
			{

                "ethernet-networks" 
				{

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updateing $($_net.name) Ethernet Network."

                    switch ($PSBoundParameters.keys) 
					{

                        "purpose" 
						{ 
                        
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting network Purpose to: $purpose"
                            $_net.purpose = $purpose
                            
                        }

                        "smartlink" 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting smartlink Enabled to: $([bool]$smartlink)"
                            $_net.smartlink = [bool]$smartlink

                        }

                        "privateNetwork" 
						{ 

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting privateNetwork Enabled to: $([bool]$privateNetwork)"
                            $_net.privateNetwork = [bool]$privateNetwork
                        
                        }

                    }

                }

                "fc-networks" 
				{

                    switch ($PSBoundParameters.keys) 
					{

                        "linkStabilityTime" 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting linkStabilityTime to '$linkStabilityTime' seconds"

                            $_net.linkStabilityTime = [int]$linkStabilityTime

                        }

                        "autoLoginRedistribution" 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting autoLoginRedistribution Enabled to: $([bool]$autoLoginRedistribution)"
                            
							$_net.autoLoginRedistribution = [bool]$autoLoginRedistribution

                        }

                        "managedSan"
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing ManagedSAN for FC Network."

							$_net.managedSanUri = (VerifyManagedSan $managedSan $_net.ApplianceConnection.Name)

                        }

                    }

                }

				"fcoe-networks"
				{
					
					switch ($PSBoundParameters.keys) 
					{

					    "managedSan"
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing ManagedSAN for FC Network."
                    
							$_net.managedSanUri = (VerifyManagedSan $managedSan $_net.ApplianceConnection.Name)
                            
                        }

					}

				}

            }

			#Shared Parameters for each Network Type
			if ($PSBoundParameters["name"]) 
			{
            
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Network name to '$name'."
	
	            #validate name parameter is [String]
	            $_net.name = $name
	            
	        }
	
	        if ($PSBoundParameters["prefix"]) 
			{
	            
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Network name to include '$prefix' prefix to Network Name."
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updated Network Name: $($prefix + $_net.name)"
	
	            #validate name parameter is [String]
	            $_net.name = $prefix + $_net.name
	            
	        }
	
	        if ($PSBoundParameters["suffix"]) 
			{
	            
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Network name to include '$suffix' suffix to Network Name."
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updated Network Name: $($_net.name + $suffix)"
	
	            #validate name parameter is [String]
	            $_net.name += $suffix
	            
	        }
	
	        if ($PSBoundParameters["typicalBandwidth"] -or $PSBoundParameters["maximumBandwidth"]) 
			{
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Network bandwidth assignment."

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Connection Template resource."

	            $ct = Send-HPOVRequest $_net.connectionTemplateUri -Appliance $_net.ApplianceConnection.Name
	            
	            if ($PSBoundParameters["maximumBandwidth"]) 
				{
	            
	                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Original Maximum bandwidth assignment: $($ct.bandwidth.maximumBandwidth)"

	                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New Maximum bandwidth assignment: $maximumBandwidth"

	                $ct.bandwidth.maximumBandwidth = $maximumBandwidth
	
	            }

	            if($PSBoundParameters["typicalBandwidth"]) 
				{
	
	                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Original Typical bandwidth assignment: $($ct.bandwidth.typicalBandwidth)"
	                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New Typical bandwidth assignment: $typicalBandwidth"

	                $ct.bandwidth.typicalBandwidth = $typicalBandwidth
	                
	            }
	
	            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Connection Template: $($ct | out-string)"
	            $ct = Send-HPOVRequest $ct.uri PUT $ct -Appliance $ct.ApplianceConnection.Name
	
	        }

			$_net = $_net | select * -ExcludeProperty defaultTypicalBandwidth, defaultMaximumBandwidth, created, modified

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Network Resource object: $($_net | FL * | out-string)"

			$resp = Send-HPOVRequest $_net.uri PUT $_net -Appliance $_net.ApplianceConnection.Name

			[void]$NetCollection.Add($resp)
		
		}
        
		Return $NetCollection

    }

} 

function Remove-HPOVNetwork 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "PipelineDefault",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param
    (

		[parameter(Mandatory, ValueFromPipeline, ParameterSetName = "PipelineDefault", HelpMessage = "Specify the network to remove.", Position = 0)]
		[parameter(Mandatory, ParameterSetName = "ApplianceRequired", position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias('uri', 'name', 'network')]
        [System.Object]$Resource = $null,
	
		[parameter(Mandatory = $False, ValueFromPipelineByPropertyName, ParameterSetName = "ApplianceRequired", position = 1)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = $Null,

		[switch]$Force

    )

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		if (-not($PSBoundParameters['Resource'])) { $PipelineInput = $True }

		$_TaskCollection    = New-Object System.Collections.ArrayList
		$_NetworkCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if ($PipelineInput) 
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Object provided: $($Resource | FL * | Out-String)"

			If ('ethernet-networks','fc-networks','fcoe-networks' -contains $Resource.category)
			{

				If (-not($Resource.ApplianceConnection))
				{

					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "Network:$($Resource.Name)" -TargetType PSObject -Message "The Network resource provided is missing the source ApplianceConnection property.  Please check the object provided and try again." #-verbose
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				[void]$_NetworkCollection.Add($Resource)

			}

			else
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "Network:$($Resource.Name)" -TargetType PSObject -Message "The Network resource is not an expected category type [$($Resource.category)].  Allowed resource category types are 'ethernet-networks', 'fc-networks', or 'fcoe-networks'.  Please check the object provided and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

		}

		else 
		{

			foreach ($net in $Resource) 
			{

				#Network passed is a URI
				if (($net -is [String]) -and [System.Uri]::IsWellFormedUriString($net,'Relative')) 
				{

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received URI: $($net)"

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Network Name"

					# // NEED APPLIANCE NAME HERE with If Condition
				    $net = Send-HPOVRequest $net -ApplianceConnection $ApplianceConnection

				}

				#Network passed is the Name
				elseif (($net -is [string]) -and (!$net.startsWith("/rest"))) 
				{

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received Network Name $($net)"

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Network object from Get-HPOVNetwork"
				    
					# // NEED APPLIANCE NAME HERE with If Condition
				    $net = Get-HPOVNetwork $net -ApplianceConnection $ApplianceConnection

				    if ($network.count -gt 1 ) 
					{ 

				        $errorRecord = New-ErrorRecord InvalidOperationException NetworkResourceNameNotUnique InvalidResult 'Remove-HPOVNetwork' -Message "Invalid Network parameter: $net" #-verbose
				        $PSCmdlet.WriteError($errorRecord)                
				    
				    }

				}

				#Network passed is the object
				elseif ($net -is [PSCustomObject] -and ($net.category -ieq 'ethernet-networks' -or $net.category -ieq 'fc-networks' -or $net.category -ieq 'fcoe-networks')) 
				{
				    
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Object provided: $($net | FL * | out-string)"
				
				}

				else 
				{

				    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Network' -TargetType 'PSObject' -Message "Invalid Network parameter: $($net | FL * | Out-String)" #-verbose
				    $PSCmdlet.WriteError($errorRecord)

				}

				[void]$_NetworkCollection.Add($Resource)

			}

		}
        
    }

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($_NetworkCollection.count) Network resources to remove."

		#Process Network Resources
		ForEach ($_network in $_NetworkCollection)
		{

			if ($pscmdlet.ShouldProcess($_network.name,"Remove Network from appliance '$($_network.ApplianceConnection.Name)'?'")) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing Network '$($_network.name)' from appliance '$($_network.ApplianceConnection.Name)'."

				Try
				{
					
					if ($PSBoundParameters['Force'])
					{

						$_network.uri += "?force=true"

					}

					$_resp = Send-HPOVRequest $_network.Uri DELETE -Hostname $_network.ApplianceConnection.Name

					[void]$_TaskCollection.Add($_resp)

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			elseif ($PSBoundParameters['WhatIf'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf parameter was passed."

			}

		}

		Return $_TaskCollection

	}

}

function New-HPOVNetworkSet 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param 
	(

		[parameter (Position = 0,Mandatory = $True)]
		[String]$Name = $null,

		[parameter (Position = 1,Mandatory = $True)]
		[alias('networkUris')]
		[Object]$Networks = $null,

		[parameter (Position = 2,Mandatory = $False)]
		[Alias ('untagged','native','untaggedNetworkUri')]
		[Object]$UntaggedNetwork = $null,

		[parameter (Position = 3,Mandatory = $False)]
		[int32]$typicalBandwidth = 2500,

		[parameter (Position = 4,Mandatory = $False)]
		[int32]$maximumBandwidth = 10000,
	
		[parameter(Mandatory = $False, ValueFromPipelineByPropertyName, position = 5)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = $Null

    )
	
	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

	}
	
	Process 
	{

		ForEach ($_connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_connection.Name)' Appliance Connection"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Building NetworkSet '$($name) object."

			$_NewNetSet = Newobject -NetworkSet

			# Validate Networks if they are objects, and ApplianceConnection prop matches $_connection.Name value

			# Validate NativeNetwork if it is an object, and ApplianceConnection prop matches $_connection.Name value


		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Requesting to create $($name)"

        foreach ($net in $networks) {

            if ($net -is [string] -and $net.startswith('/rest/ethernet-networks')) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network is a URI: $net"
                [array]$networkUris += $net

            }
            elseif ($net -is [string]) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network is a Name: $net"
                [array]$networkUris += (get-hpovnetwork $net).uri
            }
            elseif ($net -is [string] -and -not $net.startswith('/rest/ethernet-networks')) {

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'New-HPOVNetworkSet' -Message "Network '$net' is the correct type, but invalid URI prefix.  Network URI must start with '/rest/ethernet-networks'.  Please correct the parameter value and try again."
                $PSCmdlet.ThrowTerminatingError($errorRecord)


            }
            elseif ($net -is [PsCustomObject] -and $net.category -eq "ethernet-networks") {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network is a type [PsCustomObject]"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Name: $net.name"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network uri: $net.uri"
                [array]$networkUris += $net.uri

            }
            else {

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'New-HPOVNetworkSet' -Message "Network '$net' is not a supported type '$($net.gettype().fullname)'.  Network resource must be either [System.String] or [PsCustomObject].  Please correct the parameter value and try again."
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }
            
        }

    	If ($untaggedNetwork){

            if ($untaggedNetwork -is [string] -and $untaggedNetwork.startswith('/rest/ethernet-networks')) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Untagged Network is a URI: $untaggedNetwork"
                [string]$untaggedNetworkUri = $untaggedNetwork

            }
            elseif ($untaggedNetwork -is [string]) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Untagged Network is a Name: $untaggedNetwork"
                [string]$untaggedNetworkUri = (get-hpovnetwork $untaggedNetwork).uri
            }
            elseif ($untaggedNetwork -is [string] -and -not $untaggedNetwork.startswith('/rest/ethernet-networks')) {

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'New-HPOVNetworkSet' -Message "UntaggedNetwork '$untaggedNetwork' is the correct type, but invalid URI prefix.  UntaggedNetwork URI must start with '/rest/ethernet-networks'.  Please correct the parameter value and try again."
                $PSCmdlet.ThrowTerminatingError($errorRecord)


            }
            elseif ($untaggedNetwork -is [PsCustomObject] -and $untaggedNetwork.category -eq "ethernet-networks") {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Untagged Network is a type [PsCustomObject]"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Untagged Network Name and is the Untagged Network: $($untaggedNetwork.name)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Untagged Network uri: $($untaggedNetwork.uri)"
                [string]$untaggedNetworkUri = $untaggedNetwork.uri

            }
            else {

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'New-HPOVNetworkSet' -Message "Network '$net' is not a supported type '$($net.gettype().fullname)'.  Network resource must be either [System.String] (which must either be the Network Name or proper URI that starts with '/rest/ethernet-networks') or [PsCustomObject].  Please correct the parameter value and try again."
                $PSCmdlet.ThrowTerminatingError($errorRecord)


            }

			$netset = @{
		        type             = "network-set"; 
		        name             = $name; 
		        networkUris      = $networkUris; 
		        nativeNetworkUri = $untaggedNetworkUri; 
	    	}

		}
		else {

			$netset = @{
		        type        = "network-set"; 
		        name        = $name; 
		        networkUris = $networkUris;
    		}

		}

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Set object: $($netset | out-string)"

        #Caller is requesting different bandwidth settings.  Need to handle async task to create network set.
        if (($typicalBandwidth -ne 2500) -or ($maximumBandwidth -ne 10000)) {

	        try {

                $task = New-HPOVResource $networkSetsUri $netset

                $taskStatus = Wait-HPOVTaskComplete $task

                if ($taskStatus.taskStatus -eq "Created") {
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Set was successfully created"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Network Set bandwidth"
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Requested Typical bandwidth: $($typicalBandwidth)"
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Requested Maximum bandwidth: $($maximumBandwidth)"

                    #Get NEtwork Set Object
                    $newNetSet = Send-HPOVRequest $taskStatus.associatedResource.resourceUri

	                if ($newNetSet -and $newNetSet.connectionTemplateUri) {
	                    # Update the associated connection template with max & typical bandwidth settings:
	                    $ctUri = $newNetSet.connectionTemplateUri
	                    $ct = Send-HPOVRequest $ctUri
	                    if ($ct -and $ct.bandwidth) {
	                        if ($typicalBandwidth) { $ct.bandwidth.typicalBandwidth = $typicalBandwidth }
	                        if ($maximumBandwidth) { $ct.bandwidth.maximumBandwidth = $maximumBandwidth }
	                        Set-HPOVResource -resource $ct
	                    }
                    }
                }
            }
            catch {

                $errorRecord = New-ErrorRecord InvalidOperationException $task.errorCode InvalidResult 'New-HPOVNetworkSet' -Message $task.message
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

	    }

        else {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request with default bandwidth."
            $newNetSet = Send-HPOVRequest $networkSetsUri POST $netset

        }

    }

    end {

	    #Return Network Set
	    return $newNetSet
	}
}

function Get-HPOVNetworkSet 
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdLetBinding(DefaultParameterSetName = "Default")]
	Param 
	(

		[parameter (Position = 0, ParameterSetName = "Default", Mandatory = $false)]
		[parameter (Position = 0, ParameterSetName = "Export", Mandatory = $false)]
		[String]$Name = $null,
		
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

		[parameter (ParameterSetName = "Export", Mandatory = $false)]
		[alias("x", "export")]
		[ValidateScript({split-path $_ | Test-Path})]
		[String]$exportFile

	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if (-not($PSBoundParameters['type']))
		{
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] -Type parameter wasn't provided. Specifying all Network Resource Types."

			[Array]$type = "Ethernet","FibreChannel","FCOE"

		}

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_NetworkSetCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			$uri = $networkSetsUri + "?sort=name:asc"

			if ($name)
			{
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filtering for Network Set name: $name"

				$uri = $uri + "&filter=`"name matches '$name'`"" -replace ("[*]","%25")

			}

			Try
			{

				$_NetSets = Send-HPOVRequest $uri -Hostname $_Connection

			}
			
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			#Add to final collection arraylist
			if ($_NetSets.members) 
			{ 
						
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding results to collection"

				$_NetSets.members | % { 

					if ($_.connectionTemplateUri) 
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Network Set resource Connection Template Object to add bandwidth values to network objects."

						Try
						{

							$ct = Send-HPOVRequest -uri $_.connectionTemplateUri -Hostname $_Connection

						}
					
						Catch
						{

							$PSCmdlet.ThrowTerminatingError($_)

						}

						Add-Member -InputObject $_ -NotePropertyName maximumBandwidth -NotePropertyValue $ct.bandwidth.maximumBandwidth -Force 
						Add-Member -InputObject $_ -NotePropertyName typicalBandwidth -NotePropertyValue $ct.bandwidth.typicalBandwidth -Force

					}

					$_.PSObject.TypeNames.Insert(0,”HPOneView.Networking.NetworkSet")  

					[void]$_NetworkSetCollection.Add($_)
						
				} 

			}

        }

    }

    End 
	{

		#If network not found, report error
		if ((-not($_NetworkSetCollection)) -and $Name)
		{ 

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Set Resource Name was provided, yet no results were found.  Generate Error."

			$errorRecord = New-ErrorRecord HPOneView.NetworkSetResourceException NetworkSetResourceNotFound ObjectNotFound "Name" -Message "The specified '$name' Network Set resource were not found.  Please check the name and try again." #-verbose
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

        if ($_NetworkSetCollection) 
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Results returned "

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Sets Found: $($_NetworkSetCollection | fl * | out-string ) "

			"[$($MyInvocation.InvocationName.ToString().ToUpper())] Done. {0} network set resource(s) found." -f $_NetworkSetCollection.Count | Write-Verbose 
            
			if ($exportFile) 
			{ 
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Exporting JSON to $($exportFile)"
			
                $_NetworkSetCollection | convertto-json > $exportFile
			
            }
            
			else
			{

				Return $_NetworkSetCollection
			
			}
        
		}

        #No network sets found
        else
		{ 
			
			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Network set resources found." 
		
		}

    }

}

function Set-HPOVNetworkSet {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param 
    (

        [parameter (Mandatory = $true, ValueFromPipeline = $true, Position = 0)]
        [ValidateNotNullorEmpty()]
        [object]$netSet,

        [parameter (Mandatory = $false, Position = 1)]
        [ValidateNotNullorEmpty()]
        [string]$name,

        [parameter (Mandatory = $false, Position = 2)]
        [ValidateNotNullorEmpty()]
        [object]$networks,

        [parameter (Mandatory = $False, Position = 3)]
        [Alias ('untagged','native','untaggedNetworkUri')]
        [ValidateNotNullorEmpty()]
        [Object]$untaggedNetwork=$null,

        [parameter(Position = 5, Mandatory = $false)]
        [validaterange(2,20000)]
        [int32]$typicalBandwidth = $null, 
        
        [parameter(Position = 6, Mandatory = $false)]
        [validaterange(100,20000)]
        [int32]$maximumBandwidth = $Null,

        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"
        
		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_.Exception)

			}

			$c++

		}
        
        $taskCollection = New-Object System.Collections.ArrayList

        #Check for URI parameters with multiple appliance connections
        if($ApplianceConnection.Count -gt 1){

            if ($netSet -is [String] -and ($netSet.StartsWith('/rest/network-Sets'))) {
                    
                $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidArgumentValue InvalidArgument 'Set-HPOVNetworkSet' -Message "NetSet parameter as URI is unsupported with multiple appliance connections.  Please check the -netset parameter value and try again."
                $PSCmdLet.ThrowTerminatingError($errorRecord)
            
            }
            if ($net -is [string] -and $net.startswith('/rest/ethernet-networks')) {

                $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidArgumentValue InvalidArgument 'Set-HPOVNetworkSet' -Message "Networks parameter as URI is unsupported with multiple appliance connections.  Please check the -networks parameter value and try again."
                $PSCmdLet.ThrowTerminatingError($errorRecord)

            }
            if ($untaggedNetwork -is [string] -and $untaggedNetwork.startswith('/rest/ethernet-networks')) {

                $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidArgumentValue InvalidArgument 'Set-HPOVNetworkSet' -Message "Untaggednetwork parameter as URI is unsupported with multiple appliance connections.  Please check the -untaggednetwork parameter value and try again."
                $PSCmdLet.ThrowTerminatingError($errorRecord)

            }
        }

        $PipelineInput =  (-not $PSBoundParameters.ContainsKey("netset"))

	}

    Process {
        
        If($PipelineInput){ 
            $ApplianceConnection = $_.ApplianceConnection
        }
        
        ForEach ($_Connection in $ApplianceConnection){

            #Process Network Set input object is the correct resource and data type.
            switch ($netSet.Gettype().Name) {

                "PSCustomObject" { 
    
                    if ($netSet -is [PSCustomObject] -and ($netSet.category -eq "network-sets")) {

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($netSet.type) $($netSet.name) resource."
                        $updatedNetworkSet = $netSet

                    }

                    else {

                        $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidArgumentValue InvalidArgument 'Set-HPOVNetworkSet' -Message "[$($netSet.gettype().name)] is an unsupported data type.  Only [System.String] or [PSCustomObject] or an [Array] of [System.String] or [PSCustomObject] network set resources are allowed.  Please check the -network parameter value and try again."
                        $PSCmdLet.ThrowTerminatingError($errorRecord)

                    }
                    
                
                }
                "String" { 
                
                    if ($netSet -is [String] -and -not ($netSet.StartsWith('/rest/network-sets'))) {
                    
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting '$($netSet)' resource from appliance."
                        $updatedNetworkSet = Get-HPOVNetworkSet $netSet -appliance $_Connection
                        
                        if (-not $updatedNetworkSet) {

                            $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException NetworkSetResourceNotFound ObjectNotFound 'Set-HPOVNetwork' -Message "'$netSet' Network Set was not found.  Please check the value and try again." #-verbose
                            $PSCmdLet.ThrowTerminatingError($errorRecord)

                        }
                    
                    }
                    elseif ($netSet -is [String] -and ($netSet.StartsWith('/rest/network-Sets'))) {
                    
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting '$($netSet)' resource from appliance."
                        $updatedNetworkSet = Send-HPOVRequest $netSet -appliance $_Connection
                    
                    }
                
                }

                "default"{
                    
                    if($netSet -is [Object[]] -and ($netSet.category -eq "network-sets")){
                        $updatedNetworkSet = $netSet | ? {$_.ApplianceConnection.name -eq $ApplianceConnection.name}
                    }
                    else {

                        $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidArgumentValue InvalidArgument 'Set-HPOVNetworkSet' -Message "[$($netSet.gettype().name)] is an unsupported data type.  Only [System.String] or [PSCustomObject] or an [Array] of [System.String] or [PSCustomObject] network set resources are allowed.  Please check the -network parameter value and try again."
                        $PSCmdLet.ThrowTerminatingError($errorRecord)

                    }
                }

            }

            #Process Network Set Name change
            if ($PSBoundParameters["name"]) {
            
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Network Set name to '$name'."
                $updatedNetworkSet.name = $name
            
            }


            if ($PSBoundParameters["networks"]) {
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($networks.count) network resources"

                [array]::sort($networks)

                $i = 1

                foreach ($net in $networks) {

                    $networkUris = @()

                    if ($net -is [string] -and $net.startswith('/rest/ethernet-networks')) {

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network [$i] is a URI: $net"
                        $networkUris += $net

                    }
                    elseif ($net -is [string]) {

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network [$i] is a Name: $net"
                        $networkUris += (get-hpovnetwork $net -appliance $_Connection).uri
                    }
                    elseif ($net -is [string] -and -not ($net.startswith('/rest/ethernet-networks'))) {

                        $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Set-HPOVNetworkSet' -Message "Network '$net' is the correct type, but invalid URI prefix.  Network URI must start with '/rest/ethernet-networks'.  Please correct the parameter value and try again."
                        $PSCmdlet.ThrowTerminatingError($errorRecord)


                    }
                    elseif ($net -is [PsCustomObject] -and $net.category -eq "ethernet-networks") {

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network [$i] is a type [PsCustomObject]"
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network [$i] Name: $($net.name)"
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network [$i] uri: $($net.uri)"
                        $networkUris += $net.uri

                    }
                    else {

                        $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Set-HPOVNetworkSet' -Message "Network '$net' is not a supported type '$($net.gettype().fullname)'.  Network resource must be either [System.String] or [PsCustomObject].  Please correct the parameter value and try again."
                        $PSCmdlet.ThrowTerminatingError($errorRecord)

                    }

                    $updatedNetworkSet.networkUris = $networkUris

                    $i++
                    
                }
            }

    	    If ($untaggedNetwork){

                if ($untaggedNetwork -is [string] -and $untaggedNetwork.startswith('/rest/ethernet-networks')) {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Untagged Network is a URI: $untaggedNetwork"
                    [string]$untaggedNetworkUri = $untaggedNetwork

                }
                elseif ($untaggedNetwork -is [string]) {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Untagged Network is a Name: $untaggedNetwork"
                    [string]$untaggedNetworkUri = (get-hpovnetwork $untaggedNetwork -appliance $_Connection).uri
                }
                elseif ($untaggedNetwork -is [string] -and -not $untaggedNetwork.startswith('/rest/ethernet-networks')) {

                    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Set-HPOVNetworkSet' -Message "UntaggedNetwork '$untaggedNetwork' is the correct type, but invalid URI prefix.  UntaggedNetwork URI must start with '/rest/ethernet-networks'.  Please correct the parameter value and try again."
                    $PSCmdlet.ThrowTerminatingError($errorRecord)


                }
                elseif ($untaggedNetwork -is [PsCustomObject] -and $untaggedNetwork.category -eq "ethernet-networks") {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Untagged Network is a type [PsCustomObject]"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Untagged Network Name and is the Untagged Network: $($untaggedNetwork.name)"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Untagged Network uri: $($untaggedNetwork.uri)"
                    [string]$untaggedNetworkUri = $untaggedNetwork.uri

                }
                else {

                    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'untaggedNetwork' -Message "Network untaggedNetwork parameter is not a supported type '$($untaggedNetwork.gettype().fullname)'.  Network resource must be either [System.String] (which must either be the Network Name or proper URI that starts with '/rest/ethernet-networks') or [PsCustomObject].  Please correct the parameter value and try again."
                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                }

		    	$updatedNetworkSet.nativeNetworkUri = $untaggedNetworkUri

		    }

            #Process Network Set Bandwidth assignment change
            if ($updatedNetworkSet["typicalBandwidth"] -or $PSBoundParameters["maximumBandwidth"]) {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Network bandwidth assignment."
                $ct = Send-HPOVRequest $updatedNetworkSet.connectionTemplateUri -appliance $_Connection
                
                if ($PSBoundParameters["maximumBandwidth"]) {
                
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Original Maximum bandwidth assignment: $($ct.bandwidth.maximumBandwidth)"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New Maximum bandwidth assignment: $maximumBandwidth"
                    $ct.bandwidth.maximumBandwidth = $maximumBandwidth

                }
                if($PSBoundParameters["typicalBandwidth"]) {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Original Typical bandwidth assignment: $($ct.bandwidth.typicalBandwidth)"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New Typical bandwidth assignment: $typicalBandwidth"
                    $ct.bandwidth.typicalBandwidth = $typicalBandwidth
                    
                }

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Connection Template: $($ct | out-string)"
                $ct = Set-HPOVResource $ct -appliance $_Connection

            }

            $updatedNetworkSet = $updatedNetworkSet | select * -ExcludeProperty typicalBandwidth, maximumBandwidth, created, modified, state, status
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updating Network Resource object: $($updatedNetworkSet | out-string)"

            $newNetSet = Set-HPOVResource $updatedNetworkSet -appliance $_Connection
            [void]$taskCollection.Add($newNetSet)
            }
    }

    End {
    $taskCollection

    }

}

function Remove-HPOVNetworkSet {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param (
        
        [parameter (Mandatory = $true,ValueFromPipeline = $true,ParameterSetName = "default", HelpMessage = "Specify the Network Set(s) to remove.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias("uri")]
        [Alias("name")]
        [object]$networkSet = $null

    )

    Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError "Remove-HPOVNetworkSet" -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }


    }

    Process {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

        foreach ($netSet in $networkSet) {

            $networkSetNameOrUri = $null
            $networkSetDisplayName = $null

            if ($netSet -is [String]) {

                $networkSetNameOrUri = $netSet
                $networkSetDisplayName = $netSet

            }
            elseif ($netSet -is [PSCustomObject] -and ($netSet.category -ieq 'network-sets')) {

                $networkSetNameOrUri = $netSet.uri
                $networkSetDisplayName = $netSet.name

            }
            else {
                
                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Remove-HPOVNetworkSet' -Message "Invalid network set parameter: $netSet" #-verbose
                $pscmdlet.WriteError($errorRecord)

            }

            if (!$networkSetNameOrUri) {

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Remove-HPOVNetworkSet' -Message "Invalid network set parameter: $netSet" #-verbose
                $pscmdlet.WriteError($errorRecord)
            }

            elseif ($pscmdlet.ShouldProcess($networkSetDisplayName,'Remove network set from appliance?')){   
             
                Remove-HPOVResource -nameOrUri $networkSetNameOrUri

            }

        }

    }

}

function Get-HPOVAddressPool 
{  

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "Default")]
    Param 
	(
        
        [parameter (Position = 0, Mandatory = $false, ParameterSetName = "Default")]
		[ValidateSet('vmac', 'vwwn', 'vsn', 'all')]
        [Array]$Type = "all",

        [parameter (Mandatory = $false, ParameterSetName = "Default")]
        [Switch]$Ranges,

        [parameter (Mandatory = $false, ParameterSetName = "Default")]
        [Switch]$Report,
		
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		if ($PSBoundParameters['Report']) { Write-Warning "The -Report swtich is deprecated." }

		if ($PSBoundParameters['Ranges']) { Write-Warning "The -Ranges swtich is deprecated." }

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Requested Address Pool type: $($Type) "

        if ($Type -ieq "all") { $Type = @("VMAC", "VWWN", "VSN") }

		$_AddressPoolCollection = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

	        switch ($Type) 
			{

	            "vmac" 
				{ 

	                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Retrieve VMAC Address Pool details."
	            
	                #Get the VMAC Pool object
					Try
					{

						$_VMACPool = Send-HPOVRequest $applVmacPoolsUri -Hostname $_Connection.Name

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

					$_VMACPool | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.AddressPool") } 
					
					[void]$_AddressPoolCollection.Add($_VMACPool)

	            }

	            "vwwn" 
				{ 

	                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Retrieve VWWN Address Pool details."	
            
	                #Get the VWWN Pool object
					Try
					{

						$_VWWNPool = Send-HPOVRequest $applVwwnPoolsUri -Hostname $_Connection.Name

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

					$_VWWNPool | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.AddressPool") } 
					
					[void]$_AddressPoolCollection.Add($_VWWNPool)

	            }
	            
	            "vsn" 
				{

	                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Retrieve VSN Address Pool details."

	                $pool = Send-HPOVRequest $script:applVsnPoolsUri 

	                #Get the VSN Pool object
					Try
					{

						$_VWWNPool = Send-HPOVRequest $applVsnPoolsUri -Hostname $_Connection.Name

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

					$_VWWNPool | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.AddressPool") } 
					
					[void]$_AddressPoolCollection.Add($_VWWNPool)

	            }

	        }

		}

	}

	End 
	{

		return $_AddressPoolCollection 

    }

}

function Get-HPOVAddressPoolRange 
{  

	# .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "Default")]
    Param 
	(

        [parameter (Position = 0, Mandatory, ValueFromPipeline, ParameterSetName = "Default")]
		[ValidateNotNullorEmpty()]
		[ValidateSet('vmac', 'vwwn', 'vsn', 'all')]
        [Object]$Pool = 'all',
		
		[parameter(Mandatory = $false, ValueFromPipelineByPropertyName, ParameterSetName = "Default")]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		if (-not($PSBoundParameters['Pool'])) { $PipelineInput = $True }

		[ArrayList]$_RangeList = New-Object System.Collections.ArrayList
                    
    }

    Process 
	{

		Switch ($Pool.GetType().Name) 
		{

			"String" 
			{ 

				ForEach ($_Connection in $ApplianceConnection)
				{

					Try
					{

						$_AddressPool = Get-HPOVAddressPool $pool -ApplianceConnection $_Connection.Name

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

					foreach ($_rangeUri in $_AddressPool.rangeUris) 
					{

						Try
						{

							$_rangeObject = Send-HPOVRequest $_rangeUri -Hostname $_AddressPool.ApplianceConnection.Name

						}

						Catch
						{

							$PSCmdlet.ThrowTerminatingError($_)

						}

						$_rangeObject | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.AddressPoolRange") } 

						[void]$_RangeList.Add($_rangeObject)

					}

				}

			}

			"PSCustomObject" 
			{

				if ($Pool.category -match "id-pool-" -and $Pool.ApplianceConnection) 
				{

					foreach ($_RangeUri in $Pool.rangeUris) 
					{

						Try
						{

							$_rangeObject = Send-HPOVRequest $_RangeUri -Hostname $Pool.ApplianceConnection.Name

						}
						
						Catch
						{

							$PSCmdlet.ThrowTerminatingError($_)

						}

						$_rangeObject | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.AddressPoolRange") } 
                        
						[void]$_RangeList.Add($_rangeObject)

					}

                }

				elseif ($Pool.category -match "id-pool-" -and -not($Pool.ApplianceConnection))
				{

					$errorRecord = New-ErrorRecord InvalidOperationException MissingApplianceConnectionProperty InvalidArgument 'Pool' 'PSObject' -Message "The Pool parameter value does not contain an ApplianceConnection property.  Did this object come from Get-HPOVAddressPool or Send-HPOVRequest?  Please correct the parameter value and try again."
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				else 
				{
				
					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Pool' -TargetType 'PSObject' -Message "The Pool parameter value is not a valid Poll ID object.  Object Category '$($Pool.category)', expected 'id-pool-vmac', 'id-pool-vwwn', or 'id-pool.vsn'.  Please correct the parameter value and try again."
					$PSCmdlet.ThrowTerminatingError($errorRecord)
                
				}
				
			}

        }

    }

	End 
	{

		Return $_RangeList

    }

}

function New-HPOVAddressRange 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param 
	(
    
        [parameter (Mandatory = $true, ParameterSetName = "Default", position = 0)]
        [parameter (Mandatory = $true, ParameterSetName = "Custom", position = 0)]
        [ValidateSet("vmac", "vwwn", "vsn")]
        [String]$PoolType = $Null,

        [parameter (Mandatory = $true, ParameterSetName = "Default", position = 1)]
        [parameter (Mandatory = $true, ParameterSetName = "Custom", position = 1)]
        [ValidateSet("Generated", "Custom")]
        [String]$RangeType = "Generated",

        [parameter (Mandatory = $true, ParameterSetName = "Custom", position = 2)]
        [String]$Start,

        [parameter (Mandatory = $true, ParameterSetName = "Custom", position = 3)]
        [String]$End,
	
		[parameter(Mandatory = $False)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
    )

    Begin 
	{ 

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{
		
			Try 
			{
		
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection
		
			}
		
			Catch [HPOneview.Appliance.AuthSessionException] 
			{
		
				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)
		
			}
		
			Catch 
			{
		
				$PSCmdlet.ThrowTerminatingError($_)
		
			}
		
			$c++
		
		}

		$_Collection = New-Object System.Collections.ArrayList

		#Validate parameter options here
		if ($PSCmdlet.ParameterSetName -eq 'Custom' -and $RangeType -ne 'Custom')
		{

			$errorRecord = New-ErrorRecord InvalidOperationException LogicalInterconnectUriNoApplianceConnection InvalidArgument 'RangeType' -Message "Custom Address Range was provided, but the RangeType parameter value was not set to 'Custom'. Please check to make sure your call is correct, and try again.."
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		#Generate error when defining custom range and not a specific appliance
		if ($PSCmdlet.ParameterSetName -eq 'Custom' -and $ApplianceConnection.count -gt 1)
		{

			$errorRecord = New-ErrorRecord InvalidOperationException LogicalInterconnectUriNoApplianceConnection InvalidArgument 'ApplianceConnection' -Message "A Custom Address Range was provided with no Appliance Connection specified.  Custom Address Pool Ranges should be unique per appliance connection.  Please specify an Appliance Connection and try your call again."
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
    
    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' appliance (of $($ApplianceConnection.Count))"

			#Get the correct URI to request a new Generated Address Range
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating new $($PoolType) type address range"

			switch ($PoolType) 
			{

				"vmac" 
				{ 
            
					$_newGenRangeUri  = $script:applVmacGenerateUri
					$_newPoolRangeUri = $script:applVmacPoolRangesUri

				}

				"vwwn" 
				{ 
            
					$_newGenRangeUri  = $script:applVwwnGenerateUri
					$_newPoolRangeUri = $script:applVwwnPoolRangesUri
                
				}

				"vsn" 
				{ 
            
					$_newGenRangeUri  = $script:applVsnPoolGenerateUri
					$_newPoolRangeUri = $script:applVsnPoolRangesUri
            
				}

			}

			switch ($RangeType) 
			{

			    "Generated" 
				{
			        
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Generating new address range"
			    
			        #send the request, and remove the fragmentType property as it's not a valid JSON pfield for the request.
			        $_newRange = (Send-HPOVRequest $_newGenRangeUri -Hostname $_Connection.Name) | Select-Object -Property * -excludeproperty fragmentType

			        $_newRange | add-member -NotePropertyName type -NotePropertyValue "Range"
			        $_newRange | add-member -NotePropertyName rangeCategory -NotePropertyValue "GENERATED"

			    }
			    
			    "Custom" 
				{

			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating custom new address range"
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Starting Address: $($Start)"
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] End Address: $($End)"

			        switch ($PoolType) 
					{
			            
			            "vmac" 
						{
			                
			                if (-not($Start -match ($macAddressPattern ))) 
							{ 
								
								Write-Error "The Start MAC Address $($Start) is invalid." -Category SyntaxError -CategoryTargetName New-HPOVAddressRange

							}

			                if (-not($End -match ($macAddressPattern ))) 
							{ 
								
								Write-Error "The End MAC Address $($End) is invalid." -Category SyntaxError -CategoryTargetName New-HPOVAddressRange
							
							}

			             }
			            
			            "vwwn" 
						{
			            
			                if (-not($Start -match ($wwnAddressPattern ))) 
							{ 
								
								Write-Error "The Start WWN Address $($Start) is invalid." -Category SyntaxError -CategoryTargetName New-HPOVAddressRange
							
							}

			                if (-not($End -match ($wwnAddressPattern ))) 
							{ 
								
								Write-Error "The End WWN Address $($End) is invalid." -Category SyntaxError -CategoryTargetName New-HPOVAddressRange
							
							}
			            
			            }

						"vsn" 
						{
			            
			                if (-not($Start.StartWith('VCU'))) 
							{ 
								
								Write-Error "The Start SN Address $($Start) is invalid." -Category SyntaxError -CategoryTargetName New-HPOVAddressRange
							
							}

			                if (-not($End.StartWith('VCU'))) 
							{ 
								
								Write-Error "The End SN Address $($End) is invalid." -Category SyntaxError -CategoryTargetName New-HPOVAddressRange
							
							}
			            
			            }

			        }
			        
			        $_newRange = NewOPbject -IDPoolRange

					$_newRange.startAddress = $Start
					$_newRange.endAddress   = $End
			    
			    }

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New Range Object: $($_newRange | FL * | out-string)"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"

			Try
			{

				$_resp = Send-HPOVRequest $newPoolRangeUri POST $newRange -Hostname $_Connection.Name

			}

			Catch
			{

				$PScmdlet.ThrowTerminatingError($_)

			}

			[void]$_Collection.Add($_resp)

        }

	}

	End
	{

        return $_Collection

    }

 }

#######################################################
# Interconnects and Uplinks
#

function Get-HPOVInterconnectType 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = 'Name')]
    Param
	(
        
        [parameter (Position = 0, Mandatory = $false, ParameterSetName = 'Name')]
		[ValidateNotNullorEmpty()]
        [string]$Name = $null,

        [parameter (Position = 0, Mandatory = $true, ParameterSetName = 'PartNumber')]
		[ValidateNotNullorEmpty()]
        [string]$PartNumber = $null,

		[parameter(Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

        [switch]$list

    )

    Begin 
	{ 

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$Collection = New-Object System.Collections.ArrayList
		$NotFound   = New-Object System.Collections.ArrayList

		if ($PSBoundParameters['List'])
		{

			Write-Warning 'The -list parameter has been deprecated.  Please update your scripts.'

		}
    
    }
    
    Process 
	{

		ForEach ($_appliance in $ApplianceConnection)
		{

			$uri = $interconnectTypesUri + "?sort=name:descending"

			if ($PSboundParameters['Name']) 
			{ 
				
				$uri += "&filter=name='$name'" 
			
			}
			
			elseif ($PSboundParameters['PartNumber']) 
			{
				
				$uri += "&filter=partNumber='$partNumber'" 
			
			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"

			$resp = Send-HPOVRequest $uri -Appliance $_appliance

			if ($resp.count -gt 0)
			{

				$resp.members | Sort-Object name | % {

					$_interconnectType = $_

					$_interconnectType | % { $_.PSObject.TypeNames.Insert(0,'HPOneView.Networking.InterconnectType')}

					[void]$Collection.Add($_interconnectType)

				}

			}

			else 
			{

				[Void]$NotFound.Add($_appliance.Name)

			}

		}

    }

    end 
	{

        if ((-not($Collection) -or ($NotFound.count -gt 1)) -and $Name) 
		{

			$Collection

            $errorRecord = New-ErrorRecord HPOneView.InterconnectResourceException InterconnectTypeNameResourceNotFound ObjectNotFound 'Name' -Message "No Interconnect Types with '$Name' name were found on appliance $($NotFound -join ", ")." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        elseif ((-not($Collection) -or ($NotFound.count -gt 0)) -and $PartNumber) 
		{

			$Collection

			$errorRecord = New-ErrorRecord HPOneView.InterconnectTypeResourceException InterconnectTypePartnumberResourceNotFound ObjectNotFound 'PartNumber' -Message "No Interconnect Types with '$PartNumber' partnumber were found on appliance $($NotFound -join ", ")." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        else 
		{ 
		
			return $Collection

        }

    }

}

function Get-HPOVInterconnect 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param 
	(

		[parameter(Position = 0, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[String]$Name = $null,

		[parameter(Position = 1, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

		[parameter (Mandatory = $false)]
		[alias("x", "exportFile")]
		[ValidateScript({split-path $_ | Test-Path})]
		[String]$Export

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$InterconnectCollection = New-Object System.Collections.ArrayList

		$NotFound   = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{
		
		$name = $name -replace ("[*]","%25") -replace ("[&]","%26")

		ForEach ($_appliance in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_appliance.Name)' Appliance (of $($ApplianceConnection.Count))"		

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to retrieve Interconnects."

			$_uri = $script:interconnectsUri + "?sort=name:asc"

			$_interconnects = Send-HPOVRequest $_uri -hostname $_appliance.Name

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($_interconnects.count) Interconnects found."

			if ($Name) 
			{ 

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filtering for '$Name'."

				$_interconnects.members = $_interconnects.members | ? { $_.name -match $name } 

				$_interconnects.count = $_interconnects.members.count
			
				if($_interconnects.count -eq 0) 
				{ 
			       
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Interconnect '$name' was not found. Adding appliance to notfound collection."       
					
					[Void]$NotFound.Add($_appliance.Name)
			        
				}

			}
			
			if ($_interconnects.members) 
			{

				$_interconnects.members | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Networking.Interconnect") } 
				$_interconnects.members.ports | ? { $_.portType -eq "Uplink" -or $_.portType -eq "Stacking" } | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Networking.Interconnect.UplinkPort") } 
				$_interconnects.members.ports | ? { $_.portType -eq "Downlink" } | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Networking.Interconnect.DownlinkPort") }

				$_interconnects.members | % { [void]$InterconnectCollection.Add($_) }
			    
			}

		}

    }

    end 
	{

		Write-Verbose "Done. $($InterconnectCollection.count) logical interconnect(s) found."

		if($Export)
		{ 
		        
		    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Exporting to: $($Export)"

		    $InterconnectCollection  | convertto-json -Depth 99 | Set-Content -Path $Export -force -encoding UTF8
		        
		}

		else
		{

			$InterconnectCollection

		}

		#Generate final error if name wasn't found on appliance(s)
        if ($NotFound.count -gt 0 -and $Name) 
		{

            $errorRecord = New-ErrorRecord HPOneView.InterconnectResourceException InterconnectNameResourceNotFound ObjectNotFound 'Name' -Message "No Interconnect resources with '$Name' name were found on appliance $($NotFound -join ", ")." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }
    
}

function Get-HPOVLogicalInterconnect 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default")]
    Param 
	(

		[parameter (Position = 0, Mandatory = $false, ParameterSetName = "default")]
		[ValidateNotNullorEmpty()]
		[String]$Name = $null,
		
		[parameter(Position = 1, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

		[parameter (Position = 1, Mandatory = $false, ParameterSetName = "default")]
		[alias("x", "ExportFile")]
		[ValidateScript({split-path $_ | Test-Path})]
		[String]$Export

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$LiCollection = New-Object System.Collections.ArrayList
		$NotFound     = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{
		
		if ($Name)
		{

			$Name = $Name -replace ("[*]","%25") -replace ("[&]","%26")

		}
		

		ForEach ($_appliance in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_appliance.Name)' Appliance (of $($ApplianceConnection.Count))"		

			if ($Name) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Interconnect name provided: '$Name'"

				#Search Index to workaround a CRM LI filter bug
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Searching index for Logical Interconnect resource."

				# // Uncomment when CRM LI filter bug is fixed.
				#$uri = $logicalInterconnectsUri + "?filter=name='$name'"

				$uri = $script:indexUri + "?userQuery='$Name'&category=logical-interconnects&sort=name:asc"

			}

			else 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Logical Interconnect name provided. Looking for all Logical Interconnect resources."
				
				$uri = $logicalInterconnectsUri

			}

			Try
			{

				$resp = Send-HPOVRequest $uri -Hostname $_appliance.Name

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
				
			if ($resp.count -eq 0 -and $name) 
			{ 

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Interconnect '$name' resource not found on '$($_appliance.Name)'. Adding to notfound collection."

				$errorRecord = New-ErrorRecord InvalidOperationException LogicalInterconnectGroupNotFound ObjectNotFound 'Name' -Message "Specified Logical Interconnect '$name' was not found.  Please check the name and try again." #-verbose
				$pscmdlet.ThrowTerminatingError($errorRecord)  
            
				[Void]$NotFound.Add($_appliance.Name)

			}

			elseif ($resp.count -eq 0) 
			{ 

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Logical Interconnect resources found on '$($_appliance.name)'."

			}

			else 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found $($resp.count) Logical Interconnect resource(s)."

				$resp.members  | % { 
				
					$_.PSobject.TypeNames.Insert(0,"HPOneView.Networking.LogicalInterconnect")  #FORMAT DONE
					$_.snmpConfiguration | % { $_.PSObject.TypeNames.Insert(0,'HPOneView.Networking.LogicalInterconnect.SnmpConfiguration') } #FORMAT DONE
					$_.snmpConfiguration.trapDestinations | % { $_.PSObject.TypeNames.Insert(0,'HPOneView.Networking.LogicalInterconnect.SnmpConfiguration.Destinations') } #FORMAT DONE
					$_.ethernetSettings | % { $_.PSObject.TypeNames.Insert(0,'HPOneView.Networking.LogicalInterconnect.InterconnectSettings') }
					$_.telemetryConfiguration | % { $_.PSObject.TypeNames.Insert(0,'HPOneView.Networking.LogicalInterconnect.UtilizationSampleSettings') }
					$_.portMonitor | % { $_.PSObject.TypeNames.Insert(0,'HPOneView.Networking.LogicalInterconnect.PortMonitorSettings') }
					
					[void]$LiCollection.Add($_) 
				
				}
 
			}

		}
   
    }

    End 
	{
		
		Write-Verbose "Done. $($lsws.count) logical interconnect group(s) found." 

		if ($Export)
		{
			
			$LiCollection | convertto-json -Depth 99 | Set-Content -Path $exportFile -force -encoding UTF8 
		
		}
        
        else 
		{

			 $LiCollection 
		
		}    
		
		#Generate final error if name wasn't found on appliance(s)
        if ($NotFound.count -gt 0 -and $Name) 
		{

            $errorRecord = New-ErrorRecord HPOneView.LogicalInterconnectResourceException LogicalInterconnectNameResourceNotFound ObjectNotFound 'Name' -Message "No Logical Interconnect with '$Name' name were found on appliance $($NotFound -join ", ")." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }   

    }

}

function Update-HPOVLogicalInterconnect 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default", SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    Param 
	(

		[parameter(Position = 0, Mandatory = $false, ValueFromPipeline = $true, ParameterSetName = "default", HelpMessage = "Specify the Logical Interconnect to Update.")]
		[parameter(Position = 0, Mandatory = $false, ValueFromPipeline = $true, ParameterSetName = "Reapply", HelpMessage = "Specify the Logical Interconnect to Update.")]
		[ValidateNotNullorEmpty()]
		[Alias('uri', 'li','name')]
		[object]$Resource = $null,
		
		[parameter(Position = 1, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

		[parameter(Mandatory = $true, ValueFromPipeline = $false, ParameterSetName = "Reapply", HelpMessage = "Reapply the Logical Interconnect configuration. Does not update from parent Logical Interconnect Group.")]
		[switch]$Reapply

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

        $_returntasks = New-Object System.Collections.ArrayList
		$_liobjects   = New-Object System.Collections.ArrayList

    }

    Process 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($Resource.count) LI objects."

        foreach ($_li in $Resource) 
		{
            
            #Name provided
            if (($_li -is [String]) -and (-not($_li.StartsWith($script:logicalInterconnectsUri))))
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LI Name was provided '$($_li)'"

				#Loop through appliance connections to add LI objects to collection
				ForEach ($_appliance in $ApplianceConnection)
				{

					Try 
					{

						Get-HPOVLogicalInterconnect $_li -ApplianceConnection $_appliance.Name | % { [void]$_liobjects.Add($_) }

					}
						
					Catch
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $_.FullyQualifiedErrorId Error Caught:  $($_.Exception.Message)"

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Retrieved $($_liobjects.count) LI Objects"

            }

            elseif (($_li -is [String]) -and ($_li.StartsWith($script:logicalInterconnectsUri))) 
			{

				#User didn't provide an appliance connection during call
				if (-not($PSBoundParameters['ApplianceConnection']) -and $ApplianceConnection.Count -gt 1)
				{

					$errorRecord = New-ErrorRecord InvalidOperationException LogicalInterconnectUriNoApplianceConnection InvalidArgument 'ApplianceConnection' -Message "A Logical Interconnect URI was provided in the -Resource parameter, but no Appliance Connection specified.  URI's are unique per appliance connection.  Please specify an Appliance Connection and try your call again."
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}
				
				#User provided more than 1 appliance connection, and LI URI, generate error
				elseif ($ApplianceConnection.Count -gt 1)
				{

					$errorRecord = New-ErrorRecord InvalidOperationException LogicalInterconnectUriMultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message "A Logical Interconnect URI was provided in the -Resource parameter, with multiple Appliance Connections specified.  URI's are unique per appliance connection.  Please specify an Appliance Connection and try your call again."
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LI URI was provided $($_li)"

				Try 
				{

					Send-HPOVRequest $_li -HostName $ApplianceConnection.Name | % { [void]$_liobjects.Add($_) }

				}
						
				Catch
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $_.FullyQualifiedErrorId Error Caught:  $($_.Exception.Message)"

					$PSCmdlet.ThrowTerminatingError($_)

				}

            }

            elseif (($_li -is [PSCustomObject]) -and ($_li.category -ieq 'logical-interconnects')) 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LI Object was provided $($_li | out-string)"

				[void]$_liobjects.Add($_li)

            }

            else 
			{

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Resource' -TargetType $_li.GetType().Name -Message "An invalid Resource object was provided. $($_li.GetType()) $($_li.category) was provided.  Only type String or PSCustomObject, and 'logical-interconnects' object category are permitted."
				$PSCmdlet.ThrowTerminatingError($errorRecord)

            }

        }

    }

    End 
	{

		#Loop through liobject collection to perform action
		ForEach ($_liobject in $_liobjects)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Logical Interconnect: $($_liobject.name)"

			if ($PSboundParameters['Reapply'])
			{ 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Reapply LI configuration requested."
                    
                if ($pscmdlet.ShouldProcess($_liobject.name,"Reapply Logical Interconnect configuration. WARNING: Depending on this action, there might be a brief outage."))
				{ 

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to reapply configuration"
                    
					$uri = $_liobject.uri + "/configuration"

					$task = Send-HPOVRequest $uri PUT -Hostname $_liobject.ApplianceConnection.Name

					[void]$_returntasks.Add($task)
                        
                }

                elseif ($PSBoundParamters['WhatIf'])
				{
					
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User included -WhatIf."

					#Write-Host "WhatIf: Reapply Logical Interconnect '$($_liobject.name)' configuration." -ForegroundColor Yellow
				
				}

				else
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User cancelled."

				}
                
            }

            else 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Update '$($liDisplayName)' Logical Interconnect from parent $($parentLig.name)."
                
				$_ligname = (Send-HPOVRequest $_liobject.logicalInterconnectUri -HostName $_liobject.ApplianceConnection.Name).Name
				    
                if ($pscmdlet.ShouldProcess($_liobject.name,"Update Logical Interconnect from Group $_ligname. WARNING: Depending on the Update, there might be a brief outage."))
				{    
                    
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"

					$uri = $_liobject.uri + "/compliance"

					$task = Send-HPOVRequest $uri PUT -Hostname $_liobject.ApplianceConnection.Name

                    [void]$_returntasks.Add($task)

                }

                elseif ($PSBoundParamters['WhatIf'])
				{
					
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User included -WhatIf."

					Write-Host "WhatIf: Update Logical Interconnect '$($_liobject.name)' from Parent Group '$_ligname'." -ForegroundColor Yellow
				
				}

				else
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User cancelled."

				}

            }

		}

        return $_returntasks

    }

}

function Show-HPOVLogicalInterconnectMacTable 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default")]
    Param 
	(

        [parameter (Position = 0, Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default")]
        [parameter (Position = 0, Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "MACAddress")]
		[parameter (Mandatory, ValueFromPipeline, ParameterSetName = "Pipeline")]
		[ValidateNotNullorEmpty()]
        [alias("name","li")]
        [object]$LogicalInterconnect = $null,

        [parameter (Position = 1, Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default")]
		[parameter (Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "Pipeline")]
		[ValidateNotNullorEmpty()]
        [string]$network = $null,

        [parameter (Position = 1, Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "MACAddress")]
        [validatescript({if ($_ -match $script:macAddressPattern) {$true} else { throw "The input value '$_' does not match 'aa:bb:cc:dd:ee:ff'. Please correct the value and try again."}})]
        [alias("mac")]
        [string]$MacAddress = $null,

        [parameter (Position = 2, Mandatory = $false, ParameterSetName = "default")]
        [parameter (Position = 2, Mandatory = $false, ParameterSetName = "MACAddress")]
		[parameter (Mandatory = $false, ParameterSetName = "Pipeline")]
        [alias("x", "ExportFile")]
        [ValidateScript({split-path $_ | Test-Path})]
        [String]$Export,
		
		[parameter(Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		if ($PSCmdlet.ParameterSetName -ne 'Pipeline')
		{

			if ($ApplianceConnection.Count -eq 0)
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession ObjectNotFound 'Hostname' -Message "No appliance Hostname parameter provided and no valid appliance session(s) found.  Please use Connect-HPOVMgmt to establish an appliance connection." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			ForEach ($_Connection in $ApplianceConnection) 
			{

				Try 
				{
				
					$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}

		}

        $MacTables = New-Object System.Collections.ArrayList

    }

    Process 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Interconnect via PipeLine: $PipelineInput"

        if (-not($LogicalInterconnect))
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Logical Interconnects provided via parameter. Getting all LI resources."

			Try
			{

				$LogicalInterconnect = Get-HPOVLogicalInterconnect

			}
            
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

        }

        ForEach ($li in $LogicalInterconnect) 
		{

            if ($li -is [PSCustomObject] -and $li.category -eq "logical-interconnects") 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Interconnect object provided: $($li.name)"

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Interconnect object URI: $($li.uri)"

                $uri = $li.uri +"/forwarding-information-base"

            }

            else 
			{

                #Unsupported type
                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'LogicalInterconnect' -TargetType $li.GetType().Name -Message "The parameter -LogicalInterconnect contains an invalid parameter value type, '$($li.gettype().fullname)' is not supported.  Only [PSCustomObject] type is allowed." #-verbose
                $PSCmdlet.WriteError($errorRecord)

            }

            #Filter the request for a specific Network
            if ($Network) 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filtering for '$Network' Network Resource"
                
                $_Network = Get-HPOVNetwork $network -ApplianceConnection $li.ApplianceConnection.Name

				$_internalVlanId = $_Nework.internalVlanId

                $uri += "?filter=internalVlan=$_internalVlanId"

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $uri"

				Try
				{

					$resp = (Send-HPOVRequest $uri -Hostname $li.ApplianceConnection.Name).members

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
                

            }

            elseif ($MacAddress) 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filtering for MAC Address '$MacAddress'"

                $uri += "?filter=macAddress='$MacAddress'"

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $uri"

                Try
				{

					$resp = (Send-HPOVRequest $uri -Hostname $li.ApplianceConnection.Name).members

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
                

            }

            else 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Generating '$uri' mactable file."

                Try
				{

					$macTableFile = (Send-HPOVRequest $uri -Hostname $li.ApplianceConnection.Name).members

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
                

                if ("Success","Completed" -match $macTableFile.state) 
				{

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($macTableFile.uri)' mactable file."

                    $resp = Download-MacTable $macTableFile.uri
                
					#Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] MAC Table entries: $($resp | Out-String)"

                }

                else 
				{

                    $errorRecord = New-ErrorRecord HPOneView.NetworkResourceException InvalidInterconnectFibDataInfo InvalidResult 'Show-HPOVLogicalInterconnectMacTable' -Message ($macTableFile.state + ": " + $macTableFile.status)
                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                }


            }

			$resp | % {

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding $($_.address) to collection"

				[void]$MacTables.Add($_)

			} 

        }

    }

    End 
	{

        if ($list) 
		{
            
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Displaying formatted table."

            if ($name -or $MacAddress) 
			{

                $m = @{Expression={($_.interconnectName -split ",")[0]};Label="Enclosure"},
                     @{Expression={($_.interconnectName -split ",")[1]};Label="Interconnect"},		         
                     @{Expression={$_.networkInterface};Label="Interface"},
                     @{Expression={$_.macAddress};Label="Address"},
                     @{Expression={$_.entryType};Label="Type"},
                     @{Expression={$_.networkName};Label="Network"},
                     @{Expression={$_.externalVlan};Label="VLAN"}

            }

            else 
			{

                $m = @{Expression={$_.Enclosure};Label="Enclosure"},
                     @{Expression={$_.Interconnect};Label="Interconnect"},
                     @{Expression={$_.Interface};Label="Interface"},
                     @{Expression={$_.address};Label="Address"},
                     @{Expression={$_.type};Label="Type"},
                     @{Expression={$_.network};Label="Network"},
                     @{Expression={$_.extVlan};Label="VLAN"},
                     @{Expression={$_.LAGPorts};Label="LAG Ports"}

            }

            $MacTables | sort "Enclosure","Interconnect",macAddress | format-table $m -autosize

        }

        elseif ($PSBoundParameters['Export']) 
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Exporting to CSV file: $Export"

            $MacTables | sort Enclosure,Interconnect,macAddress | Export-CSV $Export -NoTypeInformation

        }
        else 
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Displaying results."

            $MacTables | sort Enclosure,Interconnect,macAddress

        }
        
        "[$($MyInvocation.InvocationName.ToString().ToUpper())] Done. {0} mac table entry(ies) found." -f $MacTables.Count | write-verbose

    }

}

function Download-MacTable 
{
    
<#
    .SYNOPSIS
    Download Logical Interconnect MAC Table CSV.

    .DESCRIPTION
    This internal helper function will download the MAC Table CSV from a provided Logical Interconnect, parse it and return an array of MAC Table entries.

    .PARAMETER Uri
    [System.String] URI of Logical Interconnect.

	.PARAMETER Hostname
	[System.String] Hostname of Appliance

    .INPUTS
    None.

    .OUTPUTS
    System.Array
    Array of MAC Table entries.

    .LINK
    Get-HPOVLogicalInterconnect

    .EXAMPLE
    PS C:\> $encl1li = Get-HPOVLogicalInterconnect Encl1-LI
    PS C:\> Download-MACTable $encl1li.uri

    Get the Logical Interconnect 'Encl1-LI' and 
            
#>

    [CmdLetBinding()]
    Param 
	(

        [parameter(Position = 0, Mandatory, HelpMessage = "Specify the URI of the object to download.")]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({if ($_.startswith('/rest/logical-interconnects/')) { $true } else {throw "-URI must being with a '/rest/logical-interconnects/' in its value. Please correct the value and try again."}})]
        [string]$uri,
        
		[parameter(Position = 1, Mandatory, HelpMessage = "Appliance Hostname")]
        [ValidateNotNullOrEmpty()]
		[string]$Hostname

    ) 

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        $enc = [System.Text.Encoding]::UTF8

    }
 
    Process
	{	

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Download URI: $($uri)"

	    [System.Net.httpWebRequest]$fileDownload = RestClient GET $uri $Hostname

	    $fileDownload.accept = "application/zip,application/octet-stream,*/*"

        $i = 0
        foreach ($h in $fileDownload.Headers) 
		{ 
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request Header $($i): $($h) = $($fileDownload.Headers[$i])"
			
			$i++
		
		}
		    
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Request: GET $($fileDownload.RequestUri.AbsolutePath | out-string)"
        
        #Get response
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting response"
        [Net.httpWebResponse]$rs = $fileDownload.GetResponse()

        #Display the response status if verbose output is requested
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Status: $([int]$rs.StatusCode) $($rs.StatusDescription)"

        $i = 0
        foreach ($h in $rs.Headers) 
		{ 
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Response Header $($i): $($h) = $($rs.Headers[$i])"
			
			$i++ 
		
		}

        #Request is a redirect to download file contained in the response headers
        $fileName = ($rs.headers["Content-Disposition"].Substring(21)) -replace "`"",""

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filename: $($fileName)"

	    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filesize:  $($rs.ContentLength)"

        $responseStream = $rs.GetResponseStream()

        #Define buffer and buffer size
		[int] $bufferSize = ($rs.ContentLength*1024)
	    [byte[]]$Buffer   = New-Object byte[] ($rs.ContentLength*1024)
        [int] $bytesRead  = 0

		#This is used to keep track of the file upload progress.
	    $totalBytesToRead = $rs.ContentLength
	    $numBytesRead     = 0
		$numBytesWrote    = 0

		#Read from stream
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Reading HttpWebRequest file stream."
        $responseStream.Read($Buffer, 0, $bufferSize) | out-Null
        
        #Write to output stream
        $outStream = new-object System.IO.MemoryStream (,$Buffer)

	    #Clean up our work
	    $responseStream.Close()
	    $rs.Close()
	    
        $source = $outStream.ToArray()
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Decompressing HttpWebRequest file."
        $sr = New-Object System.IO.Compression.GZipStream($outStream,[System.IO.Compression.CompressionMode]::Decompress)
        
        #Reset variable to collect uncompressed result
        $byteArray = New-Object byte[]($source.Length+1024)
        
        #Decompress
        [int]$rByte = $sr.Read($byteArray, 0, $source.Length)

		#Transform byte[] unzip data to string
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Converting Byte array to String Characters."
        $sB = New-Object System.Text.StringBuilder($rByte)
        
        #Read the number of bytes GZipStream read and do not a for each bytes in resultByteArray
        for ([int] $i = 0; $i -lt $rByte; $i++) 
		{

            $sB.Append([char]$byteArray[$i]) | Out-Null

        }
        
        $sr.Close()
        $sr.Dispose()

    }

    end 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Building string array in CSV format"

        $macTableArray = $sb.ToString() -split "`n"
        $header        = "enclosure","interconnect","interface","address","type","network","extVLAN","intVLAN","serverProfile","uplinkSet","LAGPort1","LAGPort2","LAGPort3","LAGPort4","LAG Port5","LAG Port6","LAG Port7","LAG Port8"
        $macTableArray = $macTableArray[1..($macTableArray.count)]

        $e = @{Expression={
             
                 $lagport = $_
                 1..8 | % { if ($lagport."LAGPort$($_)") { $lagport."LAGPort$($_)" } } 
                           
             };name="LAGPorts"}

        $macTable = $macTableArray | ConvertFrom-Csv -Header $header | select "enclosure","interconnect","interface","address","type","network","extVLAN","intVLAN","serverProfile","uplinkSet",$e

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Returning results."

        Return $macTable

    }

}

function Install-HPOVLogicalInterconnectFirmware 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param 
	(
        
        [parameter(Position = 0, Mandatory, ValueFromPipeline, ParameterSetName = "default", HelpMessage = "Specify the Logical Interconnect to Update.")]
        [Alias('name','uri', 'li')]
		[ValidateNotNullorEmpty()]
        [object]$LogicalInterconnect = $null,

        [parameter(Position = 1, Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Specify the Logical Interconnect udpate method: Update, Activate, Stage.")]
        [ValidateSet('Update','Activate','Stage')]
        [string]$Method = "Update",

        [parameter(Position = 2, Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Specify the Logical Interconnect to Update.")]
        [ValidateSet('OddEven','Parallel','Serial')]
        [Alias('Order','ActivateOrder')]
        [string]$EthernetActivateOrder = 'OddEven',

		[parameter(Position = 3, Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Delay in minutes")]
        [ValidateNotNullorEmpty()]
        [int]$EthernetActivateDelay = 5,

		[parameter(Position = 4, Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Specify the Logical Interconnect to Update.")]
        [ValidateSet('OddEven','Parallel','Serial')]
        [String]$FCActivateOrder = 'Serial',

		[parameter(Position = 5, Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Delay in minutes")]
        [ValidateNotNullorEmpty()]
        [int]$FCActivateDelay = 5,

        [parameter(Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Specify the SPP Baseline Object or Name.")]
        [Alias('spp')]
        [object]$Baseline = $null,

		[parameter(Mandatory = $false)]
		[switch]$Async,

        [parameter(Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Force install firmware version from SPP Baseline; will downgrade or re-install.")]
        [switch]$Force,

		[parameter(Mandatory = $false, ValueFromPipelineByPropertyName, HelpMessage = "Enter the Appliance Name or Object")]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = $null

    )

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$TaskCollection = New-Object System.Collections.ArrayList

        if (-not($LogicalInterconnect))
		{

			$PipelineInput = $True

		}
        
    }

    Process 
	{

		if ($PipelineInput -or $LogicalInterconnect -is [PSCustomObject])
		{

			#Validate Logical Interconnect Object Type
			if (-not($LogicalInterconnect -is [PSCustomObject]) -and $LogicalInterconnect.category -ne 'local-interconnects') 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] invalid LogicalInterconnect passed:  $($LogicalInterconnect)"

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'INSTALL-HPOVLOGICALINTERCONNECTFIRMWARE' -Message "The 'LogicalInterconnect' parameter value '$($LogicalInterconnect)' is invalid.  Please check the parameter value and try again." #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)
        
			}

		}

		else
		{

			if ($ApplianceConnection -eq $null)
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message 'No Appliance Connection was provided.  Please provide a valid ApplianceConnection Object.'
				$PSCmdlet.ThrowTerminatingError($errorRecord)
			
			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for Logical Interconnect '$LogicalInterconnect' from Get-HPOVLogicalInterconnect."

			Try
			{
				
				$LogicalInterconnect = Get-HPOVLogicalInterconnect $LogicalInterconnect -ApplianceConnection $ApplianceConnection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Validating Baseline input value."

		switch ($Baseline.GetType().Name)
		{

			'String'
			{

				Try
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Firmware Baseline name passed:  $($Baseline)"
						
					$baselineObj = Get-HPOVSppFile -Name $Baseline -ApplianceConnection $LogicalInterconnect.ApplianceConnection.Name

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			'PSCustomObject'
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Firmware Baseline object passed:  $($Baseline | FL * | Out-String)"

				if ($Baseline.category -ne 'firmware-drivers')
				{
					
					$errorRecord = New-ErrorRecord HPOneView.BaselineResourceException InvalidBaselineObject InvalidArgument 'Baseline' -TargetType 'PSObject' -Message "The Baseline provided in an invalid object.  Baseline category value '$($Basline.caetegory)', expected 'firmware-drivers'.  Please check the parameter value and try again."
			        $PSCmdlet.ThrowTerminatingError($errorRecord)
					
				}

			}

		}

        $Staging    = $False
        $Activating = $False

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($LogicalInterconnect.name)' Logical Interconnect."

		$_Request = [PsCustomObject]@{ 
			
			command                 = $null; 
			ethernetActivationType  = [String]$EthernetActivateOrder;
			ethernetActivationDelay = [int]$EthernetActivateDelay;
			fcActivationType        = [String]$FCActivateOrder;
			fcActivationDelay       = [int]$FCActivateDelay;
			sppUri                  = $null; 
			force                   = [bool]$PSBoundParameters['Force']
		
		}

        switch ($Method) 
		{

            {'Update', 'Stage' -match $_}
			{ 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$Method' Method called."        
                
				$_Request.command = $Method
				$_Request.sppUri  = $baselineObj.uri
                
            }

            "Activate" 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] 'Activate' Method called."
                
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verifying '$(LogicalInterconnect.name)' LI is in a Staged state."
                
				$_FirmwareStatus = Send-HPOVRequest ($LogicalInterconnect.uri + "/firmware") -Hostname $LogicalInterconnect.ApplianceConnection.Name

                #Validate interconnect firmware update state
                switch ($_FirmwareStatus.state) 
				{
                     
                    'STAGED' 
					{ 
                        
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($LogicalInterconnect.name)' LI is in the proper '$($_FirmwareStatus.state)' state."

                        #$baselineObj = [pscustomobject] @{ uri = $_FirmwareStatus.sppUri }

						$_Request.command = 'ACTIVATE'
						$_Request.sppUri  = $_FirmwareStatus.sppUri

                    }
                        
                    'STAGING'
					 { 
                        
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($LogicalInterconnect.name)' is currently being staged with firmware. Please wait until the task completes."
                            
                        #Locate and return running task.
                        $_task = Get-HPOVTask -State Running -resource $LogicalInterconnect.name -ApplianceConnection $LogicalInterconnect.ApplianceConnection.Name

						$_task | ? { $_.taskStatus.StartsWith('Staging') } | % {

							[void]$TaskCollection.Add($_)

						}

                        # Flag to skip the command processing IF block below
                        $Staging = $true
                            
                    }

                    'STAGING_FAILED' 
					{ 
                        
                        $errorRecord = New-ErrorRecord InvalidOperationException InvalidLogicalInterconnectState InvalidResult 'LogicalInterconnect' -Message "The $($LogicalInterconnect.name) Logical Interconnect is in an invalid state ($($_FirmwareStatus.state))in order to issue the Activate command." #-verbose
                        $PSCmdlet.ThrowTerminatingError($errorRecord)
                        
                    }

                    'ACTIVATED' 
					{ 
						
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($LogicalInterconnect.name)' is already activated."
						
						Write-Warning "'$($LogicalInterconnect.name)' is already activated."
						
						Return 
					
					}

                    'ACTIVATING' 
					{
                            
                        #Logical Interconnect is already processing the Activate command.
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($LogicalInterconnect.name)' is already activating. Returning task resource."

                        # Flag to skip the command processing IF block below
                        $activating = $True
                            
                        #Locate and return running task.
                        $_task = Get-HPOVTask -State Running -resource $LogicalInterconnect.name -ApplianceConnection $LogicalInterconnect.ApplianceConnection.Name

						$_task | ? { $_.taskStatus.StartsWith('Activating') } | % {

							[void]$TaskCollection.Add($_)

						}

                    }

                    'ACTIVATION_FAILED' 
					{ 
                        
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($LogicalInterconnect.name)' failed a prior activation request.  LI is in a valid state to attempt Activation command."

                        #$baselineObj = [pscustomobject] @{ uri = $_FirmwareStatus.sppUri }

						$_Request.command = 'ACTIVATE'
						$_Request.sppUri  = $_FirmwareStatus.sppUri
                            
                    }

                    'PARTIALLY_ACTIVATED' 
					{ 
                        
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($LogicalInterconnect.name)' is Partially Activated.  LI is in a valid state to attempt Activation command."
                        $baselineObj = [pscustomobject] @{ uri = $_FirmwareStatus.sppUri }
                        
                    }

                    'PARTIALLY_STAGED' 
					{
                        
                        $errorRecord = New-ErrorRecord InvalidOperationException InvalidLogicalInterconnectState InvalidResult 'LogicalInterconnect' -Message "The $($LogicalInterconnect.name) Logical Interconnect is in an invalid state ($($_FirmwareStatus.state)) in order to issue the Activate command." #-verbose
                        $PSCmdlet.ThrowTerminatingError($errorRecord)
                        
                    }

                    'UNINITIALIZED' 
					{ 
                        
                        <# Generate Error that firmware has not been staged #> 
                        $errorRecord = New-ErrorRecord InvalidOperationException NoStagedFirmwareFound ObjectNotFound 'LogicalInterconnect' -Message "No staged firmware found for '$($LogicalInterconnect.name)' Logical Interconnect.  Use Install-HPOVLogicalInterconnectFirmware -method Stage to first stage the firmware before attempting to Activate." #-verbose
                        $PSCmdlet.ThrowTerminatingError($errorRecord)
                            
                    }

                }

                $interconnectOrderUris = New-Object System.Collections.ArrayList

                #Handle Interconnect Activation order
                #switch ($ActivateOrder) 
				#{
				#
                #    'Odd' 
				#	{
                #        
				#
                #        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for Odd bay Interconnects."
                #        ForEach ($interconnect in $li.interconnectMap.interconnectMapEntries) { 
                #            
                #            #"found interconnect: " + $interconnect
                #                
                #            $found = $interconnect.location.locationEntries | ? { $_.type -eq "Bay" -and $_.Value % 2 -eq 1 -and $interconnect.interconnectUri }
                #                
                #            if($found) {
                #                                                
                #                $interconnectOrderUris += $interconnect.interconnectUri
                #            
                #                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found Odd Interconnect located in Bay $($found.value)"
                #            
                #            }
                #            
                #        }
				#
                #    }
				#
                #    'Even' {
                #        
                #        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for Even bay Interconnects."
                #        ForEach ($interconnect in $li.interconnectMap.interconnectMapEntries) { 
                #            
                #              
                #            $found = $interconnect.location.locationEntries | ? { $_.type -eq "Bay" -and $_.Value % 2 -eq 0 -and $interconnect.interconnectUri }
                #                
                #            if($found) {
                #                                                
                #                $interconnectOrderUris += $interconnect.interconnectUri
                #            
                #                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found Even Interconnect located in Bay $($found.value)"
                #            
                #            }
                #            
                #        }
                #                                    
                #    }
				#
                #    'All' { $interconnectOrderUris = $li.interconnects }
				#
                #}
				#
                #if (! $activating -and ! $Staging) 
				#{ 
				#	
				#	$request = [PsCustomObject]@{ command = "ACTIVATE"; sppUri = $baselineObj.uri; interconnects = $interconnectOrderUris } 
				#
				#}
                
            }

        }

        #Need to prompt user to update or activate firmware, which could cause an outage.
        if (('Update', 'Stage' -match $_) -and (-not($Activating)) -and (-not($Staging)))
		{

			Write-Warning 'Module activation may cause a network outage if Activation Order is Parallel.'

            if ($pscmdlet.ShouldProcess($LogicalInterconnect.name,'update and activate Interconnect modules')) 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User was prompted warning and accepted. Sending request."

                Try
				{

					$_taskResults = Send-HPOVRequest -method PUT -uri ($LogicalInterconnect.uri + "/firmware") -body $_Request -Hostname $LogicalInterconnect.ApplianceConnection.Name

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
					
            }

            else 
			{ 
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User was prompted and selected No, cancelling the update for $($LogicalInterconnect.name)" 
			
			}

        }

        #User is staging firmware, no need to prompt.
        elseif (-not($Activating) -and (-not($Staging)))
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Beginning to stage firmware to '$($LogicalInterconnect.name)'."
                
            $_taskResults = Send-HPOVRequest -method PUT -uri ($li.uri + "/firmware") -body $_Request -Hostname $LogicalInterconnect.ApplianceConnection.Name

        }


		if (-not($PSBoundParameters['Async']))
		{

			Try
			{

				$_taskResults = Wait-HPOVTaskComplete $_taskResults -ApplianceConnection $_taskResults.ApplianceConnection.Name

			}

			Catch
			{

				$PScmdlet.ThrowTerminatingError($_)

			}

		}

		[void]$TaskCollection.Add($_taskResults)

    }

    end 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Finished, returning results."

        return $TaskCollection

    }


}

function Show-HPOVPortStatistics {
    [CmdLetBinding(DefaultParameterSetName = "InterconnectPort")]
    Param (
		[Parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = "Pipeline")]
		[Parameter(Position = 1, Mandatory = $false, ParameterSetName = "InterconnectPort")]
        [object]$port = $null,
        [Parameter(Position = 0, Mandatory = $true, ParameterSetName = "InterconnectPort")]
        [object]$interconnect = $null
    )
	Begin {
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"
        if (-not($global:cimgmtSessionId)) {
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)
        }
    }
    Process {
        Switch ($PSCmdLet.ParameterSetName) {
            "Pipeline" {
				switch ($port.GetType().Name){
					"String" {
						#Value is URI					
						if ($port.StartsWith('/rest/interconnects')) {
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Port URI provided: $port"
							#Get Port Object for later use when filtering Interconnect
							$port = Send-HPOVRequest $port
							#Get Interconnect Object
							$interconnect = Send-HPOVRequest $port.uri.Substring(0,56)
						}
						else{
							$errorRecord = New-ErrorRecord HPOneView.InterconnectPortResourceException InvalidInterconnectPortParameter InvalidArgument 'Port' -Message "The prameter value for 'port' parameter is not a URI ($($port.type)).  Please specify a specific port ID of a specific Interconnect." #-verbose
							$pscmdlet.ThrowTerminatingError($errorRecord)  
						}
					}
					"PSCustomObject" {
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Port Object provided: $($port | Out-String)"
						#Validate the Port Object is type Port
						if ($port.type -ne "port") {
							$errorRecord = New-ErrorRecord HPOneView.InterconnectPortResourceException InvalidInterconnectPortObject InvalidArgument 'Port' -TargetType "PSObject" -Message "The object for 'port' parameter is the wrong type ($($port.type)).  Expected type 'port'.  Please check the object provided and try again." #-verbose
							$pscmdlet.ThrowTerminatingError($errorRecord)  
						}
						$interconnect = Send-HPOVRequest $port.uri.Substring(0,56)
					}
				}
			}
			"InterconnectPort" { 
				switch ($interconnect.GetType().Name){
					"String" {
						#Value is URI					
						if ($interconnect.StartsWith('/rest/interconnects')) {
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] interconnect URI provided: $interconnect"
							#Get Port Object for later use when filtering Interconnect
							$interconnect = Send-HPOVRequest $interconnect
						}
						elseif ($interconnect.StartsWith('/rest/')){
							$errorRecord = New-ErrorRecord HPOneView.InterconnectResourceException InvalidInterconnectParameter InvalidArgument 'Interconnect' -Message "The prameter value for 'interconnect' parameter is not a valid Interconnect URI '$($interconnect)'. Interconnect URI's must begin with '/rest/interconnects/{GUID}'.  Please correct the value and try again." #-verbose
							$pscmdlet.ThrowTerminatingError($errorRecord)  
						}
						else {
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Interconnect '$interconnect'"
							$interconnect = Get-HPOVInterconnect $interconnect
						}
					}
					"PSCustomObject" {
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Interconnect Object provided: $($interconnect | Out-String)"
						#Validate the Port Object is type Port
						if ($interconnect.type -ne "interconnectV2") {
							$errorRecord = New-ErrorRecord HPOneView.InterconnectPortResourceException InvalidInterconnectPortObject InvalidArgument 'Interconnect' -TargetType "PSObject" -Message "The object for 'interconnect' parameter is the wrong type ($($interconnect.type)).  Expected type 'interconnectV2'.  Please check the object provided and try again." #-verbose
							$pscmdlet.ThrowTerminatingError($errorRecord)  
						}
					}
				}
				if ($port) {
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filtering for '$port' within '$($interconnect.name)' Interconnect."
					$port = $interconnect.ports | ? { $_.portName -match $port }
					if (-not($port)) {
						$errorRecord = New-ErrorRecord HPOneView.InterconnectPortResourceException InvalidInterconnectPortObject InvalidArgument 'Port' -Message "The the port '$port' was not found within '$($interconnect.name)'.  Available ports within the interconnect are '$($interconnect.ports.portName -join ",")' Please check the port value and try again." #-verbose
						$pscmdlet.ThrowTerminatingError($errorRecord)  
					}
				}
			}
        }
		$interconnectStatistics = (Send-HPOVRequest ($interconnect.uri + "/statistics"))
		$interconnectStatistics | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Networking.InterconnectStatistics") }
		if ($port) { $interconnectStatistics.portStatistics = $interconnectStatistics.portStatistics | ? { $port.portName -contains $_.portName } }
		#Set the specific TypeNames value for Formats to handle
		foreach ($portobject in $interconnect.ports) {
			switch ($portobject.configPortTypes) {
				{@("EnethFCoE","Ethernet") -match $_ } {
					$TypeName = "HPOneView.Networking.PortStatistics.Ethernet"
					$SubTypeName = "Ethernet"
					Break
				}
				"FibreChannel" {
					$TypeName = "HPOneView.Networking.PortStatistics.FibreChannel"
        			$SubTypeName = "FibreChannel"
					Break
				}
			}
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] inserting '$TypeName' into '$($portObject.portName)' [$($PortObject.configPortTypes -join ",")]"
			($interconnectStatistics.portStatistics | ? { $_.portName -eq $portobject.portName }).PSObject.TypeNames.Insert(0,$TypeName)
			($interconnectStatistics.portStatistics | ? { $_.portName -eq $portobject.portName }) | Add-Member -NotePropertyName portConfigType -NotePropertyValue $SubTypeName -force
		}
		#Insert sampleInterval from the Interconnect itself. Otherwise, portStatistics doesn't contain the interval.
		$interconnectStatistics.portStatistics | % { Add-Member -InputObject $_ -NotePropertyName sampleInterval -NotePropertyValue $interconnectStatistics.moduleStatistics.portTelemetryPeriod -force }
	}
	End {
		Return $interconnectStatistics.portStatistics | sort-Object portConfigType,portName
	}
}

function Get-HPOVLogicalInterconnectGroup 
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdLetBinding()]
	Param 
	(

		[parameter (Position = 0, Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[String]$name = $null,

		[parameter(Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

		[parameter (Mandatory = $false)]
		[alias("x", "export")]
		[ValidateScript({split-path $_ | Test-Path})]
		[String]$exportFile

	)

	Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_connection in $ApplianceConnection) 
		{

			Try {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$LigCollection = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($_connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($Connection.Name)' Appliance (of $($Appliance.Count))"

			if ($PSboundParameters['name']) 
			{

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Interconnect Group name provided: '$name'"

				$name = $name -replace ("[*]","%25") -replace ("[&]","%26")

			    $uri = $logicalInterconnectGroupsUri + "?filter=name='$name'"

			}

			else 
			{

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Logical Interconnect Group name provided. Looking for all Logical Interconnect Group resources."

			    $uri = $logicalInterconnectGroupsUri

			}

			Try
			{

				$ligs = Send-HPOVRequest $uri -Hostname $_connection.Name

			}

			Catch
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] API Error Caught: $($_.Exception.Message)"

				$PSCmdlet.ThrowTerminatingError($_)

			}
			

			if ($ligs.count -eq 0 -and $name) 
			{ 

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Interconnect Group '$name' resource not found. Generating error"

			    $errorRecord = New-ErrorRecord InvalidOperationException LogicalInterconnectGroupNotFound ObjectNotFound 'Name' -Message "Specified Logical Interconnect Group '$name' was not found on '$($_connection.Name)'.  Please check the name and try again." #-verbose
			    $pscmdlet.ThrowTerminatingError($errorRecord)  
			    
			}

			elseif ($ligs.count -eq 0) 
			{ 

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No Logical Interconnect Group resources found on '$($_connection.Name)'."

			}

			else 
			{

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found $($ligs.count) Logical Interconnect Group resource(s)."
			    
				# // Todo Update ConvertTo-Object with LIG
				$ligs.members | % { 
				
					$_.PSObject.TypeNames.Insert(0,'HPOneView.Networking.LogicalInterconnectGroup')	

					[void]$LigCollection.Add($_ ) 
				
				}
 
			}

		}
   
    }

    end 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Done. $($LigCollection.count) logical interconnect group(s) found."       

        if ($exportFile)
		{
			
			$LigCollection | convertto-json -Depth 99 | Set-Content -Path $exportFile -force -encoding UTF8 
		
		}
                
        else 
		{
			
			Return $LigCollection 
		
		}

    }

}

function New-HPOVLogicalInterconnectGroup 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "Default")]
    param 
	(

        [Parameter(Mandatory = $True,ParameterSetName = "Default",HelpMessage = "Please specify the Logical Interconnect Name", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias('ligname')]
        [String]$Name,
        
        [Parameter(Mandatory = $True,ValueFromPipeline = $true,ParameterSetName = "Default",HelpMessage = "Please specify the Interconnect Modules in Hashtable format for all Interconnect Bays", Position = 1)]
        [Hashtable]$Bays,

        [Parameter(Mandatory = $False,ParameterSetName = "Default", HelpMessage = "Enable IGMP Snooping", Position = 2)]
		[Alias("IGMPSnoop")]
        [bool]$EnableIgmpSnooping = $False,
		
		[Parameter(Mandatory = $False,ParameterSetName = "Default",HelpMessage = "IGMP Idle Timeout Interval (1-3600 [sec])", Position = 3)]
        [ValidateRange(1,3600)]
		[Alias('IGMPIdle')]
	    [int]$IgmpIdleTimeoutInterval = 260,
		
		[Parameter(Mandatory = $False,ParameterSetName = "Default",HelpMessage = "Enable Fast MAC Cache Failover", Position = 4)]
		[Alias('FastMAC')]
	    [bool]$EnableFastMacCacheFailover = $True,
		
		[Parameter(Mandatory = $False,ParameterSetName = "Default",HelpMessage = "Fast MAC Cache Failover Interval (1-30 [sec])", Position = 5)]
        [ValidateRange(1,30)]
		[Alias('FastMACRefresh')]
    	[int]$MacRefreshInterval = 5,
		
		[Parameter(Mandatory = $False ,ParameterSetName = "Default",HelpMessage = "Enable Network Loop Protection on the Downlink Ports)", Position = 6)]
		[Alias('LoopProtect')]
	    [bool]$EnableNetworkLoopProtection = $True,

		[Parameter(Mandatory = $False, ParameterSetName = "Default",HelpMessage = "Enable Network Pause Flood Protection on the Downlink Ports)", Position = 7)]
		[Alias('PauseProtect')]
	    [bool]$EnablePauseFloodProtection = $True,
		
		[Parameter(Mandatory = $False, ParameterSetName = "Default",HelpMessage = "Enable SNMP Settings", Position = 8)]
	    [hashtable]$SNMP = $null,

		[Parameter(Mandatory = $False, ParameterSetName = "Default",HelpMessage = "Array of Network Objects, Names or URIs", Position = 9)]
		[Array]$InternalNetworks,

		[Parameter(Mandatory = $False, ParameterSetName = "Default",HelpMessage = "QoS Configurtion Object", Position = 10)]
		[Alias('qos','QosConfig')]
		[Object]$QosConfiguration,

		[Parameter(Mandatory = $False, ParameterSetName = "Default",HelpMessage = "Appliance Connection Object or Name")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

		[switch]$Async,

        [Parameter(Mandatory = $True,ParameterSetName = "Import",HelpMessage = "Specify JSON source file to create Logical Interconnect Group")]
        [ValidateScript({split-path $_ | Test-Path})]
        [Alias('i')]
	    [object]$Import

    )

    Begin 
	{
        
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$LigTasks = New-Object System.Collections.ArrayList

    }
	
	Process
	{

		ForEach ($_appliance in $ApplianceConnection)
		{

			#move to ForEach loop above.
			If ($Import)
			{
            
				write-verbose "Reading input file"

				try 
				{

					#Open input file, join so we can validate if the JSON format is correct.
					$lig = [string]::Join("", (gc $import -ErrorAction Stop)) | convertfrom-json -ErrorAction Stop

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LIG Object to Import: $($lig | ConvertTo-Json -depth 99 | Out-String)"

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"
                
					$task = Send-HPOVRequest $logicalInterconnectGroupsUri POST $lig -Appliance $_appliance

					[void]$LigStatus.Add($task)

				}
            
				#If there was a problem with the input file (format, not syntax) throw error
				catch [System.ArgumentException] 
				{

					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Import' -TargetType "PSObject" -Message "JSON Input File is invalid.  Please check the contents and try again." #-verbose
					$PSCmdLet.ThrowTerminatingError($errorRecord)

				}

				catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			Else 
			{

				#Create new LIgObject
			    $lig = NewObject -Lig 

				$lig.name                                         = $Name
				$lig.ethernetSettings.enableIgmpSnooping          = $EnableIgmpSnooping
				$lig.ethernetSettings.igmpIdleTimeoutInterval     = $IgmpIdleTimeoutInterval
				$lig.ethernetSettings.enableFastMacCacheFailover  = $EnableFastMacCacheFailover
				$lig.ethernetSettings.macRefreshInterval          = $MacRefreshInterval
				$lig.ethernetSettings.enableNetworkLoopProtection = $EnableNetworkLoopProtection
				$lig.ethernetSettings.enablePauseFloodProtection  = $EnablePauseFloodProtection

				#decide what type of QoS Configuration to add to activeQosConfig
				$lig.qosConfiguration.activeQosConfig = if ($QosConfiguration) 
				{ 

					if(-not($QosConfiguration -is [PSCustomObject]))
					{

						$Message = "The -QosConfiguration parameter does not contain a valid QOS Configuration Object.  Please check the value and try again."
						$errorRecord = New-ErrorRecord HPOneView.LogicalInterconnectGroupResourceException InvalidArgumentValue InvalidArgument 'QosConfiguration' -TargetType $QosConfiguration.Gettype().Name -Message $Message
						$PSCmdlet.ThrowTerminatingError($errorRecord)

					}
					
					if ($QosConfiguration.type -ne 'QosConfiguration')
					{

						$Message = "The -QosConfiguration parameter value does not contain a valid QOS Configuration Object.  OBject type expected 'QosConfiguration', recieved '$($QosConfiguration.type)'.  Please check the value and try again."
						$errorRecord = New-ErrorRecord HPOneView.LogicalInterconnectGroupResourceException InvalidArgumentValue InvalidArgument 'QosConfiguration' -TargetType 'PSObject' -Message $Message
						$PSCmdlet.ThrowTerminatingError($errorRecord)
					
					}

					$QosConfiguration 
				
				} 
				
				Else 
				{ 
					
					NewObject -QosConfiguration 
				
				}				

			    #Make sure the snmpConfiguration type property is set, as the caller might not know about this.
			    if ($lig.snmpConfiguration) 
				{ 
					
					$lig.snmpConfiguration.type = "snmp-configuration" 
				
				}
			
			    #Fill in missing bay locations from the input value if needed.
			    $Secondary = @{ 1 = $null; 2 = $null; 3 = $null; 4 = $null; 5 = $null; 6 = $null; 7 = $null; 8 = $null }

			    #check for any duplicate keys
			    $duplicates = $Bays.keys | where { $Secondary.ContainsKey($_) }

			    if ($duplicates) 
				{

			        foreach ($item in $duplicates) 
					{

			            $Secondary.Remove($item)

			        }

			    }

			    #join the two hash tables
			    $NewBays = $Bays+$Secondary 

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bay configuration: $($NewBays | Sort-Object Key -Descending | Out-String)"

				#Assign located Interconnect object URI to device bay mapping.
			    foreach ($_bay in ($NewBays.GetEnumerator() | Sort-Object Key))
				{

					$_interconnectObject = $null
			    
			   	    switch ($_bay.value) 
					{

				        "FlexFabric" 
						{            

				            #Get VC FlexFabric interconnect-type URI
			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found VC FF in bay $($_bay.name | out-string)"

				            $_interconnectObject = Get-HPOVInterconnectType -partNumber "571956-B21" -Appliance $_appliance

				        }

				        "Flex10" 
						{

				            #Get VC Flex-10 interconnect-type URI
			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found VC F10 in bay $($_bay.name | out-string)"

				            $_interconnectObject = Get-HPOVInterconnectType -partNumber "455880-B21" -Appliance $_appliance

				        }

				        "Flex1010D" 
						{

				            #Get VC Flex-10/10D interconnect-type URI
			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found VC F1010D in bay $($_bay.name | out-string)"

				            $_interconnectObject = Get-HPOVInterconnectType -partNumber "638526-B21" -Appliance $_appliance

				        }

				        "Flex2040f8" 
						{

				            #Get VC Flex-10/10D interconnect-type URI
			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found VC Flex2040f8 in bay $($_bay.name | out-string)"

				            $_interconnectObject = Get-HPOVInterconnectType -partNumber "691367-B21" -Appliance $_appliance

				        }

				        "VCFC20" 
						{

				            #Get VC Flex-10/10D interconnect-type URI
			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found VC FC 20-port in bay $($_bay.name | out-string)"

				            $_interconnectObject = Get-HPOVInterconnectType -partNumber "572018-B21" -Appliance $_appliance

				        }

				        "VCFC24" 
						{

				            #Get VC Flex-10/10D interconnect-type URI
			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found VC FC 24-port in bay $($_bay.name | out-string)"

				            $_interconnectObject = Get-HPOVInterconnectType -partNumber "466482-B21" -Appliance $_appliance

				        }

				        "FEX" 
						{

				            #Get Cisco Fabric Extender for HP BladeSystem interconnect-type URI
			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found Cisco Fabric Extender for HP BladeSystem in bay $($_bay.name | out-string)"
				            
							$_interconnectObject = Get-HPOVInterconnectType -partNumber "641146-B21" -Appliance $_appliance

				        }

					    default 
						{

						    $_interconnectObject = $null

					    }
					
			        }
				
				    [void]$lig.interconnectMapTemplate.interconnectMapEntryTemplates.Add(
						@{
						
							logicalDownlinkUri           = $null;
							permittedInterconnectTypeUri = $_interconnectObject.uri;
							logicalLocation = @{

								locationEntries = @(
									
									@{

										relativeValue = $_bay.name;
										type          = "Bay"

									}, @{
						
										relativeValue = "1"; 
										type          = "Enclosure"

									}

								)

							}

						}

					)

			    }

				#Loop through InternalNetwork array
				ForEach ($_network in $InternalNetworks)
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Internal Network Type: $($_network.GetType().Name)"

					switch ($_network.GetType().Name)
					{

						'String'
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Internal Network: $_network"

							if ($_network.StartsWith($script:ethNetworksUri))
							{

								Try
								{

									#Validating object
									$_network = Send-HPOVRequest $_network -Hostname $_appliance

									#Generate terminating error due to incorrect object from URI isn't the correct type
									if ($_network.category -ne 'ethernet-networks')
									{

										$Message = "The Internal Network '$_network' does not match the allowed value of 'ethernet-networks'.  Please specify an Ethernet Network to assign to the Internal Networks property."
										$errorRecord = New-ErrorRecord HPOneView.LogicalInterconnectGroupResourceException InvalidArgumentValue InvalidArgument 'InternalNetworks' -TargetType 'PSObject' -Message $Message
										$PSCmdlet.ThrowTerminatingError($errorRecord)

									}

								}

								catch
								{

									$PSCmdlet.ThrowTerminatingError($_)

								}

							}

							#Get network resource via Get-HPOVNetwork
							else
							{

								try
								{

									$_network = Get-HPOVNetwork $_network -ApplianceConnection $_appliance

								}

								catch
								{

									$PSCmdlet.ThrowTerminatingError($_)

								}

							}

						}

						'PSCustomObject'
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Internal PSObject Network: $($_network | fl * )"

							#Throw terminating error if the Internet Network object is not type Ethernet Network
							if (-not($_network.category -eq 'ethernet-networks'))
							{

								$Message = "The Internal Network category for ($_network.name) does not match the allowed value of 'ethernet-networks'."
								$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'InternalNetworks' -TargetType 'PSObject' -Message $Message
								$PSCmdlet.ThrowTerminatingError($errorRecord)

							}

							#Error if Netowrk Object does not match the appliance connection we are currently processing.
							if ($_network.ApplianceConnection.Name -ne $_appliance.Name)
							{

								$Message = "The Internal Network '($_network.name)' Appliance Connection ($($_network.ApplianceConnection.Name)) does not match the current Appliance Connection ($($_appliance.Name)) being processed."
								$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'InternalNetworks' -TargetType 'PSObject' -Message $Message
								$PSCmdlet.ThrowTerminatingError($errorRecord)
							
							}

						}

					}

					#Add to URI's to collection
					[void]$lig.internalNetworkUris.Add($_network.uri)

				}

				#Loop through Uplink Set Objects and attach to LIG
				# // TODO


			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LIG: $($lig | out-string)"

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to create '$($lig.name)'..."
			
				Try
				{
				
					$task = Send-HPOVRequest $script:logicalInterconnectGroupsUri POST $lig -Hostname $_appliance
				
				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			    if ($Async.IsPresent)
				{

					[void]$LigTasks.Add($task)

				}

				else
				{

					Try
					{

						$_FinalTaskStaus = Wait-HPOVTaskComplete $task

					}
					
					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

					[void]$LigTasks.Add($_FinalTaskStaus)

				}		

			}

		}

	}

    End 
	{

        Return $LigTasks

    }

}

function New-HPOVQosConfig
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "Passthrough")]
    Param 
	(

        [parameter(Position = 0, Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "Passthrough", HelpMessage = "Specify the QOS Configuration Type; Passthrough, CustomNoFCoE, CustomWithFCoE.")]
		[parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $False, ParameterSetName = "Custom", HelpMessage = "Specify the QOS Configuration Type; Passthrough, CustomNoFCoE, CustomWithFCoE.")]
		[ValidateSet("Passthrough", "CustomNoFCoE", "CustomWithFCoE", IgnoreCase = $False)]
        [String]$ConfigType = "Passthrough",

		[parameter(Position = 1, Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "Custom", HelpMessage = "Specify the uplink ports ingress traffic classification based on the values of dot1p or DSCP or both in Ethernet and IP headers respectively.")]
		[ValidateSet("DSCP", "DOT1P", "DOT1P_AND_DSCP", IgnoreCase = $False)]
		[String]$UplinkClassificationType = "DOT1P",

		[parameter(Position = 2, Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "Custom", HelpMessage = "Specify the downlink ports ingress traffic classification based on the values of dot1p or DSCP or both.")]
		[ValidateSet("DSCP", "DOT1P", "DOT1P_AND_DSCP", IgnoreCase = $False)]
		[String]$DownlinkClassificationType = "DOT1P_AND_DSCP",

		[parameter(Position = 3, Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "Custom", HelpMessage = "Array of TrafficClassifiers Classes.")]
		[System.Collections.ArrayList]$TrafficClassifiers = @()

    )

	Begin
	{

		#Helper CMDLET. Does not require appliance authentication.

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		#Validate the caller 
		if (($PSBoundParameters['UplinkClassificationType'] -or $PSBoundParameters['DownlinkClassificationType'] -or $PSBoundParameters['TrafficClassifiers']) -and $ConfigType -eq 'Passthrough')
        {

            $ParameterNames = New-Object System.Collections.ArrayList
        
            switch ($PSBoundParameters.Keys)
            {

                'UplinkClassificationType'   { [void]$ParameterNames.Add('UplinkClassificationType') }
                'DownlinkClassificationType' { [void]$ParameterNames.Add('DownlinkClassificationType') }
                'TrafficClassifiers'         { [void]$ParameterNames.Add('TrafficClassifiers') }

            }

            $Message = "ConfigType parameter value was set to 'Passthrough' and $($ParameterNames -join ", ") parameter(s) were provided.  When choosing 'Passthrough' QOS Config Type, the other parameters cannot be used."
			$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'ConfigType' -Message $Message
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

	}

	Process
	{

		switch ($ConfigType)
		{

			'CustomNoFCoE'
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Building 'CustomNoFCoE' QOS Configuration."

				#$_QosConfigurationObject = $Script:QosConfigurationObject.PSObject.Copy()
				$_QosConfigurationObject = NewObject -DefaultNoFCoELosslessQosTrafficClassifiers

				#$_QosConfigurationObject.qosTrafficClassifiers.Clear()
				$_QosConfigurationObject.uplinkClassificationType   = $UplinkClassificationType
				$_QosConfigurationObject.downlinkClassificationType = $DownlinkClassificationType

				if ($PSBoundParameters['TrafficClassifiers'])
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding Custom Traffic Classifiers."

					$TrafficClassifiers | % { [void]$QosConfigurationObject.qosTrafficClassifiers.Add($_) }

				}
				
				else 
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding Default NoFCoELossless Traffic Classifiers."

					$QosConfigurationObject.qosTrafficClassifiers = $DefaultNoFCoELosslessQosTrafficClassifiers

				}
			
			}
			
			'CustomWithFCoE'
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Building 'CustomWithFCoE' QOS Configuration."
				$_QosConfigurationObject = NewObject -DefaultFCoELosslessQosTrafficClassifiers

				$_QosConfigurationObject.uplinkClassificationType   = $UplinkClassificationType
				$_QosConfigurationObject.downlinkClassificationType = $DownlinkClassificationType

				if ($PSBoundParameters['TrafficClassifiers'])
				{

					if ($TrafficClassifiers.Count -gt 6)
					{

						$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'TrafficClassifiers' -TargetType 'System.Collections.ArrayList' -Message "The number of provided TrafficClassifiers is exceeded by $($TrafficClassifiers.Count - 2).  When defining the QOS Configuration Type to 'CustomWithFCoE', only 6 Custom Traffic Classes are allowed."
						$PSCmdlet.ThrowTerminatingError($errorRecord)

					}

					elseif ($TrafficClassifiers.Count -le 6)
					{

						1..($TrafficClassifiers.Count - 6) | % { 
						
							#$NewBaseTrafficClass = 	$BaseTrafficClass #.Copy()
							$_NewBaseTrafficClass = NewObject -BaseTrafficClass
							
							$_NewBaseTrafficClass.qosTrafficClass.className += $_

							[void]$_QosConfigurationObject.qosTrafficClassifiers.Add($_NewBaseTrafficClass) 
						
						}

					}

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding Custom Traffic Classifiers."

					#Check to make sure caller has not provided 'Best effort' or 'FCoE lossless' Classes
					$TrafficClassifiers | % { 
					
						#Generate Error
						if ($_.name -eq 'FCoE lossless')
						{

							$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'TrafficClassifiers' -TargetType 'System.Collections.ArrayList' -Message "The 'FCoE lossless' traffic class is reserved.  Please remove it from the TrafficClassifiers parameter and try again."
							
							$PSCmdlet.ThrowTerminatingError($errorRecord)

						}	
						
						#Add to collection
						[void]$_QosConfigurationObject.qosTrafficClassifiers.Add($_) 
					
					}

					#Add FCoE Class
					[void]$_QosConfigurationObject.qosTrafficClassifiers.Add((NewObject -FCoELossLessTrafficClass))

				}
				
				else 
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding Default With FCoELossless Traffic Classifiers."

					$_QosConfigurationObject.qosTrafficClassifiers = NewObject -DefaultFCoELosslessQosTrafficClassifiers

				}

			}

		}

	}

	End
	{

		$_QosConfigurationObject.qosTrafficClassifiers | % { 
			
			if ($_.PSObject.TypeNames -notcontains 'HPOneView.Networking.Qos.TrafficClassifier')	
			{
			
				$_.PSObject.TypeNames.Insert(0,'HPOneView.Networking.Qos.TrafficClassifier') 
			
			}
		
		}

		$_QosConfigurationObject.PSObject.TypeNames.Insert(0,'HPOneView.Networking.Qos.Configuration')

		Return $_QosConfigurationObject

	}

}

function New-HPOVQosTrafficClass
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default",SupportsShouldProcess = $True,ConfirmImpact = 'High')]
    Param 
	(

		[parameter(Position = 0, Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "default", HelpMessage = "Specify a unique name for the traffic class.")]
		[Alias('ClassName')]
		[string]$Name,

		[parameter(Position = 1, Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "default", HelpMessage = "Maximum share the traffic class can use when other traffic classes are not using their guaranteed share")]
		[ValidateRange(1,100)]
        [int]$MaxBandwidth = $Null,

		[parameter(Position = 2, Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "default", HelpMessage = "Minimum guaranteed bandwidth for the traffic class.")]
		[string]$BandwidthShare,
		
		[parameter(Position = 3, Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "default", HelpMessage = "Specifies the dot1p priority value to remark for the egressing packets")]
		[int]$EgressDot1pValue,

		[parameter(Position = 4, Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "default", HelpMessage = "Specifies the DSCP priority value to map for the QoS Traffic Classifier")]
		[System.Collections.ArrayList]$IngressDot1pClassMapping,
		
		[parameter(Position = 5, Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "default", HelpMessage = "Specifies the DSCP priority value to map for the QoS Traffic Classifier.")]
		[System.Collections.ArrayList]$IngressDscpClassMapping,

		[parameter(Mandatory = $False, ValueFromPipeline = $False, ParameterSetName = "default", HelpMessage = "Specifies whether the traffic class is real time.")]
		[switch]$RealTime,

		[switch]$Enabled

    )

	Begin
	{

		#CMDLET doesn't require auth

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		$NoMatch = New-Object System.Collections.ArrayList
		
		#Validate the IngressDscpClassMapping values caller is providing
		ForEach ($item in $IngressDscpClassMapping)
		{

			if (-not($Script:IngressDscpClassMappingValues -contains $item))
			{

				[void]$NoMatch.Add($item)

			}

		}

		#Check to make sure caller isn't attempting to create an FCoE lossless Class
		if ($Name -eq "FCoE lossless")
		{

			$Message = "The 'FCoE lossless' Traffic Classifier cannot be modified or created.  It is automatically created when using the 'New-HPOVQosConfig' CMDLET."
			$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Name' -Message $Message
            $PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		if ($Name -eq "Best effort" -and $PSBoundParameters['MaxBandwidth'] -and $PSBoundParameters.Count -gt 2 -and (-not($PSBoundParameters['verbose']) -or -not($PSBoundParameters['debug']) -or -not($PSBoundParameters['Enabled'])))
		{

			$Message = "The 'Best effort' Traffic Classifier can only be created with providing the 'Name' and 'MaxBandwidth' parameters."
			$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Name' -Message $Message
            $PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		if ($NoMatch)
		{

			$Message = "Invalid IngressDscpClassMapping parameter values found: $($NoMatch -join ', ').  Please remove these values and try again."
			$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'IngressDscpClassMapping' -TargetType 'Array' -Message $Message
            $PSCmdlet.ThrowTerminatingError($errorRecord)

		}

	}

	Process
	{

		$_BaseTrafficClass = NewObject -BaseTrafficClass

		switch ($PSBoundParameters.Keys)
		{

			"Name"
			{

				$_BaseTrafficClass.qosTrafficClass.className = $Name

			}

			"MaxBandwidth"
			{
			
				$_BaseTrafficClass.qosTrafficClass.maxBandwidth = $MaxBandwidth
			
			}

			"BandwidthShare"
			{

				$_BaseTrafficClass.qosTrafficClass.bandwidthShare = $BandwidthShare
						
			}


			"EgressDot1pValue"
			{
			
				$_BaseTrafficClass.qosTrafficClass.egressDot1pValue = $EgressDot1pValue
			
			}

			"RealTime"
			{
			
				$_BaseTrafficClass.qosTrafficClass.realTime = $RealTime
			
			}
			
			"IngressDot1pClassMapping"
			{

				$IngressDot1pClassMapping | % { [void]$_BaseTrafficClass.qosClassificationMapping.dot1pClassMapping.Add($_) }

			}
			
			"IngressDscpClassMapping"
			{

				$IngressDscpClassMapping | % { [void]$_BaseTrafficClass.qosClassificationMapping.dscpClassMapping.Add($_) }

			}

		}

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] BaseTrafficClass Object: $($_BaseTrafficClass | fl * | Out-String) $($_BaseTrafficClass.qosTrafficClass | fl * | Out-String) $($_BaseTrafficClass.qosClassificationMapping | fl * | Out-String)"

	}

	End
	{

		$_BaseTrafficClass.PSObject.TypeNames.Insert(0,'HPOneView.Networking.QosTrafficClassifier')

		Return $_BaseTrafficClass

	}

}

function Remove-HPOVLogicalInterconnectGroup 
{
    
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default", SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    Param 
	(

        [parameter(Position = 0, Mandatory, ValueFromPipeline, ParameterSetName = "default", HelpMessage = "Specify the Logical Interconnect Group(s) to remove.")]
		[parameter(position = 0, Mandatory, ParameterSetName = "ApplianceRequired")]
        [ValidateNotNullOrEmpty()]
        [Alias("uri","name","Lig")]
        [Object]$Resource = $null,
	
		[parameter(Mandatory = $False, ValueFromPipelineByPropertyName, ParameterSetName = "ApplianceRequired", position = 1)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

	    [parameter(Mandatory = $false)] 
        [switch]$force

    )

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try {
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		if (-not($PSBoundParameters['Resource'])) { $PipelineInput = $True }

		$_taskcollection = New-Object System.Collections.ArrayList
		$_ligcollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if ($PipelineInput) 
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LIG Object provided: $($Resource | FL * | Out-String)"

			If ($Resource.category -eq 'logical-interconnect-groups')
			{

				If (-not($Resource.ApplianceConnection))
				{

					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "LIG:$($Resource.Name)" -TargetType PSObject -Message "The LIG resource provided is missing the source ApplianceConnection property.  Please check the object provided and try again." #-verbose
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				[void]$_ligcollection.Add($Resource)

			}

			else
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "Network:$($Resource.Name)" -TargetType PSObject -Message "The LIG resource is not an expected category type [$($Resource.category)].  Allowed resource category type is 'logical-interconnect-groups'.  Please check the object provided and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

		}

		else 
		{

			foreach ($_lig in $Resource) 
			{

				#LIG passed is a URI
				if (($_lig -is [String]) -and [System.Uri]::IsWellFormedUriString($_lig,'Relative')) 
				{

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received URI: $($_lig)"

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Network Name"

					if ($ApplianceConnection.count -gt 1)
					{

						# // Throw Error due to lack of specific ApplianceConnection

					}

					else
					{

						[void]$_ligcollection.Add((Send-HPOVRequest $_lig -Appliance $ApplianceConnection.Name))

					}
				    
				}

				#LIG passed is the Name
				elseif (($_lig -is [string]) -and (-not($_lig.startsWith("/rest/")))) 
				{

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received LIG Name $($_lig)"

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting LIG object from Get-HPOVLogicalInterconnectGroup"
				    
					Try
					{

						$_lig = Get-HPOVLogicalInterconnectGroup $_lig -ApplianceConnection $ApplianceConnection.Name

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}
				    

				    if ($_lig.count -gt 1 ) 
					{ 

				        $errorRecord = New-ErrorRecord InvalidOperationException NetworkResourceNameNotUnique InvalidResult 'Remove-HPOVNetwork' -Message "Invalid Network parameter: $net" #-verbose
				        $PSCmdlet.WriteError($errorRecord)                
				    
				    }

					[void]$_ligcollection.Add($_lig)

				}

				#LIG passed is the object
				elseif ($_lig -is [PSCustomObject] -and ($_lig.category -ieq 'logical-interconnect-groups')) 
				{
				    
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] LIG Object provided: $($_lig | FL * | out-string)"

					[void]$_ligcollection.Add($_lig)
				
				}

				elseif ($_lig -is [PSCustomObject] -and ($_lig.category -ne 'logical-interconnect-groups'))
				{

				    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Resource' -TargetType 'PSObject' -Message "Invalid LIG parameter: $($_lig | FL * | Out-String)" #-verbose
				    $PSCmdlet.WriteError($errorRecord)

				}

			}

		}
        
    }

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($_ligcollection.count) LIG resources to remove."

		#Process LIG Resources
		ForEach ($_lig in $_ligcollection)
		{
		
			if ($pscmdlet.ShouldProcess($_lig.name,"Remove Logical Interconnect Group from appliance '$($_lig.ApplianceConnection.Name)'?'")) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing LIG '$($_lig.name)' from appliance '$($_lig.ApplianceConnection.Name)'."

				Try
				{
					
					if ($force.IsPresent)
					{

						$_lig.uri += "?force=true"

					}

					$_resp = Send-HPOVRequest $Resource.Uri DELETE -Hostname $Resource.ApplianceConnection.Name

					[void]$_taskcollection.Add($_resp)

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			elseif ($PSBoundParameters['WhatIf'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf parameter was passed."

				Write-Host "WHATIF: Remove Logical Interconnect Group '$($_lig.name)' from appliance '$($_lig.ApplianceConnection.Name)'" -ForegroundColor Yellow

			}

		}

		Return $_taskcollection

	}

}

function Get-HPOVUplinkSet 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "Name")]

    Param 
	(

        [Parameter(Position = 0, Mandatory = $false, ParameterSetName = "Name")]
		[ValidateNotNullorEmpty()]
        [string]$Name = $null,

        [Parameter(Position = 1, Mandatory = $false, ValueFromPipeline, ParameterSetName = "Name")]
        [Parameter(Position = 1, Mandatory = $false, ValueFromPipeline, ParameterSetName = "Type")]
		[ValidateNotNullorEmpty()]
        [Alias('liname')]
		[object]$LogicalInterconnect = $null,

        [Parameter(Position = 0, Mandatory = $false, ParameterSetName = "Type")]
        [ValidateSet('Ethernet','FibreChannel', IgnoreCase=$False)]
        [string]$type = $null,
	
		[Parameter(Mandatory = $false)]
		[switch]$report,

		[parameter(Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

		[parameter (Mandatory = $false)]
		[alias("x", "export")]
		[ValidateScript({split-path $_ | Test-Path})]
		[String]$exportFile

    )
	
	Begin 
	{

		if ($PSBoundParameters['report'])
		{

			Write-Warning "The Report parameter has been deprecated.  The CMDLET will now display object data in Format-List view."

		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_UplinkSetCollection = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		if ($LogicalInterconnect -is [PSCustomObject])
		{

			$ApplianceConnection = $ApplianceConnection | ? { $_.Name -eq $LogicalInterconnect.ApplianceConnection.Name }

		}

		ForEach ($_connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_connection.Name)' Appliance"

			#Looking for UplinkSet Name without LI Object/Resource
			if ($PSCmdlet.ParameterSetName -eq 'Name' -and (-not($PSBoundParameters['LogicalInterconnect']))) 
			{

				if ($PSboundParameters['Name'])
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Uplink Set name provided: '$name'"

					$name = $name -replace ("[*]","%25") -replace ("[&]","%26")

					#We will crate a URI that uses filter at the resource URI
					$uri = $uplinkSetsUri + "?filter=name matches '$name'"

				}

				else
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for all Uplink Sets."

					$uri = $uplinkSetsUri

				}

				$_uplinksets = Send-HPOVRequest $uri GET -Hostname $_connection

				if ($_uplinksets.count -eq 0)
				{

					#Generate Error if no name was found
					$errorRecord = New-ErrorRecord InvalidOperationException UplinkSetResourceNameNotFound ObjectNotFound 'Name' -Message "Specified Uplink Set '$name' was not found on '$($_connection.Name)'.  Please check the name and try again." #-verbose
					$pscmdlet.ThrowTerminatingError($errorRecord)  

				}

				else
				{

					$_uplinksets = $_uplinksets.members

				}

			}

			#Looking for LI Object and associated Uplink Sets
			elseif ($PSboundParameters['LogicalInterconnect']) # -and (-not($PSBoundParameters['Name']))) 
			{

				#Check the LogicalInterconnect parameter value type
				switch ($LogicalInterconnect.GetType().Name)
				{
				
					'PSCustomObject'
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Recieved PSCustomObject for LogicalInterconnect parameter."

						if ($LogicalInterconnect.category -eq 'logical-interconnects')
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Interconnect Object provided: $($LogicalInterconnect | FL * | Out-String)."

						}
						
						else
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid Logical Interconnect Object provided: $($LogicalInterconnect | Out-String)."

							$errorRecord = New-ErrorRecord InvalidOperationException LogicalInterconnectInvalidCategroy InvalidArgument 'LogicalInterconnect' -TargetType 'PSObject' -Message "The provided LogicalInterconnect resource category '$($LogicalInterconnect.category)' does not match the required 'logical-interconnects' value.  Please check the parameter value and try again."
							$pscmdlet.ThrowTerminatingError($errorRecord) 

						}

					}

					'String'
					{

						#User provided Logical Interconnect Name, look for it on the appliance
						if (-not($LogicalInterconnect.StartsWith('/rest/')) -or (-not($LogicalInterconnect.StartsWith($logicalInterconnectsUri))))
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Logical Interconnect name provided: 'LogicalInterconnect'."

							Try
							{

								Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Logical Interconnect '$liName'"

								$LogicalInterconnect = Get-HPOVLogicalInterconnect $LogicalInterconnect -ApplianceConnection $_connection

							}

							Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

						}

						#User didn't provide a Logical Interconnect Resource Name, generate error as URI's are not supported
						else
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid Logical Interconnect parameter value provided: $($LogicalInterconnect | Out-String)."

							$errorRecord = New-ErrorRecord InvalidOperationException InvalidLogicalInterconnectParameterValue InvalidArgument 'LogicalInterconnect' -TargetType 'PSObject' -Message "The provided LogicalInterconnect resource category '$($LogicalInterconnect.category)' does not match the required 'logical-interconnects' value.  Please check the parameter value and try again."
							$pscmdlet.ThrowTerminatingError($errorRecord) 

						}
						
					}
				
				}

				#Use Index to find associations
				try 
				{ 
				
					$_uplinksets = New-Object System.Collections.ArrayList

				    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking for associated Uplink Sets to Logical Interconnects via Index."
					$_indexassociatedulinksets = Send-HPOVRequest "/rest/index/associations?parentUri=$($LogicalInterconnect.uri)&name=LOGICAL_INTERCONNECT_TO_UPLINK_SET" -Hostname $_connection
					
					if ($_indexassociatedulinksets.count -gt 0)
					{

						ForEach ($child in $_indexassociatedulinksets.members)
						{

							$_uplinksetobject = Send-HPOVRequest $child.childUri -Hostname $_connection

							if ($Name)
							{

								Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filtering Uplink Sets for '$Name'"
				        
								if ($Name -match "\*" -or $Name -match "\?")
								{

									if ($_uplinksetobject.name -match $Name)
									{

										[void]$_uplinksets.Add($_uplinksetobject)

									}

								}

								else
								{

									if ($_uplinksetobject.name -eq $Name)
									{

										[void]$_uplinksets.Add($_uplinksetobject)

									}

								}

							}

							elseif ($type) 
							{

							    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Filtering Uplink Sets for '$type' type." 
							    if ($_uplinksetobject.networkType -eq $type)
								{

									[void]$_uplinksets.Add($_uplinksetobject)

								}

							}
							
						}
						
					}
					
					
					if ($Name -and $_uplinksets.count -eq 0)
					{
						
						#Generate Error if no name was found
						$errorRecord = New-ErrorRecord InvalidOperationException UplinkSetResourceNameNotFound ObjectNotFound 'Name' -Message "Specified Uplink Set '$name' was not found associated with '$($LogicalInterconnect.name)' on '$($_connection.Name)'.  Please check the name and try again." #-verbose
						$pscmdlet.ThrowTerminatingError($errorRecord)  

					}

					elseif ($type -and $_uplinksets.count -eq 0)
					{

						$errorRecord = New-ErrorRecord InvalidOperationException UplinkSetResourceTypeNotFound ObjectNotFound 'Type' -Message "Specified Uplink Set Type '$type' was not found associated with '$($LogicalInterconnect.name)' on '$($_connection.Name)'.  Please check the name and try again." #-verbose
						$pscmdlet.ThrowTerminatingError($errorRecord)  
					
					}

				}

				catch 
				{

				    $PSCmdlet.ThrowTerminatingError($_)

				}

			}

			#Update TypeNames
			if ($_uplinksets.count -gt 0)
			{

				foreach ($_object in $_uplinksets)
				{

					switch ($_object.networkType)
					{

						'Ethernet'     
						{ 

							$_object.PSObject.TypeNames.Insert(0,'HPOneView.Networking.LogicalInterconnect.UplinkSet.Ethernet') 
							$_object.portConfigInfos | % {
								
								Add-Member -InputObject $_ -NotePropertyName ApplianceConnection -NotePropertyValue $_object.ApplianceConnection

								$_.PSObject.TypeNames.Insert(0,'HPOneView.Networking.LogicalInterconnect.UplinkSet.Ethernet.UplinkPort') 

							}
							
						}

						'FibreChannel' 
						{ 
						
							$_object.PSObject.TypeNames.Insert(0,'HPOneView.Networking.LogicalInterconnect.UplinkSet.FibreChannel') 
							$_object.portConfigInfos | % {
								
								Add-Member -InputObject $_ -NotePropertyName ApplianceConnection -NotePropertyValue $_object.ApplianceConnection

								$_.PSObject.TypeNames.Insert(0,'HPOneView.Networking.LogicalInterconnect.UplinkSet.FibreChannel.UplinkPort') 

							}
						
						}

					}

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding '$($_object.name)' to final collection."

					[void]$_UplinkSetCollection.Add($_object)

				}

			}

		}

    }

    End 
	{

		#if ($report) {
		#
		#
        #   [Array]$uplinkSetReport = @()
		#
		#    foreach ($us in ($_UplinkSetCollection | sort-object -Property name)) 
		#	{
		#
        #        $uplinkSet = [PsCustomObject]@{ name = $Null; liName = $Null; type = $Null; reachability = $Null; state = $Null; networks = @(); ports = @() }
		#
        #        $uplinkSet.name         = $us.name
        #        $uplinkSet.liName       = (Send-HPOVRequest $us.logicalInterconnectUri -Hostname ).name
        #        $uplinkSet.reachability = $us.reachability
        #        $uplinkSet.state        = "$($us.status)($($us.state))"
		#
        #        if ($us.type -eq "Ethernet") { $uplinkSet | Add-Member -NotePropertyName ethernetNetworkType -NotePropertyValue $us.ethernetNetworkType }
		#
		#    	if ($us.networkType -eq "Ethernet"){
		#
        #            $uplinkSet.type = $us.ethernetNetworkType
		#    	
        #            #$ethNetwork = [PsCustomObject]@{ name = $Null }			
		#    		
		#    		foreach ($net in $us.networkUris){
		#    		
        #                $ethNetwork = [PsCustomObject]@{ name = $Null }	
        #                	
        #                $network = Send-HPOVRequest $net
	    #                
        #                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found Ethernet Network name: $($network.name)"
		#    			
        #                #Compare if the net URI is the same as the native URI
		#    			if ($network.uri -eq $us.nativeNetworkUri){ 
        #                    
        #                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Ethernet Network $($net.name) is the Native/PVID for uplink set."
        #                    $ethNetwork.name = "$($network.name) [NATIVE]"
        #                    
        #                }
		#    			else { $ethNetwork.name = $network.name }
		#
        #                if ($network.vlanID) { $ethNetwork | Add-Member -NotePropertyName vlanId -NotePropertyValue $network.vlanId -force }
		#
        #                $uplinkSet.networks += $ethNetwork
		#    		}
		#
		#    	}
		#    	elseif ($us.networkType -eq "FibreChannel") {
		#
        #            $uplinkSet.type = $us.networkType
		#
		#    		foreach ($net in $us.fcNetworkUris){
		#    		    
        #                $fcNetwork = [PsCustomObject]@{ name = $Null; fabricType = $Null }				
		#    			
        #                #Send the request
		#    			$fcNet = Send-HPOVRequest $net
		#
	    #                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found FC Network name: $($fcNet.name)"
        #                $fcNetwork.name = $fcNet.name
        #                $fcNetwork.fabricType = $fcNet.fabricType
		#    			$uplinkSet.networks += $fcNetwork
		#
		#    		}
		#    	}
	    #               
	    #        #Get Uplink Port Assignment.
		#    	foreach ($p in $us.portConfigInfos){
		#
        #            $tempPort = $Null                    
        #            
        #            $port = [PsCustomObject]@{ name = $Null; speed = $Null; opSpeed = $Null; status = $Null; neighbor = $Null }
        #            
        #            $tempPort = Send-HPOVRequest $p.portUri
        #            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Retrieved port info for '$($tempPort.interconnectName), $($tempPort.portName)'"
		#
        #            $port.name = "$($tempPort.interconnectName), $($tempPort.portName)"
        #            $port.speed = $p.desiredSpeed
        #            $port.opSpeed = $global:getUplinkSetPortSpeeds["$($tempPort.operationalSpeed)"]
        #            $port.status = "$($tempPort.portStatus)/$($tempPort.status)"
		#
        #            if ($us.networkType -eq "Ethernet") { 
        #            
        #                $port.neighbor = "$($tempPort.neighbor.remoteSystemName) [$(if (-not $tempPort.neighbor.remoteMgmtAddress) { $tempPort.neighbor.remoteChassisId } else {$tempPort.neighbor.remoteMgmtAddress})] $($tempPort.neighbor.remotePortDescription) $($tempPort.neighbor.remotePortId)"
        #                if ($tempPort.lagId) { $port | add-member -NotePropertyName lagid -NotePropertyValue $tempPort.lagId }
        #                else { $port | add-member -NotePropertyName lagid -NotePropertyValue "N/A" }
        #            
        #            }
        #            elseif ($us.networkType -eq "FibreChannel") { 
        #                $port.neighbor = $tempPort.fcPortProperties.wwpn 
        #                $port | add-member -NotePropertyName fabric -NotePropertyValue $tempPort.fcPortProperties.opOnlineReason
        #            }
		#
        #            $uplinkSet.ports += $port
		#
		#    	}
		#
        #        $u = @{Expression={$_.name};Label="Uplink Set Name"},
        #             @{Expression={$_.liName};Label="LI Name"},
        #             @{Expression={$_.type};Label="Type"},
        #             @{Expression={$_.reachability};Label="Reachability"},
        #             @{Expression={$_.state};Label="State"}
		#
        #        $uplinkSet | format-table $u -AutoSize -Wrap
		#
        #        if ($us.networkType -eq "Ethernet") { 
        #        
        #            $n = @{Expression={$_.name};Label="Network Name"},
        #                 @{Expression={$_.vlanId};Label="VLAN ID"}
		#
        #        }
        #        else { $n = @{Expression={$_.name};Label="Network Name"},
        #                 @{Expression={$_.fabricType};Label="Type"}
        #        }
		#
        #        $uplinkSet.networks | sort-object -Property name | format-table $n -AutoSize -Wrap
		#
        #        if ($us.networkType -eq "Ethernet") { 
        #        
        #            $p = @{Expression={$_.name};Label="Port Name"},
        #                 @{Expression={$_.speed};Label="Configured Speed"},
        #                 @{Expression={$_.opSpeed};Label="Connected Speed"},
        #                 @{Expression={$_.status};Label="Status"},
        #                 @{Expression={$_.lagid};Label="LAG ID"},
        #                 @{Expression={$_.neighbor};Label="(LLDP) Connected To"}
		#
        #        }
        #        else {
		#
        #            $p = @{Expression={$_.name};Label="Port Name"},
        #                 @{Expression={$_.speed};Label="Configured Speed"},
        #                 @{Expression={$_.opSpeed};Label="Connected Speed"},
        #                 @{Expression={$_.status};Label="Status"},
        #                 @{Expression={$_.fabric};Label="Fabric Connection"},
        #                 @{Expression={$_.neighbor};Label="WWPN Connected To"}
        #        
        #        }
		#
        #        $uplinkSet.ports | sort-object -Property name | format-table $p -AutoSize -Wrap
        #        write-host "------------------------------------------------------------------------------------------------------------------"
		#    }
        #    Write-Host "=================================================================================================================="
        #    write-host " "
        #    Write-Verbose "Done. $($uplinkSets.count) uplink set(s) found."
		#
		#}
		#
		#else 
		#{
            
            $_UplinkSetCollection | sort-object -Property networkType,name

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Done. $($_UplinkSetCollection.count) uplink set(s) found."
		    
		#}

    }

}

function New-HPOVUplinkSet 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "PipelineOrObjectEthernet")]
    Param 
	(

        [parameter(Mandatory = $false, ValueFromPipeline = $True, Position = 0, ParameterSetName = "PipelineOrObjectEthernet")]
        [alias('li','lig')]
        [Object]$Resource,

		[parameter(Mandatory = $true, Position = 0, ParameterSetName = "PipelineOrObjectFibreChannel")]
        [parameter(Mandatory = $true, Position = 1, ParameterSetName = "PipelineOrObjectEthernet")]
        [alias('usName')]
        [String]$Name,

		[parameter(Mandatory = $true, Position = 1, ParameterSetName = "PipelineOrObjectFibreChannel")]
        [parameter(Mandatory = $true, Position = 2, ParameterSetName = "PipelineOrObjectEthernet")]
        [alias('usType')]
        [ValidateSet("Ethernet", "FibreChannel", "Untagged", "Tunnel", IgnoreCase=$false)]
        [String]$Type = $Null,

		[parameter(Mandatory = $false, Position = 2, ParameterSetName = "PipelineOrObjectFibreChannel")]
        [parameter(Mandatory = $false, Position = 3, ParameterSetName = "PipelineOrObjectEthernet")]
        [alias('usNetworks')]
        [System.Collections.ArrayList]$Networks = @(),

        [parameter(Mandatory = $false, Position = 4, ParameterSetName = "PipelineOrObjectEthernet")]
        [Alias ('usNativeEthNetwork','Native','PVID')]
        [Object]$NativeEthNetwork = $Null,

		[parameter(Mandatory = $false, Position = 3, ParameterSetName = "PipelineOrObjectFibreChannel")]
        [parameter(Mandatory = $false, Position = 5, ParameterSetName = "PipelineOrObjectEthernet")]
        [Alias ('usUplinkPorts')]
        [ValidateScript({($_.Split(","))[0].contains(":")})]
        [System.Collections.ArrayList]$UplinkPorts = @(),

        [parameter(Mandatory = $false, Position = 6, ParameterSetName = "PipelineOrObjectEthernet")]
        [alias('usEthMode')]
        [ValidateSet("Auto", "Failover", IgnoreCase=$false)]
        [String]$EthMode = "Auto",
        
        [parameter(Mandatory = $false, Position = 7, ParameterSetName = "PipelineOrObjectEthernet")]
        [ValidateSet("Short", "Long", IgnoreCase=$false)]
        [String]$lacpTimer = "Short",

        [parameter(Mandatory = $false, Position = 8, ParameterSetName = "PipelineOrObjectEthernet")]
        [ValidateSet("Short", "Long", IgnoreCase=$false)]
        [ValidateScript({$_.contains(":")})]
        [String]$PrimaryPort = $Null,

        [parameter(Mandatory = $false, Position = 9, ParameterSetName = "PipelineOrObjectEthernet")]
        [ValidateSet("Auto", "2", "4", "8", IgnoreCase=$false)]
        [String]$fcUplinkSpeed = "Auto",
		
		[parameter(Mandatory = $false, ParameterSetName = "PipelineOrObject")]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
	{
        
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if ($PSCmdlet.ParameterSetName -eq "PipelineOrObject")
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

			$c = 0

			ForEach ($_Connection in $ApplianceConnection) 
			{

				Try 
				{
	
					$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}

		}
		
		else
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating Uplink Set Object for caller without auth."

		}

		$Results = New-Object System.Collections.ArrayList

    }
	
	Process 
	{

		ForEach ($_resource in $Resource)
		{

			#if pipeline object is String and not PSCustomObject, fail the call
			if ($_resource -is [String] -or (-not($_resource -is [PSCustomObject])))
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Input Object is an unsupported type: $($_resource.GetType().FullName).  Generating error."
					
				$errorRecord = New-ErrorRecord ArgumentException InvalidParameter InvalidArgument 'Resource' -TargetType 'PSObject' -Message "The -Resource parameter value type($($_resource.GetType().Fullname)) provided is not a Logical Interconnect Group object.  Please check the value and try again." #-verbose
				$pscmdlet.ThrowTerminatingError($errorRecord)

			}

			#Validate the resource contains the ApplianceConnection NoteProperty
			if (-not($_resource.ApplianceConnection))
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Input Object does not contain the ApplianceConnection NoteProperty, generating error."
					
				$errorRecord = New-ErrorRecord ArgumentException InvalidParameter InvalidArgument 'Resource' -TargetType 'PSObject' -Message "The -Resource parameter value does not contain the ApplianceConnection object property.  Please validate the object was retrieved from Get-HPOVLogicalInterconnectGroup or a resource URI via Send-HPOVRequest." #-verbose
				$pscmdlet.ThrowTerminatingError($errorRecord)

			}

			#Determine the resource type; LIG or LI
			switch ($_resource.category)
			{

				#Uplink Sets are created differently for LI Resources
				'logical-interconnects'
				{

					# // TODO update with C# strongly typed name
					if(-not($_resource -is [PSCustomObject]))
					{
						
						$errorRecord = New-ErrorRecord ArgumentException InvalidParameter InvalidArgument 'Resource' -Message "The -Resource parameter value provided is not a Logical Interconnect object.  Please check the value and try again." #-verbose
						$pscmdlet.ThrowTerminatingError($errorRecord)

					}

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Provided LI Resource Name: $($_resource.name)"
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Provided LI Resource Category: $($_resource.category)"
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Provided LI Resource URI: $($_resource.uri)"

					#Init Uplink Set Objects
					$_liUplinkSetObject  = NewObject -liUplinkSetObject

					#Add Logical Interconnect object URI to Uplink Set Object
					$_liUplinkSetObject.logicalInterconnectUri = $_resource.uri

					#Get list of interconnects within LI resource
					$_liInterconnects = $_resource.interconnectMap.interconnectMapEntries
					
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Uplink Ports: $($UplinkPorts | out-string)"
					$UplinkPorts = $UplinkPorts.Split(',')

					#Loop through requested Uplink Ports
					$port              = New-Object System.Collections.ArrayList
					$uslogicalLocation = New-Object System.Collections.ArrayList

					foreach ($port in $UplinkPorts)
					{

						$rem = "bayBAY"
						    
						#Split string to get bay and port
						$port = $port.Split(':')
						    
						#remove bay so we just have the ID
						$bay = $port[0].TrimStart($rem)
						    
						#Get faceplate portName
						$uplinkPort = $port[1]
						    
						write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]] Processing Port Bay$($bay):$($uplinkPort)"

						write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]] Looking for Interconnect URI for Bay $($bay)"

						#Loop through Interconnect Map Entry Template items looking for the provided Interconnet Bay number
						ForEach ($l in $_resource.interconnectMap.interconnectMapEntries) 
						{ 

						    $found = $l.location.locationEntries | ? type -eq "Bay" -and value -eq $bay
													            
						    if ($found) 
							{
						                
						        $permittedIcUri = $l.permittedInterconnectTypeUri

						        write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]] Found permitted Interconnect Type URI $($permittedIcUri) for Bay $($bay)"

						    }

						} 
							
						#Get Interconnect Type object in order to get relative port ID
						$_interconnecttype = Send-HPOVRequest $permittedIcUri -Hostname $_resource.ApplianceConnection.Name

						#Translate the port number
						$_portRelativeValue = ($_interconnecttype.portInfos | ? portName -eq $uplinkPort).portNumber

						#Didn't find relative port number, so generate terminating error
						if (-not($_portRelativeValue)) 
						{

						    $errorRecord = New-ErrorRecord HPOneView.UplinkSetResourceException InvalidUplinkPortID InvalidArgument 'port' -Message "The provided uplink port 'BAY$($bay):$($uplinkPort)' is an invalid port ID.  Did you mean 'X$($uplinkPort)'?  Please check the value and try again." #-verbose
						    $pscmdlet.ThrowTerminatingError($errorRecord)

						}

						#Add uplink port
						$_location = NewObject -UplinkSetLocation

						($_location.location.locationEntries | ? type -eq 'Bay').value = [int]$bay
						($_location.location.locationEntries | ? type -eq 'Port').value = [int]$_portRelativeValue

						#Create Primary Port logical location object
						if ($PrimaryPort -match $port -and $mode -eq "Failover") 
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting Uplink Set mode to 'Failover', and Primary Port to '$PrimaryPort'"

							[void]$_liUplinkSetObject.primaryPortLocation.locationEntries.Add((

									[PSCustomObject]@{
							                
										type  = "Enclosure";
										value = 1

									},
									[PSCustomObject]@{

										type  = "Bay";
										value = [int]$bay

									},
									[PSCustomObject]@{

										type  = "Port";
										value = [int]$_portRelativeValue

									}

								)

							)

						}
        
						#Set FC Uplink Port Speed
						if ($Type -eq "FibreChannel") 
						{ 

							$_location.desiredSpeed = $global:SetUplinkSetPortSpeeds[$fcUplinkSpeed] 

						}

						else 
						{ 
								
							$_location.desiredSpeed = "Auto" 
							
						}

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding Uplink Set to LIG: $($_logicalLocation | out-string)"
						        
						[void]$_liUplinkSetObject.portConfigInfos.Add($_location)

					}

					#Network Objects
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Network Uris"
					$_networkUris = GetNetworkUris $Networks

					$_liUplinkSetObject.networkUris = $_networkUris | ? { $_.StartsWith('/rest/ethernet-networks/') }
					$_liUplinkSetObject.fcNetworkUris = $_networkUris | ? { $_.StartsWith('/rest/fc-networks/') }
					$_liUplinkSetObject.fcoeNetworkUris = $_networkUris | ? { $_.StartsWith('/rest/fcoe-networks/') }
						
					if ($NativeEthNetwork)
					{
							
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Native Ethernet Network Uri"

						$_liUplinkSetObject.nativeNetworkUri = (GetNetworkUris $NativeEthNetwork)[0]

					}

					#Validate Uplink Network Type.     
					$_liUplinkSetObject.networkType = $Type  
						
					[void]$_resource.uplinkSets.Add($_ligUplinkSetObject)
		
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($_resource.name) Uplink Set object: $($_liUplinkSetObject | convertto-json -depth 99)"

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request..."

					Try
					{
							
						$resp = Send-HPOVRequest $script:uplinkSetsUri POST $_liUplinkSetObject -Hostname $_resource.ApplianceConnection.Name

						[void]$Results.Add($resp)

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}

				'logical-interconnect-groups'
				{

					# // todo update with C# strongly typed name
					if(-not($_resource -is [PSCustomObject]))
					{
						
						$errorRecord = New-ErrorRecord ArgumentException InvalidParameter InvalidArgument 'Resource' -Message "The -Resource parameter value provided is not a Logical Interconnect Group object.  Please check the value and try again." #-verbose
						$pscmdlet.ThrowTerminatingError($errorRecord)

					}

					#Create new instance of the LIGUplinkSet Object
					$_ligUplinkSetObject = NewObject -ligUplinkSetObject

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Provided LIG Resource Name: $($_resource.name)"
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Provided LIG Resource Category: $($_resource.category)"
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Provided LIG Resource URI: $($_resource.uri)"

					#Get list of interconnects in LIG definition
					$ligInterconnects = $_resource.interconnectMapTemplate.interconnectMapEntryTemplates
					
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Uplink Ports: $($UplinkPorts | out-string)"
					$UplinkPorts = $UplinkPorts.Split(',')

					#Loop through requested Uplink Ports
					$port              = New-Object System.Collections.ArrayList
					$uslogicalLocation = New-Object System.Collections.ArrayList

					foreach ($port in $UplinkPorts)
					{

						$rem = "bayBAY"
						    
						#Split string to get bay and port
						$port = $port.Split(':')
						    
						#remove bay so we just have the ID
						$bay = $port[0].TrimStart($rem)
						    
						#Get faceplate portName
						$uplinkPort = $port[1]
						    
						write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]] Processing Port Bay$($bay):$($uplinkPort)"

						write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]] Looking for Interconnect URI for Bay $($bay)"

						#Loop through Interconnect Map Entry Template items looking for the provided Interconnet Bay number
						ForEach ($l in $_resource.interconnectmaptemplate.interconnectmapentrytemplates) 
						{ 

						    $found = $l.logicalLocation.locationEntries | ? type -eq "Bay" -and relativeValue -eq $bay
													            
						    if ($found) 
							{
						                
						        $permittedIcUri = $l.permittedInterconnectTypeUri

						        write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())]] Found permitted Interconnect Type URI $($permittedIcUri) for Bay $($bay)"

						    }

						} 

						#Get Interconnect Type object in order to get relative port ID
						$_interconnecttype = Send-HPOVRequest $permittedIcUri -Hostname $_resource.ApplianceConnection.Name

						#Translate the port number
						$_portRelativeValue = ($_interconnecttype.portInfos | ? portName -eq $uplinkPort).portNumber

						#Didn't find relative port number, so generate terminating error
						if (-not($_portRelativeValue)) 
						{

						    $errorRecord = New-ErrorRecord HPOneView.UplinkSetResourceException InvalidUplinkPortID InvalidArgument 'port' -Message "The provided uplink port 'BAY$($bay):$($uplinkPort)' is an invalid port ID.  Did you mean 'X$($uplinkPort)'?  Please check the value and try again." #-verbose
						    $pscmdlet.ThrowTerminatingError($errorRecord)

						}

						#Add uplink port
						$_location = NewObject -UplinkSetLogicalLocation
						($_location.logicalLocation.locationEntries | ? type -eq 'Bay').relativeValue = [int]$bay
						($_location.logicalLocation.locationEntries | ? type -eq 'Port').relativeValue = [int]$_portRelativeValue

						#Create Primary Port logical location object
						if ($PrimaryPort -match $port -and $mode -eq "Failover") 
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting Uplink Set mode to 'Failover', and Primary Port to '$PrimaryPort'"

							[void]$_ligUplinkSetObject.primaryPortLocation.locationEntries.Add(
									
								(

									@{
							                
										type          = "Enclosure";
										relativeValue = 1

									},
									@{

										type          = "Bay";
										relativeValue = [int]$bay

									},
									@{

										type          = "Port";
										relativeValue = [int]$_portRelativeValue

									}

								)

							)

						}
        
						#Set FC Uplink Port Speed
						if ($Type -eq "FibreChannel") 
						{ 

							$_logicalLocation.desiredSpeed = $global:SetUplinkSetPortSpeeds[$fcUplinkSpeed] 

						}

						else 
						{ 
								
							$_logicalLocation.desiredSpeed = "Auto" 
							
						}

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding Uplink Set to LIG: $($_logicalLocation | out-string)"
						        
						[void]$_ligUplinkSetObject.logicalPortConfigInfos.Add($_logicalLocation)

					}

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Network Uris"
					$_ligUplinkSetObject.networkUris = GetNetworkUris $Networks
						
					if ($NativeEthNetwork)
					{
							
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Native Ethernet Network Uri"

						$_ligUplinkSetObject.nativeNetworkUri = (GetNetworkUris $NativeEthNetwork)[0]

					}

					#Validate Uplink Network Type.     
					$_ligUplinkSetObject.networkType = $Type  
						
					[void]$_resource.uplinkSets.Add($_ligUplinkSetObject)
		
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($_resource.name) Uplink Set object: $($_ligUplinkSetObject | convertto-json -depth 99)"

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request..."

					Try
					{
							
						$resp = Send-HPOVRequest $_resource.uri PUT $_resource -Hostname $_resource.ApplianceConnection.Name

						[void]$Results.Add($resp)

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}

				#Unsupported resource category
				default
				{

					$errorRecord = New-ErrorRecord ArgumentException InvalidParameter InvalidArgument 'Resource' -TargetType 'PSObject' -Message "The Resource parameter value provided is not a Logical Interconnect Group or Logical Interconnect object.  Please check the value and try again." #-verbose
					$pscmdlet.ThrowTerminatingError($errorRecord)

				}

			}

		}

	}

	End
	{

		Return $Results

	}

}

function GetNetworkUris
{
	[CmdLetBinding(DefaultParameterSetName = "Default")]
    Param (

		[parameter(Mandatory, Position = 0, ParameterSetName = "Default")]
		[System.Collections.ArrayList]$Networks

	)

	Begin
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		$NetworkUris = New-Object System.Collections.ArrayList

	}

	Process
	{

		#Get Network URI's if values are of type String
		ForEach ($_net in $Networks)
		{

			#Network is String and Name; call Get-HPOVNetwork
			if ($_net -is [String] -and (-not($_net.StartsWith('/rest/'))))
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network is type String, and Network Name"

				#Get Network Object
				$_net = Get-HPOVNetwork $_net -ApplianceConnection $_net.ApplianceConnection
	
				#Insert object into original arraylist
				[void]$NetworkUris.Add($_net.uri)

			}

			elseif ($_net -is [String] -and $_net.StartsWith('/rest/'))
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network is type String, and URI of network."

				[void]$NetworkUris.Add($_net)

			}

			# // Need to change this to HPOneView.Networking.Networks.Ethernet
			#elseif ($_net -is [HPOneView.Networking.EthernetNetwork] -or $_net -is [HPOneView.Networking.FCoENetwork]-or $_net -is [HPOneView.Networking.Networks.FibreChannelNetwork])
			elseif ($_net.PSTypeNames -contains 'HPOneView.Networking.Networks.Ethernet' -or $_net -contains 'HPOneView.Networking.FCoENetwork' -or $_net -contains 'HPOneView.Networking.Networks.FibreChannelNetwork')
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network '$($_net.name)' is [$($_net.GetType().Fullname)]"

				[void]$NetworkUris.Add($_net.uri)

			}

		}

	}

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network URIs: $($Networks -join ", ")"

		Return $Networks
	
	}

}

#######################################################
# Server Profiles: 
#

 function Get-HPOVServerProfile 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdLetBinding(DefaultParameterSetName = "Default")]
    Param 
    (

        [parameter(ValueFromPipeline = $false, ParameterSetName = "Default", Mandatory = $false, Position = 0)]
        [parameter(ValueFromPipeline = $false, ParameterSetName = "Detailed", Mandatory = $false, Position = 0)]
        [parameter(ValueFromPipeline = $false, ParameterSetName = "Export", Mandatory = $false, Position = 0)]
        [Alias('profile')]
        [string]$name = $null,

        [parameter(ValueFromPipeline = $false, ParameterSetName = "Detailed", Mandatory = $true)]
        [switch]$detailed,

        [parameter(ValueFromPipeline = $false, ParameterSetName = "Default", Mandatory = $false)]
        [parameter(ValueFromPipeline = $false, ParameterSetName = "Export", Mandatory = $false)]
        [switch]$Unassigned,

		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},
        
        [parameter(ValueFromPipeline = $false, ParameterSetName = "Export", Mandatory = $true)]
        [alias("x")]
        [switch]$export,

        [parameter(ValueFromPipeline = $false, ParameterSetName = "Export", Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [alias("save")]
        [string]$location

    )

    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        #Validate the path exists.  If not, create it.
		if (($Export) -and (-not(Test-Path $Location)))
		{ 
        
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Directory does not exist.  Creating directory..."
            
			New-Item -path $Location -ItemType Directory
        
		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}
        

        $uri = $script:profilesUri

        if ($name) 
        { 
               
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received name: $($name)"
            $name = $name -replace ("[*]","%25") -replace ("[&]","%26")
            
            $uri += "?filter=name matches '$name'&sort=name:asc"
            
        }

        $ProfileCollection = New-Object System.Collections.ArrayList

	}

	Process 
    {
        
        ForEach ($_connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_connection.Name)' Appliance (of $($ApplianceConnection.Count))"

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"

	        $profiles = Send-HPOVRequest $uri -Hostname $_connection

            if ($PSBoundParameters['Unassigned']) 
            {

                $profiles.members = $profiles.members | ? serverHardwareUri -eq $null

            }
        
            foreach ($_profile in $profiles.members)
            {
            
                $_profile.PSObject.TypeNames.Insert(0,'HPOneView.ServerProfile')
                    
                [void]$ProfileCollection.Add($_profile)
                
            }

        }

	}

    End 
    {

        "Done. {0} server profile resource(s) found." -f $ProfileCollection.count | write-verbose 

        #If a search for specific profile returns 0 results, throw a terminating error
        if(-not($ProfileCollection) -and $name)
        {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile Resource Name was provided, yet no results were found.  Generate Error."

            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerProfileResourceNotFound ObjectNotFound "Name" -Message "The specified Server Profile '$name' not found. Please check the name again, and try again." #-verbose
            $pscmdlet.ThrowTerminatingError($errorRecord)
            
        }

        elseif ($PSBoundParameters['Detailed']) 
        {

            #Display Pertinant Server Profile data in Table format
            $a1 = @{Expression={$_.name};Label="Name"},
                  @{Expression={$profileCache[$serverHardwareTypeUri].name};Label="Server Hardware Type"},
                  @{Expression={ if ($profileCache[$enclosureGroupUri]) {$profileCache[$enclosureGroupUri]}
								 else { 'N/A' }
								};Label="Enclosure Group"},
                  @{Expression={	if ($_.serverHardwareUri){ (Send-HPOVRequest $_.serverHardwareUri).name }
				 		        else { "Unassigned" }
				                 };Label="Assigned"},
                  @{Expression={
                  
                         switch ($_.affinity) {
                  
                             "Bay" { "Device bay" }
                             "BayAndServer" { "Device bay + Server Hardware" }
                  
                  
                         }
                  
                  };Label="Server Affinity"},
                  @{Expression={$_.state};Label="State"},
                  @{Expression={$_.status};Label="Status"}

            $a2 = @{Expression={$_.bios.manageBios};Label="Manage BIOS";align="Left"},
                  @{Expression={$_.boot.manageBoot};Label="Manage Boot Order";align="Left"},
                  @{Expression={$_.firmware.manageFirmware};Label="Manage Firmware";align="Left"},
                  @{Expression={if ($_.serialNumberType -eq "Virtual") { $_.serialNumber + " (v)" } else { $_.serialNumber + " (p)" }};Label="Serial Number"},
                  @{Expression={if ($_.serialNumberType -eq "Virtual") { $_.uuid + " (v)" } else { $_.uuid + " (p)" }};Label="UUID"}


            #Firmware Details
            $f = @{Expression={
                if ($_.firmware.manageFirmware) {

                    $baseline = Send-HPOVRequest $_.firmware.firmwareBaselineUri
                    "$($baseline.name) version $($baseline.version)"

                }
                else { "none" }
            
            };Label="Firmware Baseline"}

            $c = @{Expression={$_.id};Label="ID";width=2},
                 @{Expression={$_.functionType};Label="Type";width=12},
                 @{Expression={
                   
                   $address = @()
                 
                   #Mac Address
                   if ($_.macType -eq "Virtual" -and $_.mac) { $address += "MAC $($_.mac) (V)" }
                   elseif ($_.macType -eq "Physical" -and $_.mac) { $address += "MAC $($_.mac) (p)" }
                   
                   #WWNN
                   if ($_.wwpnType -eq "Virtual" -and $_.wwnn) { $address += "WWNN $($_.wwnn) (v)"} 
                   elseif ($_.wwpnType -eq "Physical" -and $_.wwnn) { $address += "WWNN $($_.wwnn) (p)" }
                   
                   #WWPN
                   if ($_.wwpnType -eq "Virtual" -and $_.wwpn) { $address += "WWPN $($_.wwpn) (v)"} 
                   elseif ($_.wwpnType -eq "Physical" -and $_.wwpn) { $address += "WWPN $($_.wwpn) (p)" }

                   $addressCol = $address | Out-String | % { $_ -replace '^\s+|\s+$' }
                   $addressCol
                   
                 };Label="Address";width=32},
                 @{Expression={$profileCache[$_.networkUri]};Label="Network"},
                 @{Expression={$_.portId};Label="Port Id";width=10},
                 @{Expression={[string]$_.requestedMbps};Label="Requested BW";width=12},
                 @{Expression={[string]$_.maximumMbps};Label="Maximum BW";width=10},
                 @{Expression={
                 
                      $bootSetting = @()
                      $bootSetting += $_.boot.priority
                      if ($_.boot.targets) {
                 
                           for ($i=0; $i -eq $boot.targets.count; $i++) { $bootSetting += "WWN $($_.boot.targets[$i].arrayWwpn)`nLUN $($_.boot.targets[$i].lun)" }
                 
                      }
                      $bootSettingString = $bootSetting | Out-String | % { $_ -replace '^\s+|\s+$' }
                      $bootSettingString
                 
                   
                  };Label="Boot";width=20},
                 @{Expression={
                 
                    if ($_.functionType -eq "FibreChannel" -and -not ($_.boot.targets)) { "Yes" } 
                    elseif ($_.functionType -eq "FibreChannel" -and $_.boot.targets) { "No" }
                    else { $Null }
                 
                  };Label="Use Boot BIOS";width=13}
                               
            #Display extended BIOS settings
            $b = @{Expression={$_.category};Label="BIOS Category"},
                 @{Expression={$_.settingName};Label="Setting Name"},
                 @{Expression={$_.valueName};Label="Configured Value"}

            $ls = @{Expression={$_.localStorage.manageLocalStorage};Label="Manage Local Storage";align="Left"},
                  @{Expression={$_.localStorage.initialize};Label="Initialize Disk";align="Left"},
                  @{Expression={
                  
                        $logicalDriveCol = @()
                        $d=0

                        while ($d -lt $sp.localStorage.logicalDrives.count) {

                            if ($_.localStorage.logicalDrives[$d].bootable) { $logicalDriveCol += "Drive {$d} $($sp.localStorage.logicalDrives[$d].raidLevel) (Bootable)" }
                            else { $logicalDriveCol += "Drive {$d} $($sp.localStorage.logicalDrives[$d].raidLevel)" }
                            $d++
                        }

                        $logicalDriveString = $logicalDriveCol | Out-String | % { $_ -replace '^\s+|\s+$' }
                        $logicalDriveString
                    
                   };Label="Logical Disk"}

            $ss = @{Expression={$_.manageSanStorage};Label="Manage SAN Storage";align="Left"},
                  @{Expression={$_.hostOSType};Label="Host OS Type";align="Left"}

            $p = @{Expression={[int]$_.connectionId};Label="Connection ID";align="Left"},
                 @{Expression={[string]$_.network};Label="Fabric";align="Left"},
                 @{Expression={[string]$_.initiator};Label="Initiator";align="Left"},
                 @{Expression={[string]$_.target};Label="Target";align="Left"},
                 @{Expression={[bool]$_.isEnabled};Label="Enabled";align="Left"}

            #Server Profile cache
            $profileCache = @{}
            
            #loop through all Server Profile objects and display details
            ForEach ($profile in ($ProfileCollection | sort-object -property name)) {

                $serverHardwareTypeUri = $profile.serverHardwareTypeUri
                $enclosureGroupUri = $profile.enclosureGroupUri

                #Cache resources during runtime to reduce API calls to appliance.
                if (-not ($profileCache[$serverHardwareTypeUri])) { $profileCache.Add($serverHardwareTypeUri,(Send-HPOVRequest $serverHardwareTypeUri -appliance $_.ApplianceConnection.name)) }
                if (-not ($profileCache[$enclosureGroupUri]) -and $profile.enclosureGroupUri) { $profileCache.Add($enclosureGroupUri,(Send-HPOVRequest $enclosureGroupUri -appliance $_.ApplianceConnection.name).name) }
                foreach ($connection in $profile.connections) {
                
                    $connection | % { $_.psobject.typenames.Insert(0,”HPOneView.Profile.Connection”) }

                    if (-not ($profileCache[$connection.networkUri])) { $profileCache.Add($connection.networkUri,(Send-HPOVRequest $connection.networkUri -appliance $_.ApplianceConnection.name ).name) } 
                
                }

                foreach ($volume in $profile.sanStorage.volumeAttachments) {

                    #insert HPOneView.Profile.SanVolume TypeName
                    $volume | % { $_.psobject.typenames.Insert(0,”HPOneView.Profile.SanVolume") }
	
                    #Cache Storage System, Storage Pool and Storage Volume Resources
                    if (-not ($profileCache[$volume.volumeStorageSystemUri])) { $profileCache.Add($volume.volumeStorageSystemUri,(Send-HPOVRequest $volume.volumeStorageSystemUri $_.ApplianceConnection.name)) }
                    if (-not ($profileCache[$volume.volumeStoragePoolUri])) { $profileCache.Add($volume.volumeStoragePoolUri,(Send-HPOVRequest $volume.volumeStoragePoolUri $_.ApplianceConnection.name)) }
                    if (-not ($profileCache[$volume.volumeUri])) { $profileCache.Add($volume.volumeUri,(Send-HPOVRequest $volume.volumeUri $_.ApplianceConnection.name)) }

                }

                #$profileCache

                #Initial Server Profile information
                $profile | format-table $a1 -AutoSize -wrap
                $profile | format-table $a2 -AutoSize -wrap

                #Firmware Baseline
                $profile | format-table $f

                #Server Profile Connection details
                $profile.connections | format-table -wrap
                
                #Local Storage
                $profile | format-table $ls -wrap -auto

                #SAN Storage
                $profile.sanStorage | Format-Table $ss -auto
                #$profile.sanStorage.volumeAttachments | format-table -auto

                $profile.sanStorage.volumeAttachments | % {

                    $_ | format-table -auto

                    $pathConnectionCol = @()

                    foreach ($path in $_.storagePaths) {

                        $pathObject = [PSCustomObject]@{
							connectionId = $Null; 
							network      = $Null; 
							initiator    = $Null; 
							target       = $Null; 
							isEnabled    = $Null
						}

                        $pathConnection = $profile.connections | where { $path.connectionId -eq $_.id }

                        $pathObject.connectionId = $pathConnection.id
                        $pathObject.network      = $profileCache[$pathConnection.networkUri]
                        $pathObject.initiator    = $pathConnection.wwpn
                        $pathObject.target       = if ($path.storageTargets) { $path.storageTargets }
												   else { "Pending" }
                        $pathObject.isEnabled    = [bool]$path.isEnabled
                        $pathConnectionCol += $pathObject

                    }

                    #
                    #Display path details with a left padded view. Format-Table doesn't have the ability to pad the display
                    $capture = ($pathConnectionCol | sort connectionId | format-table $p -AutoSize -wrap | out-string) -split "`n"
                    $capture | % { ($_).PadLeft($_.length + 5) }

                }

                #Boot Order
                $bootOrder = @()
                if ($profile.boot.manageBoot) {

                    $i = 0
                    while ($i -lt $profile.boot.order.count) {
                        $bootOrder += "$($i+1) $($profile.boot.order[$i])"
                        $i++
                    }
                    write-host "Boot Order"
                    write-host "----------"
                    $bootOrder

                }
                else { "No Boot Management" }

                #Display configured BIOS Settings from profile
                $configedBiosSettings = @()

                foreach ($setting in $profile.bios.overriddenSettings) {

                    $shtBiosSettingDetails = $profileCache[$serverHardwareTypeUri].biosSettings | ? { $setting.id -eq $_.id }

                    $biosSetting = [PSCustomObject]@{

                        Category = $shtBiosSettingDetails.category;
                        settingName = $shtBiosSettingDetails.name;
                        valueName = ($shtBiosSettingDetails.options | ? { $_.id -eq $setting.value } ).name;

                    }

                    $configedBiosSettings += $biosSetting
                
                }            
            
                $configedBiosSettings | sort category,settingName | format-list $b

                "----------------------------------------------------------------------"
            
            }

        }

        #If user wants to export the profile configuration
        elseif ($export) 
        {

            #Get the unique applianceConnection.name properties from the profile collection for grouping the output files
            $ProfileGroupings = $ProfileCollection.ApplianceConnection.name | Select -Unique

            ForEach ($pg in $ProfileGroupings)
            {
                
                $outputProfiles = New-Object System.Collections.ArrayList

                $profiles = $ProfileCollection | ? {$_.ApplianceConnection.Name -eq $pg}

                #Loop through all profiles
                foreach ($profile in $profiles) 
                {

                    #trim out appliance unique properties

                    $_profile = $profile | select-object -Property * -excludeproperty uri,etag,created,modified,status,state,inprogress,enclosureUri,enclosureBay,serverHardwareUri,taskUri,ApplianceConnection
                    $_profile.serialNumberType = "UserDefined"

                    #Loop through the connections to save the assigned address
                    $i = 0
                    foreach ($connection in $profile.connections) 
                    {

                        if ($profile.connections[$i].mac) { $_profile.connections[$i].macType = "UserDefined" }
                        if ($profile.connections[$i].wwpn) { $_profile.connections[$i].wwpnType = "UserDefined" }
                        $i++

                    }

                    [void]$outputProfiles.Add($_profile)
                    
                }

                #save profile to JSON file
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Saving $($_profile.name) to $($location)\$($_profile.name).json"

                convertto-json -InputObject $outputProfiles -depth 99 | new-item "$location\$pg`_$($_profile.name).json" -itemtype file

            }

        }

        else 
        {

            Return $ProfileCollection

        }

    }

 }

 function New-HPOVServerProfile 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdLetBinding(DefaultParameterSetName = "Default")]
    Param 
    (

        [parameter(Mandatory = $true,ParameterSetName = "Default")]
        [parameter(Mandatory = $true,ParameterSetName = "SANStorageAttach")]
		[ValidateNotNullOrEmpty()]
        [string]$name,

        [parameter(Mandatory = $true,ParameterSetName = "Default")]
        [parameter(Mandatory = $true,ParameterSetName = "SANStorageAttach")]
		[ValidateSet("bay", "server", "unassigned")]
        [alias('assign')]
        [string]$assignmentType, # bay, server, unassigned

        [parameter(Mandatory = $false, valuefrompipeline = $False, ParameterSetName = "Default")]
        [parameter(Mandatory = $false, valuefrompipeline = $False, ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
        [object]$enclosure,

        [parameter(Mandatory = $false, valuefrompipeline = $False, ParameterSetName = "Default")]
        [parameter(Mandatory = $false, valuefrompipeline = $False, ParameterSetName = "SANStorageAttach")]
        [ValidateRange(1,16)]
        [Alias('bay')]
        [int32]$enclosurebay,

        [parameter(Mandatory = $false, valuefrompipeline = $True, ParameterSetName = "Default")]
        [parameter(Mandatory = $false, valuefrompipeline = $True, ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
        [object]$server,

        [parameter(Mandatory = $false,ParameterSetName = "Default")] 
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
		[string]$description = $null,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
		[ValidateNotNullOrEmpty()]
        [array]$connections = @(),

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
		[ValidateNotNullOrEmpty()]
		[Alias('eg')]
        [object]$enclosureGroup = $Null,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
		[Alias('sht')]
        [object]$serverHardwareType = $null,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
        [switch]$firmware,
	
        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
        [object]$baseline = $null,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [switch]$forceInstallFirmware,
	
        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
        [switch]$bios = $false,

	    [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
        [array]$biosSettings=@(),
        
        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]        
        [ValidateSet("UEFI","UEFIOptimized","BIOS", IgnoreCase = $False)]
        [string]$BootMode = "BIOS",

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]        
        [ValidateSet("Auto","IPv4","IPv6","IPv4ThenIPv6","IPv6ThenIPv4", IgnoreCase = $False)]
        [string]$pxeBootPolicy = "Auto",

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [Alias('boot')]
        [switch]$manageBoot,

	    [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [array]$bootOrder = @(),

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [switch]$localstorage,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [switch]$Initialize,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]        
        [switch]$Bootable,

        [parameter(Mandatory = $false, ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateSet("RAID1","RAID0","NONE", IgnoreCase=$true)]
        [string]$RaidLevel = $Null,

        [parameter(Mandatory = $True,ParameterSetName = "SANStorageAttach")]
        [switch]$SANStorage,

        [parameter(Mandatory = $true, ParameterSetName = "SANStorageAttach")]
        [ValidateSet('CitrixXen','AIX','IBMVIO','RHEL4','RHEL3','RHEL','RHEV','VMware','Win2k3','Win2k8','Win2k12','OpenVMS','Egenera','Exanet','Solaris9','Solaris10','Solaris11','ONTAP','OEL','HPUX11iv1','HPUX11iv2','HPUX11iv3','SUSE','SUSE9','Inform', IgnoreCase=$true)]
        [Alias('OS')]
        [string]$HostOStype = $Null,

        [parameter(Mandatory = $true, ParameterSetName = "SANStorageAttach")]
        [object]$StorageVolume = $Null,

        [parameter(Mandatory = $false, ParameterSetName = "SANStorageAttach")]
        [Alias('Even')]
        [switch]$EvenPathDisabled,

        [parameter(Mandatory = $false, ParameterSetName = "SANStorageAttach")]
        [Alias('Odd')]
        [switch]$OddPathDisabled,

        [parameter(Mandatory = $false, ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateSet("Bay","BayAndServer", IgnoreCase=$false)]
        [string]$Affinity = "Bay",
	
        [parameter(Mandatory = $false, ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateSet("Virtual", "Physical", "UserDefined", IgnoreCase=$true)]
        [string]$macAssignment = "Virtual",

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateSet("Virtual", "Physical", "'UserDefined", IgnoreCase=$true)]
        [string]$wwnAssignment = "Virtual",

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateSet("Virtual", "Physical", "UserDefined", IgnoreCase=$true)]
        [string]$snAssignment = "Virtual",
		[parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [string]$serialnumber = $Null,
		[parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [string]$uuid = $Null,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [bool]$hideUnusedFlexNics = $True,

        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

        [parameter(Mandatory = $true, ParameterSetName = "Import")]
        [switch]$Import,
        
        [parameter(Mandatory = $true, ParameterSetName = "Import", ValueFromPipeline = $true)]
        [alias("location","file")]
        [Object]$ProfileObj

    )
	
    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		if ($snAssignment -eq "UserDefined" -and (-not($serialnumber)) -and (-not($uuid))) 
        {
		
        	$errorRecord = New-ErrorRecord HPOneview.ServerProfileResourceException InvalidArgument InvalidArgument 'snAssignment' -Message "The -snAssignment paramter was set to 'UserDefined', however both -serialnumber and -uuid are Null.  You must specify a value for both parameters." #-verbose
        
            $PSCmdlet.ThrowTerminatingError($errorRecord)
		
        }
		
        elseif ($snAssignment -eq "UserDefined" -and $serialnumber -and (-not($uuid))) 
		{
		
			$errorRecord = New-ErrorRecord HPOneview.ServerProfileResourceException InvalidArgument InvalidArgument 'uuid' -Message "The -snAssignment paramter was set to 'UserDefined', however -uuid is Null.  You must specify a value for both parameters." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif ($snAssignment -eq "UserDefined" -and (-not($serialnumber)) -and $uuid) 
		{
			
			$errorRecord = New-ErrorRecord HPOneview.ServerProfileResourceException InvalidArgument InvalidArgument 'serialnumber' -Message "The -snAssignment paramter was set to 'UserDefined', however -serialnumber is Null.  You must specify a value for both parameters." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)
		
		}

        switch ($assignmentType) { #Update the error information

            "server" {
                if(!$server){
                    $errorRecord = New-ErrorRecord HPOneview.ServerProfileResourceException InvalidArgument InvalidArgument 'server' -Message "The -assignmentType parameter is set to 'server', but no server parameter was supplied." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                }
            }

            "bay" {
                if(!$enclosureBay){
                    $errorRecord = New-ErrorRecord HPOneview.ServerProfileResourceException InvalidArgument InvalidArgument 'server' -Message "The -assignmentType parameter is set to 'bay', but no bay parameter was supplied." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                }
                if(!$enclosure){
                    $errorRecord = New-ErrorRecord HPOneview.ServerProfileResourceException InvalidArgument InvalidArgument 'server' -Message "The -assignmentType parameter is set to 'server', but no server parameter was supplied." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                }
                if(!$serverHardwareType){
                    $errorRecord = New-ErrorRecord HPOneview.ServerProfileResourceException InvalidArgument InvalidArgument 'server' -Message "The -assignmentType parameter is set to 'server', but no server parameter was supplied." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                }
                if ($ApplianceConnection.Count -gt 1){
                    if($enclosure -is [string] -and $enclosure.StartsWith("/rest")){
                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVServerProfile' -Message "Enclosure as URI is not supported for multiple appliance connections." #-verbose
	    	    	    $PSCmdlet.ThrowTerminatingError($errorRecord)
                    }
                }

            }

            "unassigned" {
                
                #If the profile is not based on a template, the SHT is required
                if(!$template -and !$serverHardwareType) {

                    $errorRecord = New-ErrorRecord HPOneview.ServerProfileResourceException InvalidArgument InvalidArgument 'serverHardwareType' -Message "The -assignmentType parameter is set to 'unassigned', but no server hardware type was supplied." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                }
                if($server){
                    $errorRecord = New-ErrorRecord HPOneview.ServerProfileResourceException InvalidArgument InvalidArgument 'serverHardwareType' -Message "The -assignmentType parameter is set to 'unassigned', but no server hardware type was supplied." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                }

            }

        }

        #Check for URI values in parameters and validate that only one appliance connection is provided in the call
        if($ApplianceConnection.Count -gt 1)
		{
            
            #SHT
            if($serverHardwareType -is [string] -and $serverHardwareType.StartsWith($script:serverHardwareTypesUri))
			{
                
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVPropfile' -Message "Server Hardware Type as URI is not supported for multiple appliance connections" #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)
            
			}
            
			if($serverHardwareType -is [string] -and $serverHardwareType.StartsWith("/rest"))
			{
            
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVPropfile' -Message "Server Hardware Type as URI is not supported for multiple appliance connections." #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)
            
			}

            #EG
            if(($enclosureGroup -is [string] -and $enclosureGroup.StartsWith("/rest")))
			{
            
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVPropfile' -Message "Enclosure Group as URI is not supported for multiple appliance connections." #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)
            
			}

            #Server
            if ($server -is [string] -and $server.StartsWith("/rest")) 
			{
                
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVPropfile' -Message "Server as URI is not supported for multiple appliance connections." #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)
            
			}

            #Baseline
            if (($baseline -is [string]) -and ($baseline.StartsWith('/rest'))) 
			{
                
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVPropfile' -Message "Baseline as URI is not supported for multiple appliance connections." #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)
            
			}

            #import
            if($Import) 
			{
                
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVPropfile' -Message "Import functionality is not supported for multiple appliance connections." #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

        }

        $uri = $script:ProfilesUri

        $colStatus = New-Object System.Collections.ArrayList

    }
	
	Process 
	{
        
        ForEach($_Connection in $ApplianceConnection)
		{

            #Import Server Profile JSON to appliance
            if ($import) 
			{

                if (($ProfileObj -is [System.String]) -and (Test-Path $ProfileObj)) 
				{

                    #Recieved file location
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received JSON file as input $($ProfileObj)"
                
					$serverProfile = (get-content $ProfileObj) -join "`n" | convertfrom-json
		    		
					#Remove unique values with Select-Object
		    		$serverProfile = $serverProfile | Select-Object * -Exclude uri,created,modified,eTag,ApplianceConnection

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"
                    
					Try
					{
						
						$resp = Send-HPOVRequest $script:profilesUri POST $serverProfile -appliance $_Connection

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

                }

                #Input object could be the JSON object, which is type [System.String]
                elseif ($ProfileObj -is [System.String]) 
				{

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received JSON resource object as input $($ProfileObj | out-string)"
                    
					$serverProfile = $ProfileObj -join "`n" | convertfrom-json

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"
                    
					Try
					{
					
						$resp = Send-HPOVRequest $script:profilesUri POST $serverProfile -appliance $_Connection

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

                }

                #Input object is PsCustomObject of a Server Profile
                elseif ($ProfileObj -is [PsCustomObject]) 
				{

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received JSON PsCustomObject as input $($ProfileObj | out-string)"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"
                    
					Try
					{

						$resp = Send-HPOVRequest $script:profilesUri POST $ProfileObj -appliance $_Connection

					}
					
					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

                }

                #Inavlid input type for $ProfileObj and Generate Terminating Error
                else 
				{ 

                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidImportObject InvalidArgument 'New-HPOVPropfile' -Message "Invalid `$Import input object.  Please check the object you provided for ProfileObj parameter and try again" #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                
                }

            }

            #We are not going to import a Server Profile
            else 
			{

				#New Server Resource Object
				$serverProfile = NewObject -ServerProfile
				    
				$serverProfile.name                          = $name
				$serverProfile.description                   = $description
				$serverProfile.affinity                      = $Affinity
				$serverProfile.hideUnusedFlexNics            = [bool]$hideUnusedFlexNics
				$serverProfile.bios.manageBios               = [bool]$bios
				$serverProfile.bios.overriddenSettings       = $biosSettings
				$serverProfile.firmware.manageFirmware       = [bool]$firmware
				$serverProfile.firmware.firmwareBaselineUri  = [String]$baseline
				$serverProfile.firmware.forceInstallFirmware = [bool]$forceInstallFirmware
				$serverProfile.boot.manageBoot               = $manageBoot.IsPresent
				$serverProfile.boot.order                    = $bootOrder
				$serverProfile.bootMode                      = $null
				$serverProfile.localStorage                  = $null
				$serverProfile.serialNumberType              = $snAssignment 
				$serverProfile.macType                       = $macAssignment
				$serverProfile.wwnType                       = $wwnAssignment
				$serverProfile.serialNumber                  = $serialnumber
				$serverProfile.uuid                          = $uuid

                if($assignmentType -eq 'bay' -and $enclosureBay)
                {
                    $serverProfile | Add-Member -NotePropertyName enclosureBay -NotePropertyValue $enclosureBay
                }

				#Exmamine the profile connections parameter and pull only those connections for this appliance connection
				If ($connections)
				{
				
					#$currentConnections = New-Object System.Collections.ArrayList
				    
					ForEach($c in $connections)
				{
			        if($c -is [array]){
                        [void]$serverProfile.connections.Add(($c | ?{$_.applianceConnection.name -eq $_Connection.name}  | Select-Object -property * -ExcludeProperty macType, mac, wwpnTYpe, wwnn, wwpn, applianceConnection))
                    }

					elseif ($c.ApplianceConnection.name -match $_Connection.name)
					{
			            #Remove connection parameters no permitted in Template
                        $c = $c | Select-Object -property * -ExcludeProperty macType, mac, wwpnTYpe, wwnn, wwpn, applianceConnection
						[void]$serverProfile.connections.Add($c)
			        
					}
			    
				}
				
				}
		    
		        # We are creating an unassigned server profile for profile assigned to an empty bay
                # Handle values provided for sht, eg, and enclosure
	            if ($assignmentType -eq 'unassigned' -or $assignmentType -eq 'bay') 
				{
		    	
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile assignmentType = $assignmentType"
		    	
		    	    #Check to see if the serverHardwareType is null, and generate error(s) then break.
		    	    if (-not($serverHardwareType))
					{

                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'ServerHardwareType' -Message "Server Hardware Type is missing.  Please provide a Server Hardware Type using the -sht parameter and try again." #-verbose
		    		    $PSCmdlet.ThrowTerminatingError($errorRecord)

		    	    }
		    	
		    	    #If the URI is passed as the Server Hardware Type, then set the serverHardwareTypeUri variable
		    	    If ($serverHardwareType -is [string])
					{

		    		    if ($serverHardwareType.StartsWith($script:serverHardwareTypesUri))
						{ 
                            
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SHT URI Provided: $serverHardwareType" 

                            $serverProfile.serverHardwareTypeUri = $serverHardwareType

							Try
							{
							
								$serverHardwareType = Send-HPOVRequest $serverHardwareType -appliance $_Connection
							
							}
                            
                            Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

                        }
		    		
		    		    #Otherwise, perform a lookup ofthe SHT based on the name
		    		    else 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SHT Name Provided: $serverHardwareType"

		    			    $serverHardwareType = Get-HPOVServerHardwareType -name $serverHardwareType -appliance $_Connection

                            if ($serverHardwareType) 
							{

								Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SHT URI: $serverHardwareTypeUri"

		    			        $serverProfile.serverHardwareTypeUri = $serverHardwareType.uri

                            }

                            else 
							{

                                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeParameter InvalidArgument 'ServerHardwareType' -Message "The -ServerHardwareType parameter value is invalid.  Please make sure it is a Name, URI or resource Object." #-verbose
                                $PSCmdlet.ThrowTerminatingError($errorRecord)

                            }

		    		    }

		    	    }

		    	
		    	    #Else the SHT object is passed
		    	    else 
					{ 
                        #Get the SHT for just this connection if multiple are passed via Get-HPOVServerHardwareType
                        #$serverHardwareType = $serverHardwareType | ? {$_.ApplianceConnection.name -eq $_Connection.name}
                        ForEach ($sht in $serverHardwareType){
                            if($sht.ApplianceConnection.name -eq $_Connection.name){
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ServerHardwareType object provided"
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ServerHardwareType Name: $($sht.name)"
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ServerHardwareType Uri: $($sht.uri)"

                                $serverProfile.serverHardwareTypeUri = $sht.uri

                                }
                        }
                        
                    }

		    	
                

		    	    
                    if (-not($enclosureGroup) -and (-not($serverHardwareType.model -match "DL")) -and $assignmentType -eq 'unassigned')
					{
		    			    
                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidEnclosureGroupObject InvalidArgument 'EnclosureGroup' -Message "Enclosure Group is missing.  Please provide an Enclosure Group using the -eg parameter and try again." #-verbose
		    		    $PSCmdlet.ThrowTerminatingError($errorRecord)

                    }

                    elseif ($enclosureGroup -is [string])
					{

		    		    #If the URI is passed as the Enclosure Group, then set the enclosureGroupUri variable
		    		    if ($enclosureGroup.StartsWith('/rest'))
						{ 
							
							$serverProfile.enclosureGroupUri = $enclosureGroup
						
						}

		    		    #Otherwise, perform a lookup ofthe Enclosure Group
		    		    else
						{

							Try
							{

								$enclosureGroup = Get-HPOVEnclosureGroup -name $enclosureGroup -appliance $_Connection

							}
		    			    
							Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] EG URI: $enclosureGroupUri"					    
                            
							$serverProfile.enclosureGroupUri = $enclosureGroup.uri
		    			    
		    		    }

		    	    }
		    				
		    	    #Else the EG object is passed
		    	    elseif (($enclosureGroup -is [Object]) -and ($enclosureGroup.category -eq "enclosure-groups")) 
					{ 

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group object provided"
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Name: $($enclosureGroup.name)"
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Uri: $($enclosureGroup.uri)"

                        $serverProfile.enclosureGroupUri = ($enclosureGroup | ? {$_Connection.name -eq $_.applianceConnection.name}).uri 

                    }

                    elseif (-not $enclosureGroup -and ($serverHardwareType.model -match "DL")) 
					{

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server is a ProLiant DL model. Enclosure Group not required."

                    }

                    #EG param not required if assignment is to a bay
                    elseif (-not $enclosureGroup -and ($assignmentType -eq 'bay'))
                    {
                        #First check for $enclosure param
                        if (!$enclosure){
                            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidEnclosureGroupObject InvalidArgument 'Enclosure' -Message "Enclosure is missing.  Please provide an Enclosure using the -enclosure parameter and try again." #-verbose
		    		        $PSCmdlet.ThrowTerminatingError($errorRecord)
                        }
                        
                        #Retrieve the enclosure group uri from passed in enclosure uri param
                        elseif($enclosure -is [string]) {
                            
                            if($enclosure.StartsWith('/rest')) { 
                                       
                                try {
                                    $enclosure = Send-HPOVRequest $enclosure -appliance $_Connection
                                    $serverProfile.enclosureUri = $enclosure.uri
                                    $serverProfile.enclosureGroupUri = $enclosure.enclosureGroupUri
                                    }
                                catch {
                                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidEnclosureGroupObject InvalidArgument 'Enclosure' -Message "Enclosure is missing.  Please provide an Enclosure using the -enclosure parameter and try again." #-verbose
		    		                $PSCmdlet.ThrowTerminatingError($errorRecord)
                                }

                            }

                            #enclosure is a name
                            else{
                                try {
                                    $enclosure = Get-HPOVEnclosure $enclosure -appliance $_Connection
                                    
                                    }
                                catch {
                                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidEnclosureGroupObject InvalidArgument 'Enclosure' -Message "Enclosure is missing.  Please provide an Enclosure using the -enclosure parameter and try again." #-verbose
		    		                $PSCmdlet.ThrowTerminatingError($errorRecord)
                                }
                            }

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Name: $($enclosure.uri)"
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Uri: $($enclosure.enclosureGroupUri)"
                            $serverProfile.enclosureUri = $enclosure.uri
                            $serverProfile.enclosureGroupUri = $enclosure.enclosureGroupUri
                        }

                        elseif($enclosure -is [object] -and $enclosure.category -match 'enclosures'){
                            
                            ForEach($e in $enclosure){
                                if ($e.ApplianceConnection.name -eq $_Connection.name){
                                    $serverProfile.enclosureUri = $e.uri
                                    $serverProfile.enclosureGroupUri = $e.enclosureGroupUri

                                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Name: $($e.name)"
                                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Uri: $($e.enclosureGroupUri)"

                                }
                                 
                            }
                            
                        }
                             
                    } 
                        
                                    
                    else 
					{ 
                    

                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidEnclosureGroupObject InvalidArgument 'EnclsoureGroup' -TargetType $EnclosureGroup.GetType().Name -Message "Enclosure Group is invalid.  Please specify a correct Enclosure Group name, URI or object and try again." #-verbose

                        #Generate Terminating Error
		    		    $PSCmdlet.ThrowTerminatingError($errorRecord)
                        
                    }

	            }
	
		        # Creating an assigned profile
		        else 
				{
		    	
		    	    #Looking for the $server DTO to be string
		    	    if ($server -is [string]) 
					{
		    		
		    		    #If the server URI is passed, look up the server object
		    		    if ($server.StartsWith($script:serversUri)) 
						{

		    			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server URI passed: $server"
		    				
							Try
							{
							
								[object]$server = Send-HPOVRequest $server -appliance $_Connection
							
							}
							
							Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

		    		    }
		    		
		    		    #Else the name is passed and need to look it up.
		    		    else
						{

							Try
							{

								[object]$server = Get-HPOVServer -name $server -appliance $_Connection

							}
		    			
							Catch
							{
								
								$PSCmdlet.ThrowTerminatingError($_)	
								
							}		    
                        
		    		    }

		    	    }
		    	
		    	    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Object: $($server | out-string)"

		    	    #Check to make sure the server NoProfileApplied is true
		    	    if (-not($server.serverProfileUri))
					{

		    		    $serverProfile.serverHardwareUri     = $server.uri
		    		    $serverProfile.serverHardwareTypeUri = $server.serverHardwareTypeUri
		    		    
                        #Handle Blade Server objects
                        if ($server.serverGroupUri) 
						{ 
							
							$serverProfile.enclosureGroupUri = $server.serverGroupUri 
						
						}

		    	    }

		    	    else 
					{

                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerProfileAlreadyAssigned ResourceExists 'New-HPOVServerProfile' -Message "$((Send-HPOVRequest $server.serverProfileUri).name) already has a profile assigned, '$($serverProfile.name)'.  Please specify a different Server Hardware object." #-verbose
		    		    $pscmdlet.ThrowTerminatingError($errorRecord)

		    	    }

                    #Get the SHT of the SH that we are going to assign.
					Try
					{

						$serverHardwareType = Send-HPOVRequest $server.serverHardwareTypeUri -appliance $_Connection

					}
                    
					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

		        }

                #Handle DL Server Profiles by setting BL-specific properties to NULL
                if ($serverHardwareType.model -match "DL") 
				{

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Hardware Type is a DL, setting 'macType', 'wwnType', 'serialNumberType', 'affinity' and 'hideUnusedFlexNics' to Null."

                    $serverProfile.macType            = $Null
                    $serverProfile.wwnType            = $Null
                    $serverProfile.serialNumberType   = $Null
                    $serverProfile.hideUnusedFlexNics = $Null
                    $serverProfile.affinity           = $Null

                }

                #Handle Boot Order
                if ((-not($PSBoundParameters["bootorder"])) -and (-not($PSBoundParameters["BootMode"])) -and $ManageBoot -and $serverHardwareType.model -match "Gen8") 
				{

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No boot order provided.  Defaulting to ‘CD’,’Floppy’,’USB’,’HardDisk’,’PXE’"
                    $serverProfile.boot.order = @(‘CD’,’Floppy’,’USB’,’HardDisk’,’PXE’)

                }

                elseif ((-not ($PSBoundParameters["bootorder"])) -and -not ($PSBoundParameters["BootMode"]) -and $ManageBoot -and $serverHardwareType.model -match "Gen9") 
				{

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No boot order provided.  Defaulting to ‘CD’,’USB’,’HardDisk’,’PXE’"
                    $serverProfile.boot.order = @(‘CD’,’USB’,’HardDisk’,’PXE’)
                
				}

		    	elseif ($ManageBoot -and $serverHardwareType.model -match "Gen9" -and $bootOrder -contains "Floppy" -and $BootMode -match "EUFI") 
				{
		    		
					$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidBootOrderParameterValue InvalidArgument  'BootOrder' -Message "The -bootOrder parameter contains 'Floppy' which is an invalid boot option for a UEFI-based system." #-verbose
		    		$pscmdlet.ThrowTerminatingError($errorRecord)

                }

                #Check to make sure Server Hardware Type supports Firmware Management (OneView supported G7 blade would not support this feature)
                if ($serverHardwareType.model -match "Gen9") 
				{
                    
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Gen 9 Server, setting BooMode to: $($BootMode)"

                    switch ($BootMode) 
					{

                        "BIOS" 
						{
                        
                            $serverProfile.bootMode = [PSCustomObject]@{
                                manageMode = $true;
                                mode       = $BootMode;
                            }
                        
                        }

                        { "UEFI","UEFIOptimized" -match $_ } {
                        
                            $serverProfile.bootMode = [PSCustomObject]@{
                                manageMode    = $true;
                                mode          = $BootMode;
                                pxeBootPolicy = $pxeBootPolicy
                            }

                            #Generate error stating that bootOrder parameter can only contain a single value when specifying UEFI or UEFIOptimized.
                            if ($bootOrder.length -gt 1) 
							{

                                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidBootOrderParameterValue InvalidArgument  'BootOrder' -Message "The -bootOrder parameter contains more than 1 entry ($($bootOrder -join ",")).  Only a single value is allowed, and must either be 'HardDisk' or 'PXE'." #-verbose
		    		            $pscmdlet.ThrowTerminatingError($errorRecord)

                            }
                            
                            #Error if target server model is a DL Gen9 and trying to configure bootOrder
                            if ($serverHardwareType.model -match "DL" -and $serverHardwareType.model -match "Gen9" -and $bootOrder.length -gt 0) 
							{
                            
                                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException BootOrderNotSupported InvalidArgument  '$bootOrder' -Message "The -bootOrder parameter canont be set when BootMode is set to either UEFI or UEFIOptimized.  Please set the -bootOrder value to '`$Null' and try again." #-verbose
		    		            $pscmdlet.ThrowTerminatingError($errorRecord)                        

                            }

                            #Set the default UEFI/UEFI Optimized BootOrder for Gen9 BL to 'HardDisk'
                            elseif (-not $PSBoundParameters["bootOrder"]) 
							{

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] BootOrder not specified, setting default 'HardDisk'."
                                [void]$serverProfile.boot.order.Add("HardDisk")

                            }

                            #Override for Gen9 UEFI
                            else { $serverProfile.boot.order = $bootorder }
                        
                        }

                    }

                }

                if (-not ($BootMode -eq "BIOS") -and -not ($serverHardwareType.model -match "Gen9" -and $serverHardwareType.model -match "BL")) 
				{

                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException BootModeNotSupported InvalidArgument  'New-HPOVServerProfile' -Message "The -bootMode parameter was provided and the Server Hardware model '$($serverHardwareType.model)' does not support this parameter.  Please verify the Server Hardware Type is at least an HP ProLiant BL Gen9." #-verbose
		    		$pscmdlet.ThrowTerminatingError($errorRecord)    

                }
                
		    	$BootableConnections = New-Object System.Collections.ArrayList

                #Loop through connections to look for bootable settings and if -manageboot is omitted from $PSBoundParameters
                foreach ($connection in $serverProfile.connections) 
				{
		    		
		    		if ($connection.boot.priority -ne "NotBootable") 
					{

		    			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found bootable connection ID '$($connection.id)'"

		    			[void]$BootableConnections.Add($connection.id)

		    		}

		    	}

		    	if ((-not($manageBoot.IsPresent)) -and $BootableConnections.count -gt 0) 
				{

		    		$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException BootableConnectionsFound InvalidArgument 'manageBoot' -Message "Bootable Connections $($BootableConnections -join ",") were found, however the -manageBoot switch parameter was not provided.  Please correct your command syntax and try again." #-verbose
		    		$pscmdlet.ThrowTerminatingError($errorRecord)  

		    	} 

                #Check to make sure Server Hardware Type supports Firmware Management (OneView supported G7 blade would not support this feature)
                if ($firmware) 
				{
                    
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Firmware Baseline $($baseline)"

                    if ($serverHardwareType.capabilities -match "firmwareUpdate" ) 
					{

                        #Validating that the baseline value is a string type and that it is an SPP name.
		                if (($baseline -is [string]) -and (-not ($baseline.StartsWith('/rest'))) -and ($baseline -match ".iso")) 
						{
                            
							try 
							{
		    	                
								$baseline = Get-HPOVBaseline -isoFileName $baseline -appliance $_Connection
		    	                
								$serverProfile.firmware.firmwareBaselineUri = $baseline.uri
                            
							}

                            catch 
							{
                                
								Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Error caught when looking for Firmware Baseline."
                                
								$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidBaselineResourceName ObjectNotFound  'Basline' -Message "The provided SPP Baseline '$($baseline)' was not found or an error occurred during lookup." #-verbose
		    		            
								$pscmdlet.ThrowTerminatingError($errorRecord)
                            
							}
		                
						}

                        #Validating that the baseline value is a string type and that it is an SPP name.
		                elseif (($baseline -is [string]) -and (-not ($baseline.StartsWith('/rest')))) 
						{

                            try 
							{

		    	                $baseline = Get-HPOVBaseline -SppName $baseline -appliance $_Connection
		    	                $serverProfile.firmware.firmwareBaselineUri = $baseline.uri

                            }

                            catch 
							{

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Error caught when looking for Firmware Baseline."

                                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidBaselineResourceUri ObjectNotFound 'Basline' -Message "The provided SPP Baseline '$($baseline)' was not found or an error occurred during lookup." #-verbose
		    		            $pscmdlet.ThrowTerminatingError($errorRecord)

                            }

		                }
                
                        #Validating that the baseline value is a string type and that it is the Basline URI
		                elseif (($baseline -is [string]) -and ($baseline.StartsWith('/rest'))) 
						{
		    	    
		    	            $baselineObj = Send-HPOVRequest $baseline -appliance $_Connection

                            if ($baselineObj.category -eq "firmware-drivers") 
							{
		    	            
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Valid Firmware Baseline provided: $($baselineObj.baselineShortName)"
                                $serverProfile.firmware.firmwareBaselineUri = $baselineObj.uri 
                            
                            }

                            else 
							{

                                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidBaselineResource ObjectNotFound 'Basline' -Message "The provided SPP Baseline URI '$($baseline)' is not valid or the correct resource category (expected 'firmware-drivers', received '$($baselineObj.category)'.  Please check the -baseline parameter value and try again." #-verbose
		    		            $pscmdlet.ThrowTerminatingError($errorRecord)

                            }

		                }

                        #Else we are expecting the SPP object that contains the URI.
                        elseif (($baseline) -and ($baseline -is [object])) 
						{

                            $serverProfile.firmware.firmwareBaselineUri = $baseline.uri
                        
                        }

                        elseif (!$baseline) 
                        {
                            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerHardwareMgmtFeatureNotSupported NotImplemented 'New-HPOVServerProfile' -Message "Baseline is required when manage firmware is set to true." #-verbose
		    		        $pscmdlet.ThrowTerminatingError($errorRecord)
                        }

                    }

                    else 
					{

                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerHardwareMgmtFeatureNotSupported NotImplemented 'New-HPOVServerProfile' -Message "`"$($serverHardwareType.name)`" Server Hardware Type does not support Firmware Management." #-verbose
		    		    $pscmdlet.ThrowTerminatingError($errorRecord)
                        
                    }

                }

                #Check to make sure Server Hardware Type supports Bios Management (OneView supported G7 blade do not support this feature)
                if ($PSBoundParameters['bios']) 
				{

					if ([bool]($bl460bios | Measure-Object).count) 
					{
		    			
						$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException BiosSettingsIsNull InvalidArgument 'biosSettings' -TargetType 'Array' -Message "BIOS parameter was set to TRUE, but no biosSettings were provided.  Either change -bios to `$False or provide valid bioSettings to set within the Server Profile." #-verbose
		    			$pscmdlet.ThrowTerminatingError($errorRecord)
		    		
					}

		    		else 
					{
                    
						if ($serverHardwareType.capabilities -match "ManageBIOS" ) 
						{
							 

							#check for any duplicate keys
						    $biosFlag = $false
						    $hash = @{}
						    $biosSettings.id | % { $hash[$_] = $hash[$_] + 1 }

						    foreach ($biosItem in ($hash.GetEnumerator() | ? {$_.value -gt 1} | % {$_.key} )) 
							{
						         
						        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException BiosSettingsNotUnique InvalidOperation 'BiosSettings' -TargetType 'Array' -Message "'$(($serverHardwareType.biosSettings | where { $_.id -eq $biosItem }).name)' is being set more than once. Please check your BIOS Settings are unique.  This setting might be a dependency of another BIOS setting/option.  Please check your BIOS Settings are unique.  This setting might be a dependency of another BIOS setting/option." #-verbose
		    			        $pscmdlet.ThrowTerminatingError($errorRecord)

						    }

						}

						else 
						{ 

						    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerHardwareMgmtFeatureNotSupported NotImplemented 'New-HPOVServerProfile' -Message "`"$($serverHardwareType.name)`" Server Hardware Type does not support BIOS Management." #-verbose
		    			    $pscmdlet.ThrowTerminatingError($errorRecord)                
		    			
						}
						
					}

				}

                #Set Local Storage Management and Check to make sure Server Hardware Type supports it (OneView supported G7 blade would not support this feature)
                if (($localstorage) -and ($serverHardwareType.capabilities -match "ManageLocalStorage" )) 
				{
                
					$_LocalStorageConfig = NewObject -ServerProfileLocalStorage

					$_LocalStorageConfig.manageLocalStorage = [bool]$localstorage
					$_LocalStorageConfig.initialize         = [bool]$Initialize
					
					$_LogicalDisk = New-Object -ServerProfileLocalStorageLogicalDrives

					$_LogicalDisk.bootable  = [bool]$Bootable
					$_LogicalDisk.raidLevel = $RaidLevel.ToUpper()

					[void]$_LocalStorageConfig.logicalDrives.Add($_LogicalDisk)

					[void]$serverProfile.localStorage.Add($_LocalStorageConfig)
                     
                }
		        
                #StRM Support
                if ([bool]$SANStorage -and $serverHardwareType.model -match "BL") 
				{ 

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SAN Storage being requested"
                
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of available storage systems"

                    #Get list of available storage system targets and the associated Volumes based on the EG and SHT provided
                    
					Try
					{

						$availStorageSystems = (Send-HPOVRequest ($script:profileAvailStorageSystemsUri + "?enclosureGroupUri=$($serverProfile.enclosureGroupUri)&serverHardwareTypeUri=$($serverHardwareType.uri)") -appliance $_Connection).members

					}

					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}
					

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Available Storage Systems: $($availStorageSystems | fl | out-string)"

                    #Error on no available storage systems
                    if (-not ($availStorageSystems)) 
					{

                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException NoAvailableStorageSystems ObjectNotFound 'SANStorage' -Message "No available storage systems found for '$($serverHardwareType.name)' Server Hardware Type and '$((Send-HPOVRequest $serverProfile.enclosureGroupUri).name)' Enclosure Group.  Please verify an available Storage System exists, and has connectivity to the destination server or Enclosure Group." #-verbose
		    		    $pscmdlet.ThrowTerminatingError($errorRecord)  

                    }
                    
                    $serverProfile.sanStorage = [pscustomobject]@{
                        
						hostOSType        = $script:profileSanManageOSType.($HostOsType);
                        manageSanStorage  = [bool]$SANStorage;
                        volumeAttachments = New-Object System.Collections.ArrayList
                    
					}
                    
                    #Copy the parameter array into a new object
                    $volumesToAttach = New-Object System.Collections.ArrayList
					$StorageVolume | % { 
						
						[void]$volumesToAttach.Add($_)
							
					}
                    
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Volumes to process $($volumesToAttach | fl | out-string)"
                    
                    $i = 0
                    
                    #Process volumes being passed
                    foreach ($volume in $volumesToAttach) 
					{  

                        #If the storage paths array is null, process connections to add mapping
                        if (-not ($volume.storagePaths)) 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage Paths value is Null. Building connection mapping." #-Verbose

                            #Static Volume, must have volumeUri attribute present to be valid
                            if ($volume.volumeUri) 
							{

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of attachable volumes"

                                #Get list of attachable Volumes (i.e. they are not assigned private or are shareable volumes)
								Try
								{

									$attachableVolumes = (Send-HPOVRequest $script:attachableVolumesUri -appliance $_Connection).members

								}

								Catch
								{

									$PSCmdlet.ThrowTerminatingError($_)

								}

								#Get storage volume name for reporting purposes
								Try
								{

									$volumeName = (send-hpovrequest $volume.volumeUri -appliance $_Connection).name

								}
                                
                                Catch
								{

									$PSCmdlet.ThrowTerminatingError($_)

								}

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Volume ID: $($volume.id)"
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking to see if volume '$($volume.volumeUri) ($($volumeName))' is attachable"
                    
                                #validate volume is attachable
                                $attachableVolFound = $attachableVolumes | ? { $_.uri -eq $volume.volumeUri }

                                #If it is available, continue processing
                                if ($attachableVolFound) 
								{
                    
                                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($attachableVolFound.uri) ($($attachableVolFound.name))' volume is attachable"
                    
                                    #validate the volume that is available, is also avialable to the server hardware type and enclosure group
                                    $volumeToStorageSystem = $availStorageSystems | ? { $_.storageSystemUri -eq $attachableVolFound.storageSystemUri }
                    
                                    #If available, process the volume networks
                                    if ($volumeToStorageSystem) 
									{ 
                                    
                                        #Check to make sure profile connections exist.
                                        if ($serverProfile.connections -and $serverProfile.connections.functionType -contains "FibreChannel") 
										{

                                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile has connections"
                                        
                                            #loop through profile connections
                                            $found = 0

                                            foreach ($volConnection in $attachableVolFound.availableNetworks) 
											{

                                                #write-verbose "Looking for $volConnection"
                                                $profileConnection = $serverProfile.connections | ? { $_.networkUri -eq $volConnection }

                                                if ($profileConnection) 
												{

                                                    #Keep track of the connections found for error reporting later
                                                    $found++

                                                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Mapping connection ID '$($profileConnection.id)' -> volume ID '$($volumesToAttach[$i].id)'"
                                                
                                                    [void]$volumesToAttach[$i].storagePaths.Add(

                                                        [pscustomobject]@{
                                                            connectionId = $profileConnection.id;
                                                            isEnabled    = $True
                                                        }

                                                    )

                                                }

                                            }

                                            if (-not ($found)) 
											{

												# // What is this doing here
                                                #$uri += "?force=true"

                                                #Generate non-terminating error and continue
                                                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException NoProfileConnectionsMapToVolume ObjectNotFound 'New-HPOVServerProfile' -Message "Unable to find a Profile Connection that will map to '$($volumeName)'. Creating server profile resource without Volume Connection Mapping."  #-verbose
                                                #$PSCmdlet.ThrowTerminatingError($errorRecord)
                                                $PSCmdlet.WriteError($errorRecord)

                                            }
                                        
                                        }

                                        #Else, generate an error that at least one FC connection must exist in the profile in order to attach volumes.
                                        else 
										{

                                            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException NoProfileConnections ObjectNotFound 'New-HPOVServerProfile' -Message "The profile does not contain any Network Connections.  The Profile must contain at least 1 FC Connection to attach Storage Volumes.  Use the New-HPOVServerProfileConnection helper cmdlet to create 1 or more connections and try again."  #-verbose
                                            $PSCmdlet.ThrowTerminatingError($errorRecord)

                                        }
                    
                                    }
                    
                                    #If not, then error
                                    elseif (-not($volumeToStorageSystem)) 
									{ 
                                
                                        $errorRecord = New-ErrorRecord InvalidOperationException StorageVolumeDoesNotExistOnStorageArray ObjectNotFound 'New-HPOVServerProfile' -Message "'$($volumeName)' Volume is not available on the '$($volumeToStorageSystem.storageSystemName)' storage system" #-verbose
                                        $PSCmdlet.ThrowTerminatingError($errorRecord)                      
                                
                                    }
                    
                                }
                    
                                elseif (-not ($attachableVolFound)) 
								{ 
                            
                                    $errorRecord = New-ErrorRecord InvalidOperationException StorageVolumeUnavailableForAttach ResourceUnavailable 'New-HPOVServerProfile' -Message "'$($volumeName)' Volume is not available to be attached to the profile. Please check the volume and try again."  #-verbose
                                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                                }

                            }

                            #Ephemeral volume support
                            elseif (-not ($volume.volumeUri) -and $volume.volumeStoragePoolUri -and $volume.volumeStorageSystemUri) 
							{

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No volumeUri, ephemeral volume request."

                                #Check to make sure profile connections exist.
                                if ($serverProfile.connections -and $serverProfile.connections.functionType -contains "FibreChannel") 
								{

                                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile has connections"

                                    #Process available storage system and available FC networks
                                    $storageSystemVolCreate = $availStorageSystems | where { $_.storageSystemUri -eq $volume.volumeStorageSystemUri }

                                    if ($storageSystemVolCreate) 
									{
                                        
                                        #loop through profile connections
                                        $found = 0

                                        foreach ($storageSystemConnection in $storageSystemVolCreate.connections) 
										{

                                            $profileConnection = $serverProfile.connections | ? { $_.networkUri -eq $storageSystemConnection }

                                            if ($profileConnection) 
											{

                                                #Keep track of the connections found for error reporting later
                                                $found++
                                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Mapping connection ID '$($profileConnection.id)' -> volume ID '$($volumesToAttach[$i].id)'"
                                                
                                                [void]$volumesToAttach[$i].storagePaths.Add(
                                                    
                                                    [pscustomobject]@{
                                                    
                                                        connectionId      = $profileConnection.id;
                                                        isEnabled         = $True;
                                                        storageTargetType =  "Auto"

                                                    }
                                                
                                                )

                                            }

                                        }

                                        if (-not($found))
										{
                                        
                                            #$uri += "?force=true"

                                            #Generate non-terminating error and continue
                                            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException NoProfileConnectionsMapToVolume ObjectNotFound 'New-HPOVServerProfile' -Message "Unable to find a Profile Connection that will map to '$($volumeName)'. Creating server profile resource without Volume Connection Mapping."  #-verbose
                                            #$PSCmdlet.ThrowTerminatingError($errorRecord)
                                            $PSCmdlet.WriteError($errorRecord)

                                    
                                        }

                                    }

                                    else 
									{

                                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException StorageSystemNotFound ObjectNotFound 'New-HPOVServerProfile' -Message "The provided Storage System URI '$($volume.volumeStorageSystemUri)' for the ephemeral volume '$($volume.name)' was not found as an available storage system."  #-verbose
                                        $PSCmdlet.ThrowTerminatingError($errorRecord)

                                    }
                                        
                                }

                                #Else, generate an error that at least one FC connection must exist in the profile in order to attach volumes.
                                else 
								{

                                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException NoProfileConnections ObjectNotFound 'New-HPOVServerProfile' -Message "The profile does not contain any Network Connections.  The Profile must contain at least 1 FC Connection to attach Storage Volumes.  Use the New-HPOVServerProfileConnection helper cmdlet to create 1 or more connections and try again."  #-verbose
                                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                                }

                            }
 
                        }
                        
                        $i++
                    }

                    $serverProfile.sanStorage.volumeAttachments = $volumesToAttach
                    
                    #Check to see if user passed -EvenPathDisable and/or -OddPathDisable parameter switches
                    if ($EvenPathDisabled.IsPresent -or $OddPathDisabled.IsPresent) 
					{
                        
                        if ($EvenPathDisabledd.IsPresent) { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Disable Even Path: $([bool]$EvenPathDisable)" }
                        if ($OddPathDisable.IsPresent) { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Disable Odd Path: $([bool]$OddPathDisable)" }

                        #Keep track of Volume Array index
                        $v = 0

                        foreach ($vol in $serverProfile.sanStorage.volumeAttachments) 
						{
                            
                            #Keep track of Volume Path Array index
                            $p = 0

                            foreach ($path in $vol.storagePaths) 
							{

                                if ([bool]$OddPathDisabled -and [bool]($path.connectionID % 2)) { $isEnabled = $false }
                                elseif ([bool]$EvenPathDisabled -and [bool]!($path.connectionID % 2)) { $isEnabled = $false }
                                else { $isEnabled = $true }

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting Connection ID '$($path.connectionID)' path enabled:  $($isEnabled)"

                                $serverProfile.sanStorage.volumeAttachments[$v].storagePaths[$p].isEnabled = $isEnabled
                                $p++
                            }

                            $v++

                        }
                        
                    }

                }

		        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile: $($serverProfile | out-string)"
				Try
				{

					$resp = Send-HPOVRequest $uri POST $serverProfile -appliance $_Connection

				}
	            
				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

	        }
            
            [void]$colStatus.Add($resp)

        }

    }

    End 
	{

        return $colStatus
    
	}    
    
}

function Get-HPOVServerProfileTemplate 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdLetBinding(DefaultParameterSetName = "Default")]
    Param 
    (

        [parameter(ValueFromPipeline = $false, ParameterSetName = "Default", Mandatory = $false, Position = 0)]
        [parameter(ValueFromPipeline = $false, ParameterSetName = "Detailed", Mandatory = $false, Position = 0)]
        [parameter(ValueFromPipeline = $false, ParameterSetName = "Export", Mandatory = $false, Position = 0)]
        [Alias('profile')]
        [string]$name = $null,

        [parameter(ValueFromPipeline = $false, ParameterSetName = "Detailed", Mandatory = $true)]
        [switch]$detailed,

		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},
        
        [parameter(ValueFromPipeline = $false, ParameterSetName = "Export", Mandatory = $true)]
        [alias("x")]
        [switch]$export,

        [parameter(ValueFromPipeline = $false, ParameterSetName = "Export", Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [alias("save")]
        [string]$location

    )

    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        #Validate the path exists.  If not, create it.
		if (($Export) -and (-not(Test-Path $Location)))
		{ 
        
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Directory does not exist.  Creating directory..."
            
			New-Item -path $Location -ItemType Directory
        
		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}
        

        $uri = $script:profileTemplatesUri

        if ($name) 
        { 
               
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Received name: $($name)"
            $name = $name -replace ("[*]","%25") -replace ("[&]","%26")
            
            $uri += "?filter=name matches '$name'&sort=name:asc"
            
        }

        $TemplateCollection = New-Object System.Collections.ArrayList

	}

	Process 
    {
        
        ForEach ($_connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_connection.Name)' Appliance (of $($ApplianceConnection.Count))"

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"

	        $templates = Send-HPOVRequest $uri -Hostname $_connection

        
            foreach ($_template in $templates.members)
            {
            
                $_template.PSObject.TypeNames.Insert(0,'HPOneView.ServerProfile')
                    
                [void]$TemplateCollection.Add($_template)
                
            }

        }

	}

    End 
    {

        "Done. {0} server profile resource(s) found." -f $TemplateCollection.count | write-verbose 

        #If a search for specific profile returns 0 results, throw a terminating error
        if(-not($TemplateCollection) -and $name)
        {

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile Template Resource Name was provided, yet no results were found.  Generate Error."

            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerProfileResourceNotFound ObjectNotFound "Name" -Message "The specified Server Profile Template '$name' not found. Please check the name again, and try again." #-verbose
            $pscmdlet.ThrowTerminatingError($errorRecord)
            
        }

        <#
        elseif ($PSBoundParameters['Detailed']) 
        {

            #Display Pertinant Server Profile data in Table format
            $a1 = @{Expression={$_.name};Label="Name"},
                  @{Expression={$profileCache[$serverHardwareTypeUri].name};Label="Server Hardware Type"},
                  @{Expression={ if ($profileCache[$enclosureGroupUri]) {$profileCache[$enclosureGroupUri]}
								 else { 'N/A' }
								};Label="Enclosure Group"},
                  @{Expression={	if ($_.serverHardwareUri){ (Send-HPOVRequest $_.serverHardwareUri).name }
				 		        else { "Unassigned" }
				                 };Label="Assigned"},
                  @{Expression={
                  
                         switch ($_.affinity) {
                  
                             "Bay" { "Device bay" }
                             "BayAndServer" { "Device bay + Server Hardware" }
                  
                  
                         }
                  
                  };Label="Server Affinity"},
                  @{Expression={$_.state};Label="State"},
                  @{Expression={$_.status};Label="Status"}

            $a2 = @{Expression={$_.bios.manageBios};Label="Manage BIOS";align="Left"},
                  @{Expression={$_.boot.manageBoot};Label="Manage Boot Order";align="Left"},
                  @{Expression={$_.firmware.manageFirmware};Label="Manage Firmware";align="Left"},
                  @{Expression={if ($_.serialNumberType -eq "Virtual") { $_.serialNumber + " (v)" } else { $_.serialNumber + " (p)" }};Label="Serial Number"},
                  @{Expression={if ($_.serialNumberType -eq "Virtual") { $_.uuid + " (v)" } else { $_.uuid + " (p)" }};Label="UUID"}


            #Firmware Details
            $f = @{Expression={
                if ($_.firmware.manageFirmware) {

                    $baseline = Send-HPOVRequest $_.firmware.firmwareBaselineUri
                    "$($baseline.name) version $($baseline.version)"

                }
                else { "none" }
            
            };Label="Firmware Baseline"}

            $c = @{Expression={$_.id};Label="ID";width=2},
                 @{Expression={$_.functionType};Label="Type";width=12},
                 @{Expression={
                   
                   $address = @()
                 
                   #Mac Address
                   if ($_.macType -eq "Virtual" -and $_.mac) { $address += "MAC $($_.mac) (V)" }
                   elseif ($_.macType -eq "Physical" -and $_.mac) { $address += "MAC $($_.mac) (p)" }
                   
                   #WWNN
                   if ($_.wwpnType -eq "Virtual" -and $_.wwnn) { $address += "WWNN $($_.wwnn) (v)"} 
                   elseif ($_.wwpnType -eq "Physical" -and $_.wwnn) { $address += "WWNN $($_.wwnn) (p)" }
                   
                   #WWPN
                   if ($_.wwpnType -eq "Virtual" -and $_.wwpn) { $address += "WWPN $($_.wwpn) (v)"} 
                   elseif ($_.wwpnType -eq "Physical" -and $_.wwpn) { $address += "WWPN $($_.wwpn) (p)" }

                   $addressCol = $address | Out-String | % { $_ -replace '^\s+|\s+$' }
                   $addressCol
                   
                 };Label="Address";width=32},
                 @{Expression={$profileCache[$_.networkUri]};Label="Network"},
                 @{Expression={$_.portId};Label="Port Id";width=10},
                 @{Expression={[string]$_.requestedMbps};Label="Requested BW";width=12},
                 @{Expression={[string]$_.maximumMbps};Label="Maximum BW";width=10},
                 @{Expression={
                 
                      $bootSetting = @()
                      $bootSetting += $_.boot.priority
                      if ($_.boot.targets) {
                 
                           for ($i=0; $i -eq $boot.targets.count; $i++) { $bootSetting += "WWN $($_.boot.targets[$i].arrayWwpn)`nLUN $($_.boot.targets[$i].lun)" }
                 
                      }
                      $bootSettingString = $bootSetting | Out-String | % { $_ -replace '^\s+|\s+$' }
                      $bootSettingString
                 
                   
                  };Label="Boot";width=20},
                 @{Expression={
                 
                    if ($_.functionType -eq "FibreChannel" -and -not ($_.boot.targets)) { "Yes" } 
                    elseif ($_.functionType -eq "FibreChannel" -and $_.boot.targets) { "No" }
                    else { $Null }
                 
                  };Label="Use Boot BIOS";width=13}
                               
            #Display extended BIOS settings
            $b = @{Expression={$_.category};Label="BIOS Category"},
                 @{Expression={$_.settingName};Label="Setting Name"},
                 @{Expression={$_.valueName};Label="Configured Value"}

            $ls = @{Expression={$_.localStorage.manageLocalStorage};Label="Manage Local Storage";align="Left"},
                  @{Expression={$_.localStorage.initialize};Label="Initialize Disk";align="Left"},
                  @{Expression={
                  
                        $logicalDriveCol = @()
                        $d=0

                        while ($d -lt $sp.localStorage.logicalDrives.count) {

                            if ($_.localStorage.logicalDrives[$d].bootable) { $logicalDriveCol += "Drive {$d} $($sp.localStorage.logicalDrives[$d].raidLevel) (Bootable)" }
                            else { $logicalDriveCol += "Drive {$d} $($sp.localStorage.logicalDrives[$d].raidLevel)" }
                            $d++
                        }

                        $logicalDriveString = $logicalDriveCol | Out-String | % { $_ -replace '^\s+|\s+$' }
                        $logicalDriveString
                    
                   };Label="Logical Disk"}

            $ss = @{Expression={$_.manageSanStorage};Label="Manage SAN Storage";align="Left"},
                  @{Expression={$_.hostOSType};Label="Host OS Type";align="Left"}

            $p = @{Expression={[int]$_.connectionId};Label="Connection ID";align="Left"},
                 @{Expression={[string]$_.network};Label="Fabric";align="Left"},
                 @{Expression={[string]$_.initiator};Label="Initiator";align="Left"},
                 @{Expression={[string]$_.target};Label="Target";align="Left"},
                 @{Expression={[bool]$_.isEnabled};Label="Enabled";align="Left"}

            #Server Profile cache
            $profileCache = @{}
            
            #loop through all Server Profile objects and display details
            ForEach ($profile in ($ProfileCollection | sort-object -property name)) {

                $serverHardwareTypeUri = $profile.serverHardwareTypeUri
                $enclosureGroupUri = $profile.enclosureGroupUri

                #Cache resources during runtime to reduce API calls to appliance.
                if (-not ($profileCache[$serverHardwareTypeUri])) { $profileCache.Add($serverHardwareTypeUri,(Send-HPOVRequest $serverHardwareTypeUri -appliance $_.ApplianceConnection.name)) }
                if (-not ($profileCache[$enclosureGroupUri]) -and $profile.enclosureGroupUri) { $profileCache.Add($enclosureGroupUri,(Send-HPOVRequest $enclosureGroupUri -appliance $_.ApplianceConnection.name).name) }
                foreach ($connection in $profile.connections) {
                
                    $connection | % { $_.psobject.typenames.Insert(0,”HPOneView.Profile.Connection”) }

                    if (-not ($profileCache[$connection.networkUri])) { $profileCache.Add($connection.networkUri,(Send-HPOVRequest $connection.networkUri -appliance $_.ApplianceConnection.name ).name) } 
                
                }

                foreach ($volume in $profile.sanStorage.volumeAttachments) {

                    #insert HPOneView.Profile.SanVolume TypeName
                    $volume | % { $_.psobject.typenames.Insert(0,”HPOneView.Profile.SanVolume") }
	
                    #Cache Storage System, Storage Pool and Storage Volume Resources
                    if (-not ($profileCache[$volume.volumeStorageSystemUri])) { $profileCache.Add($volume.volumeStorageSystemUri,(Send-HPOVRequest $volume.volumeStorageSystemUri $_.ApplianceConnection.name)) }
                    if (-not ($profileCache[$volume.volumeStoragePoolUri])) { $profileCache.Add($volume.volumeStoragePoolUri,(Send-HPOVRequest $volume.volumeStoragePoolUri $_.ApplianceConnection.name)) }
                    if (-not ($profileCache[$volume.volumeUri])) { $profileCache.Add($volume.volumeUri,(Send-HPOVRequest $volume.volumeUri $_.ApplianceConnection.name)) }

                }

                #$profileCache

                #Initial Server Profile information
                $profile | format-table $a1 -AutoSize -wrap
                $profile | format-table $a2 -AutoSize -wrap

                #Firmware Baseline
                $profile | format-table $f

                #Server Profile Connection details
                $profile.connections | format-table -wrap
                
                #Local Storage
                $profile | format-table $ls -wrap -auto

                #SAN Storage
                $profile.sanStorage | Format-Table $ss -auto
                #$profile.sanStorage.volumeAttachments | format-table -auto

                $profile.sanStorage.volumeAttachments | % {

                    $_ | format-table -auto

                    $pathConnectionCol = @()

                    foreach ($path in $_.storagePaths) {

                        $pathObject = [PSCustomObject]@{
							connectionId = $Null; 
							network      = $Null; 
							initiator    = $Null; 
							target       = $Null; 
							isEnabled    = $Null
						}

                        $pathConnection = $profile.connections | where { $path.connectionId -eq $_.id }

                        $pathObject.connectionId = $pathConnection.id
                        $pathObject.network      = $profileCache[$pathConnection.networkUri]
                        $pathObject.initiator    = $pathConnection.wwpn
                        $pathObject.target       = if ($path.storageTargets) { $path.storageTargets }
												   else { "Pending" }
                        $pathObject.isEnabled    = [bool]$path.isEnabled
                        $pathConnectionCol += $pathObject

                    }

                    #
                    #Display path details with a left padded view. Format-Table doesn't have the ability to pad the display
                    $capture = ($pathConnectionCol | sort connectionId | format-table $p -AutoSize -wrap | out-string) -split "`n"
                    $capture | % { ($_).PadLeft($_.length + 5) }

                }

                #Boot Order
                $bootOrder = @()
                if ($profile.boot.manageBoot) {

                    $i = 0
                    while ($i -lt $profile.boot.order.count) {
                        $bootOrder += "$($i+1) $($profile.boot.order[$i])"
                        $i++
                    }
                    write-host "Boot Order"
                    write-host "----------"
                    $bootOrder

                }
                else { "No Boot Management" }

                #Display configured BIOS Settings from profile
                $configedBiosSettings = @()

                foreach ($setting in $profile.bios.overriddenSettings) {

                    $shtBiosSettingDetails = $profileCache[$serverHardwareTypeUri].biosSettings | ? { $setting.id -eq $_.id }

                    $biosSetting = [PSCustomObject]@{

                        Category = $shtBiosSettingDetails.category;
                        settingName = $shtBiosSettingDetails.name;
                        valueName = ($shtBiosSettingDetails.options | ? { $_.id -eq $setting.value } ).name;

                    }

                    $configedBiosSettings += $biosSetting
                
                }            
            
                $configedBiosSettings | sort category,settingName | format-list $b

                "----------------------------------------------------------------------"
            
            }

        }
        #>

        #If user wants to export the profile configuration
        elseif ($export) 
        {

            #Get the unique applianceConnection.name properties from the profile collection for grouping the output files
            $ProfileGroupings = $ProfileCollection.ApplianceConnection.name | Select -Unique

            ForEach ($pg in $ProfileGroupings)
            {
                
                $outputProfiles = New-Object System.Collections.ArrayList

                $templates = $ProfileCollection | ? {$_.ApplianceConnection.Name -eq $pg}

                #Loop through all profiles
                foreach ($profile in $templates) 
                {

                    #trim out appliance unique properties

                    $_profile = $profile | select-object -Property * -excludeproperty uri,etag,created,modified,status,state,inprogress,enclosureUri,enclosureBay,serverHardwareUri,taskUri,ApplianceConnection
                    $_profile.serialNumberType = "UserDefined"

                    #Loop through the connections to save the assigned address
                    $i = 0
                    foreach ($connection in $profile.connections) 
                    {

                        if ($profile.connections[$i].mac) { $_profile.connections[$i].macType = "UserDefined" }
                        if ($profile.connections[$i].wwpn) { $_profile.connections[$i].wwpnType = "UserDefined" }
                        $i++

                    }

                    [void]$outputProfiles.Add($_profile)
                    
                }

                #save profile to JSON file
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Saving $($_profile.name) to $($location)\$($_profile.name).json"

                convertto-json -InputObject $outputProfiles -depth 99 | new-item "$location\$pg`_$($_profile.name).json" -itemtype file

            }

        }

        else 
        {

            Return $TemplateCollection

        }

    }

 }

function New-HPOVServerProfileTemplate 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml


	[CmdLetBinding(DefaultParameterSetName = "Default")]
    Param 
    (

        [parameter(Mandatory = $true,ParameterSetName = "Default", Position = 0)]
        [parameter(Mandatory = $true,ParameterSetName = "SANStorageAttach", Position = 0)]
		[ValidateNotNullOrEmpty()]
        [string]$name,

        [parameter(Mandatory = $false,ParameterSetName = "Default", position = 2)] 
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach", position = 2)]
		[string]$description = $null,

        [parameter(Mandatory = $false,ParameterSetName = "Default", position = 3)]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach", position = 3)]
		[ValidateNotNullOrEmpty()]
        [array]$connections = @(),

        [parameter(Mandatory = $false,ParameterSetName = "Default",position = 4)]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach", position = 4)]
		[ValidateNotNullOrEmpty()]
		[Alias('eg')]
        [object]$enclosureGroup = $Null,

        [parameter(Mandatory = $false,ParameterSetName = "Default", position = 5)]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach", position = 5)]
        [ValidateNotNullOrEmpty()]
		[Alias('sht')]
        [array]$serverHardwareType = $null,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
        [switch]$firmware,
	
        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
        [object]$baseline = $null,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [switch]$forceInstallFirmware,
	
        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
        [switch]$bios = $false,

	    [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateNotNullOrEmpty()]
        [array]$biosSettings=@(),
        
        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]        
        [ValidateSet("UEFI","UEFIOptimized","BIOS", IgnoreCase = $False)]
        [string]$BootMode = "BIOS",

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]        
        [ValidateSet("Auto","IPv4","IPv6","IPv4ThenIPv6","IPv6ThenIPv4", IgnoreCase = $False)]
        [string]$pxeBootPolicy = "Auto",

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [Alias('boot')]
        [switch]$manageBoot,

	    [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [array]$bootOrder = @(),

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [switch]$localstorage,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [switch]$Initialize,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]        
        [switch]$Bootable,

        [parameter(Mandatory = $false, ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateSet("RAID1","RAID0","NONE", IgnoreCase=$true)]
        [string]$RaidLevel = $Null,

        [parameter(Mandatory = $True,ParameterSetName = "SANStorageAttach")]
        [switch]$SANStorage,

        [parameter(Mandatory = $true, ParameterSetName = "SANStorageAttach")]
        [ValidateSet('CitrixXen','AIX','IBMVIO','RHEL4','RHEL3','RHEL','RHEV','VMware','Win2k3','Win2k8','Win2k12','OpenVMS','Egenera','Exanet','Solaris9','Solaris10','Solaris11','ONTAP','OEL','HPUX11iv1','HPUX11iv2','HPUX11iv3','SUSE','SUSE9','Inform', IgnoreCase=$true)]
        [Alias('OS')]
        [string]$HostOStype = $Null,

        [parameter(Mandatory = $true, ParameterSetName = "SANStorageAttach")]
        [object]$StorageVolume = $Null,

        [parameter(Mandatory = $false, ParameterSetName = "SANStorageAttach")]
        [Alias('Even')]
        [switch]$EvenPathDisabled,

        [parameter(Mandatory = $false, ParameterSetName = "SANStorageAttach")]
        [Alias('Odd')]
        [switch]$OddPathDisabled,

        [parameter(Mandatory = $false, ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateSet("Bay","BayAndServer", IgnoreCase=$false)]
        [string]$Affinity = "Bay",
	
        [parameter(Mandatory = $false, ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateSet("Virtual", "Physical", "UserDefined", IgnoreCase=$true)]
        [string]$macAssignment = "Virtual",

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateSet("Virtual", "Physical", "'UserDefined", IgnoreCase=$true)]
        [string]$wwnAssignment = "Virtual",

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [ValidateSet("Virtual", "Physical", "UserDefined", IgnoreCase=$true)]
        [string]$snAssignment = "Virtual",

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "SANStorageAttach")]
        [bool]$hideUnusedFlexNics = $True,

        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}


    )
	
    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}



        #Check for URI values in parameters and validate that only one appliance connection is provided in the call
        if($ApplianceConnection.Count -gt 1)
		{
            
            #SHT
            if($serverHardwareType -is [string] -and $serverHardwareType.StartsWith($script:serverHardwareTypesUri))
			{
                
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVPropfile' -Message "Server Hardware Type as URI is not supported for multiple appliance connections" #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)
            
			}
            
			if($serverHardwareType -is [string] -and $serverHardwareType.StartsWith("/rest"))
			{
            
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVPropfile' -Message "Server Hardware Type as URI is not supported for multiple appliance connections." #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)
            
			}

            #EG
            if(($enclosureGroup -is [string] -and $enclosureGroup.StartsWith("/rest")))
			{
            
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVPropfile' -Message "Enclosure Group as URI is not supported for multiple appliance connections." #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)
            
			}

            #Baseline
            if (($baseline -is [string]) -and ($baseline.StartsWith('/rest'))) 
			{
                
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'New-HPOVPropfile' -Message "Baseline as URI is not supported for multiple appliance connections." #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)
            
			}


        }

        $uri = $script:profileTemplatesUri

        $colStatus = New-Object System.Collections.ArrayList

    }
	
	Process 
	{
        
        ForEach($_Connection in $ApplianceConnection)
		{

			#New Server Resource Object
			$serverProfile = NewObject -ServerProfileTemplate
			    
			$serverProfile.name                          = $name
			$serverProfile.description                   = $description
			$serverProfile.affinity                      = $Affinity
			$serverProfile.hideUnusedFlexNics            = [bool]$hideUnusedFlexNics
			$serverProfile.bios.manageBios               = [bool]$bios
			$serverProfile.bios.overriddenSettings       = $biosSettings
			$serverProfile.firmware.manageFirmware       = [bool]$firmware
			$serverProfile.firmware.firmwareBaselineUri  = [String]$baseline
			$serverProfile.firmware.forceInstallFirmware = [bool]$forceInstallFirmware
			$serverProfile.boot.manageBoot               = $manageBoot.IsPresent
			$serverProfile.boot.order                    = $bootOrder
			$serverProfile.bootMode                      = $null
			$serverProfile.localStorage                  = $null
			$serverProfile.serialNumberType              = $snAssignment 
			$serverProfile.macType                       = $macAssignment
			$serverProfile.wwnType                       = $wwnAssignment


			#Exmamine the profile connections parameter and pull only those connections for this appliance connection
			If ($connections)
			{
							    
				ForEach($c in $connections)
				{
			        if($c -is [array]){
                        [void]$serverProfile.connections.Add(($c | ?{$_.applianceConnection.name -eq $_Connection.name}  | Select-Object -property * -ExcludeProperty macType, mac, wwpnTYpe, wwnn, wwpn, applianceConnection))
                    }

					elseif ($c.ApplianceConnection.name -match $_Connection.name)
					{
			            #Remove connection parameters no permitted in Template
                        $c = $c | Select-Object -property * -ExcludeProperty macType, mac, wwpnTYpe, wwnn, wwpn, applianceConnection
						[void]$serverProfile.connections.Add($c)
			        
					}
			    
				}
			
			}
		    
		    
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($serverProfile)"
		    
		    #Check to see if the serverHardwareType or enclosureGroup is null, and generate error(s) then break.
		    if (-not($serverHardwareType))
			{

                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeObject InvalidArgument 'ServerHardwareType' -Message "Server Hardware Type is missing.  Please provide a Server Hardware Type using the -sht parameter and try again." #-verbose
		        $PSCmdlet.ThrowTerminatingError($errorRecord)

		    }
		    
		    #If the URI is passed as the Server Hardware Type, then set the serverHardwareTypeUri variable
		    If ($serverHardwareType -is [string])
			{

		    		    if ($serverHardwareType.StartsWith($script:serverHardwareTypesUri))
						{ 
                            
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SHT URI Provided: $serverHardwareType" 

                            $serverProfile.serverHardwareTypeUri = $serverHardwareType

							Try
							{
							
								$serverHardwareType = Send-HPOVRequest $serverHardwareType -appliance $_Connection
							
							}
                            
                            Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

                        }
		    		
		    		    #Otherwise, perform a lookup ofthe SHT based on the name
		    		    else 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SHT Name Provided: $serverHardwareType"

		    			    $serverHardwareType = Get-HPOVServerHardwareType -name $serverHardwareType -appliance $_Connection

                            if ($serverHardwareType) 
							{

								Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SHT URI: $serverHardwareTypeUri"

		    			        $serverProfile.serverHardwareTypeUri = $serverHardwareType.uri

                            }

                            else 
							{

                                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerHardwareTypeParameter InvalidArgument 'ServerHardwareType' -Message "The -ServerHardwareType parameter value is invalid.  Please make sure it is a Name, URI or resource Object." #-verbose
                                $PSCmdlet.ThrowTerminatingError($errorRecord)

                            }

		    		    }

		    	    }
		    
		    #Else the SHT object is passed
		    else 
			{ 

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ServerHardwareType object provided"
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ServerHardwareType Name: $($serverHardwareType.name)"
                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ServerHardwareType Uri: $($serverHardwareType.uri)"

                        $serverProfile.serverHardwareTypeUri = ($serverHardwareType | ?{$_.ApplianceConnection.name -eq $_Connection.name}).uri
                        
                    }
		    
		    
            if (-not($enclosureGroup) -and (-not($serverHardwareType.model -match "DL")))
			{
		    	    
                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidEnclosureGroupObject InvalidArgument 'EnclosureGroup' -Message "Enclosure Group is missing.  Please provide an Enclosure Group using the -eg parameter and try again." #-verbose
		        $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

            elseif ($enclosureGroup -is [string])
			{

		        #If the URI is passed as the Enclosure Group, then set the enclosureGroupUri variable
		        if ($enclosureGroup.StartsWith('/rest'))
				{ 
					
					$serverProfile.enclosureGroupUri = $enclosureGroup
				
				}

		        #Otherwise, perform a lookup ofthe Enclosure Group
		        else
				{

					Try
					{

						$enclosureGroup = Get-HPOVEnclosureGroup -name $enclosureGroup -appliance $_Connection

					}
		    	    
					Catch
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] EG URI: $enclosureGroupUri"					    
                    
					$serverProfile.enclosureGroupUri = $enclosureGroup.uri
		    	    
		        }

		    }
		    		
		    #Else the EG object is passed
		    elseif (($enclosureGroup -is [Object]) -and ($enclosureGroup.category -eq "enclosure-groups")) 
			{ 
                #Retrieve only EG from this appliance connection
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group object provided"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Name: $($enclosureGroup.name)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Uri: $($enclosureGroup.uri)"
                #Retrieve only EG from this appliance connection
                $serverProfile.enclosureGroupUri = ($enclosureGroup | ? {$_Connection.name -eq $_.applianceConnection.name}).uri 

            }

            elseif (-not $enclosureGroup -and ($serverHardwareType.model -match "DL")) 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server is a ProLiant DL model. Enclosure Group not required."

            }
                            
            else 
			{ 
            
                #write-error "The Enclosure Group object was invalid." -Category SyntaxError -RecommendedAction "Specify a correct Enclosure Group name, URI or object." -CategorytargetName "New-HPOVServerProfile" 
                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidEnclosureGroupObject InvalidArgument 'EnclsoureGroup' -TargetType $EnclosureGroup.GetType().Name -Message "Enclosure Group is invalid.  Please specify a correct Enclosure Group name, URI or object and try again." #-verbose

                #Generate Terminating Error
		        $PSCmdlet.ThrowTerminatingError($errorRecord)
                
            }

	        
	
            #Handle DL Server Profiles by setting BL-specific properties to NULL
            if ($serverHardwareType.model -match "DL") 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Hardware Type is a DL, setting 'macType', 'wwnType', 'serialNumberType', 'affinity' and 'hideUnusedFlexNics' to Null."

                $serverProfile.macType            = $Null
                $serverProfile.wwnType            = $Null
                $serverProfile.serialNumberType   = $Null
                $serverProfile.hideUnusedFlexNics = $Null
                $serverProfile.affinity           = $Null

            }

            #Handle Boot Order
            if ((-not($PSBoundParameters["bootorder"])) -and (-not($PSBoundParameters["BootMode"])) -and $ManageBoot -and $serverHardwareType.model -match "Gen8") 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No boot order provided.  Defaulting to ‘CD’,’Floppy’,’USB’,’HardDisk’,’PXE’"
                $serverProfile.boot.order = @(‘CD’,’Floppy’,’USB’,’HardDisk’,’PXE’)

            }

            elseif ((-not ($PSBoundParameters["bootorder"])) -and -not ($PSBoundParameters["BootMode"]) -and $ManageBoot -and $serverHardwareType.model -match "Gen9") 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No boot order provided.  Defaulting to ‘CD’,’USB’,’HardDisk’,’PXE’"
                $serverProfile.boot.order = @(‘CD’,’USB’,’HardDisk’,’PXE’)
            
			}

		    elseif ($ManageBoot -and $serverHardwareType.model -match "Gen9" -and $bootOrder -contains "Floppy" -and $BootMode -match "EUFI") 
			{
		    	
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidBootOrderParameterValue InvalidArgument  'BootOrder' -Message "The -bootOrder parameter contains 'Floppy' which is an invalid boot option for a UEFI-based system." #-verbose
		    	$pscmdlet.ThrowTerminatingError($errorRecord)

            }

            #Check to make sure Server Hardware Type supports Firmware Management (OneView supported G7 blade would not support this feature)
            if ($serverHardwareType.model -match "Gen9") 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Gen 9 Server, setting BooMode to: $($BootMode)"

                switch ($BootMode) 
				{

                    "BIOS" 
					{
                    
                        $serverProfile.bootMode = [PSCustomObject]@{
                            manageMode = $true;
                            mode       = $BootMode;
                        }
                    
                    }

                    { "UEFI","UEFIOptimized" -match $_ } {
                    
                        $serverProfile.bootMode = [PSCustomObject]@{
                            manageMode    = $true;
                            mode          = $BootMode;
                            pxeBootPolicy = $pxeBootPolicy
                        }

                        #Generate error stating that bootOrder parameter can only contain a single value when specifying UEFI or UEFIOptimized.
                        if ($bootOrder.length -gt 1) 
						{

                            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidBootOrderParameterValue InvalidArgument  'BootOrder' -Message "The -bootOrder parameter contains more than 1 entry ($($bootOrder -join ",")).  Only a single value is allowed, and must either be 'HardDisk' or 'PXE'." #-verbose
		    	            $pscmdlet.ThrowTerminatingError($errorRecord)

                        }
                        
                        #Error if target server model is a DL Gen9 and trying to configure bootOrder
                        if ($serverHardwareType.model -match "DL" -and $serverHardwareType.model -match "Gen9" -and $bootOrder.length -gt 0) 
						{
                        
                            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException BootOrderNotSupported InvalidArgument  '$bootOrder' -Message "The -bootOrder parameter canont be set when BootMode is set to either UEFI or UEFIOptimized.  Please set the -bootOrder value to '`$Null' and try again." #-verbose
		    	            $pscmdlet.ThrowTerminatingError($errorRecord)                        

                        }

                        #Set the default UEFI/UEFI Optimized BootOrder for Gen9 BL to 'HardDisk'
                        elseif (-not $PSBoundParameters["bootOrder"]) 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] BootOrder not specified, setting default 'HardDisk'."
                            [void]$serverProfile.boot.order.Add("HardDisk")

                        }

                        #Override for Gen9 UEFI
                        else { $serverProfile.boot.order = $bootorder }
                    
                    }

                }

            }

            if (-not ($BootMode -eq "BIOS") -and -not ($serverHardwareType.model -match "Gen9" -and $serverHardwareType.model -match "BL")) 
			{

                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException BootModeNotSupported InvalidArgument  'New-HPOVServerProfile' -Message "The -bootMode parameter was provided and the Server Hardware model '$($serverHardwareType.model)' does not support this parameter.  Please verify the Server Hardware Type is at least an HP ProLiant BL Gen9." #-verbose
		    	$pscmdlet.ThrowTerminatingError($errorRecord)    

            }
            
		    $BootableConnections = New-Object System.Collections.ArrayList

            #Loop through connections to look for bootable settings and if -manageboot is omitted from $PSBoundParameters
            foreach ($connection in $serverProfile.connections) 
			{
		    	
		    	if ($connection.boot.priority -ne "NotBootable") 
				{

		    		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found bootable connection ID '$($connection.id)'"

		    		[void]$BootableConnections.Add($connection.id)

		    	}

		    }

		    if ((-not($manageBoot.IsPresent)) -and $BootableConnections.count -gt 0) 
			{

		    	$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException BootableConnectionsFound InvalidArgument 'manageBoot' -Message "Bootable Connections $($BootableConnections -join ",") were found, however the -manageBoot switch parameter was not provided.  Please correct your command syntax and try again." #-verbose
		    	$pscmdlet.ThrowTerminatingError($errorRecord)  

		    } 

            #Check to make sure Server Hardware Type supports Firmware Management (OneView supported G7 blade would not support this feature)
            if ($firmware) 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Firmware Baseline $($baseline)"

                if ($serverHardwareType.capabilities -match "firmwareUpdate" ) 
				{

                    #Validating that the baseline value is a string type and that it is an SPP name.
		            if (($baseline -is [string]) -and (-not ($baseline.StartsWith('/rest'))) -and ($baseline -match ".iso")) 
					{
                        
						try 
						{
		                    
							$baseline = Get-HPOVBaseline -isoFileName $baseline -appliance $_Connection
		                    
							$serverProfile.firmware.firmwareBaselineUri = $baseline.uri
                        
						}

                        catch 
						{
                            
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Error caught when looking for Firmware Baseline."
                            
							$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidBaselineResourceName ObjectNotFound  'Basline' -Message "The provided SPP Baseline '$($baseline)' was not found or an error occurred during lookup." #-verbose
		    	            
							$pscmdlet.ThrowTerminatingError($errorRecord)
                        
						}
		            
					}

                    #Validating that the baseline value is a string type and that it is an SPP name.
		            elseif (($baseline -is [string]) -and (-not ($baseline.StartsWith('/rest')))) 
					{

                        try 
						{

		                    $baseline = Get-HPOVBaseline -SppName $baseline -appliance $_Connection
		                    $serverProfile.firmware.firmwareBaselineUri = $baseline.uri

                        }

                        catch 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Error caught when looking for Firmware Baseline."

                            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidBaselineResourceUri ObjectNotFound 'Basline' -Message "The provided SPP Baseline '$($baseline)' was not found or an error occurred during lookup." #-verbose
		    	            $pscmdlet.ThrowTerminatingError($errorRecord)

                        }

		            }
            
                    #Validating that the baseline value is a string type and that it is the Basline URI
		            elseif (($baseline -is [string]) -and ($baseline.StartsWith('/rest'))) 
					{
		        
		                $baselineObj = Send-HPOVRequest $baseline -appliance $_Connection

                        if ($baselineObj.category -eq "firmware-drivers") 
						{
		                
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Valid Firmware Baseline provided: $($baselineObj.baselineShortName)"
                            $serverProfile.firmware.firmwareBaselineUri = $baselineObj.uri 
                        
                        }

                        else 
						{

                            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidBaselineResource ObjectNotFound 'Basline' -Message "The provided SPP Baseline URI '$($baseline)' is not valid or the correct resource category (expected 'firmware-drivers', received '$($baselineObj.category)'.  Please check the -baseline parameter value and try again." #-verbose
		    	            $pscmdlet.ThrowTerminatingError($errorRecord)

                        }

		            }

                    #Else we are expecting the SPP object that contains the URI.
                    elseif (($baseline) -and ($baseline -is [object])) 
					{
                        # Baseline object can be collection due to multi-appliance connections
                        # Get just that baseline for this appliance connection
                        $baseline = $baseline | ? {$_.applianceConnection.name -eq $_Connection.name }
                        $serverProfile.firmware.firmwareBaselineUri = $baseline.uri
                    
                    }

                    elseif(!$basline)
                    {
                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerHardwareMgmtFeatureNotSupported NotImplemented 'New-HPOVServerProfileTemplate' -Message "Baseline is required if manage firmware is set to true." #-verbose
		    		    $pscmdlet.ThrowTerminatingError($errorRecord)
                    }

                    
                }

                else 
				{

                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerHardwareMgmtFeatureNotSupported NotImplemented 'New-HPOVServerProfile' -Message "`"$($serverHardwareType.name)`" Server Hardware Type does not support Firmware Management." #-verbose
		    	    $pscmdlet.ThrowTerminatingError($errorRecord)
                    
                }

            }
            

            #Check to make sure Server Hardware Type supports Bios Management (OneView supported G7 blade do not support this feature)
            if ($PSBoundParameters['bios']) 
			{

				if ([bool]($bios | Measure-Object).count) 
				{
		    		
					$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException BiosSettingsIsNull InvalidArgument 'biosSettings' -TargetType 'Array' -Message "BIOS parameter was set to TRUE, but no biosSettings were provided.  Either change -bios to `$False or provide valid bioSettings to set within the Server Profile." #-verbose
		    		$pscmdlet.ThrowTerminatingError($errorRecord)
		    	
				}

		    	else 
				{
                
					if ($serverHardwareType.capabilities -match "ManageBIOS" ) 
					{
						 

						#check for any duplicate keys
					    $biosFlag = $false
					    $hash = @{}
					    $biosSettings.id | % { $hash[$_] = $hash[$_] + 1 }

					    foreach ($biosItem in ($hash.GetEnumerator() | ? {$_.value -gt 1} | % {$_.key} )) 
						{
					         
					        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException BiosSettingsNotUnique InvalidOperation 'BiosSettings' -TargetType 'Array' -Message "'$(($serverHardwareType.biosSettings | where { $_.id -eq $biosItem }).name)' is being set more than once. Please check your BIOS Settings are unique.  This setting might be a dependency of another BIOS setting/option.  Please check your BIOS Settings are unique.  This setting might be a dependency of another BIOS setting/option." #-verbose
		    		        $pscmdlet.ThrowTerminatingError($errorRecord)

					    }

					}

					else 
					{ 

					    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerHardwareMgmtFeatureNotSupported NotImplemented 'New-HPOVServerProfile' -Message "`"$($serverHardwareType.name)`" Server Hardware Type does not support BIOS Management." #-verbose
		    		    $pscmdlet.ThrowTerminatingError($errorRecord)                
		    		
					}
					
				}

			}

            #Set Local Storage Management and Check to make sure Server Hardware Type supports it (OneView supported G7 blade would not support this feature)
            if (($localstorage) -and ($serverHardwareType.capabilities -match "ManageLocalStorage" )) 
			{
            
				$_LocalStorageConfig = NewObject -ServerProfileLocalStorage

				$_LocalStorageConfig.manageLocalStorage = [bool]$localstorage
				$_LocalStorageConfig.initialize         = [bool]$Initialize
				
				$_LogicalDisk = New-Object -ServerProfileLocalStorageLogicalDrives

				$_LogicalDisk.bootable  = [bool]$Bootable
				$_LogicalDisk.raidLevel = $RaidLevel.ToUpper()

				[void]$_LocalStorageConfig.logicalDrives.Add($_LogicalDisk)

				[void]$serverProfile.localStorage.Add($_LocalStorageConfig)
                 
            }
		    
            #StRM Support
            if ([bool]$SANStorage -and $serverHardwareType.model -match "BL") 
			{ 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SAN Storage being requested"
            
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of available storage systems"

                #Get list of available storage system targets and the associated Volumes based on the EG and SHT provided
                
				Try
				{

					$availStorageSystems = (Send-HPOVRequest ($script:profileAvailStorageSystemsUri + "?enclosureGroupUri=$($serverProfile.enclosureGroupUri)&serverHardwareTypeUri=$($serverHardwareType.uri)") -appliance $_Connection).members

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
				

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Available Storage Systems: $($availStorageSystems | fl | out-string)"

                #Error on no available storage systems
                if (-not ($availStorageSystems)) 
				{

                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException NoAvailableStorageSystems ObjectNotFound 'SANStorage' -Message "No available storage systems found for '$($serverHardwareType.name)' Server Hardware Type and '$((Send-HPOVRequest $serverProfile.enclosureGroupUri).name)' Enclosure Group.  Please verify an available Storage System exists, and has connectivity to the destination server or Enclosure Group." #-verbose
		    	    $pscmdlet.ThrowTerminatingError($errorRecord)  

                }
                
                $serverProfile.sanStorage = [pscustomobject]@{
                    
					hostOSType        = $script:profileSanManageOSType.($HostOsType);
                    manageSanStorage  = [bool]$SANStorage;
                    volumeAttachments = New-Object System.Collections.ArrayList
                
				}
                
                #Copy the parameter array into a new object
                $volumesToAttach = New-Object System.Collections.ArrayList
				$StorageVolume | % { 
					
					[void]$volumesToAttach.Add($_)
						
				}
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Volumes to process $($volumesToAttach | fl | out-string)"
                
                $i = 0
                
                #Process volumes being passed
                foreach ($volume in $volumesToAttach) 
				{  

                    #If the storage paths array is null, process connections to add mapping
                    if (-not ($volume.storagePaths)) 
					{

                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage Paths value is Null. Building connection mapping." #-Verbose

                        #Static Volume, must have volumeUri attribute present to be valid
                        if ($volume.volumeUri) 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting list of attachable volumes"

                            #Get list of attachable Volumes (i.e. they are not assigned private or are shareable volumes)
							Try
							{

								$attachableVolumes = (Send-HPOVRequest $script:attachableVolumesUri -appliance $_Connection).members

							}

							Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

							#Get storage volume name for reporting purposes
							Try
							{

								$volumeName = (send-hpovrequest $volume.volumeUri -appliance $_Connection).name

							}
                            
                            Catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Volume ID: $($volume.id)"
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Looking to see if volume '$($volume.volumeUri) ($($volumeName))' is attachable"
                
                            #validate volume is attachable
                            $attachableVolFound = $attachableVolumes | ? { $_.uri -eq $volume.volumeUri }

                            #If it is available, continue processing
                            if ($attachableVolFound) 
							{
                
                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] '$($attachableVolFound.uri) ($($attachableVolFound.name))' volume is attachable"
                
                                #validate the volume that is available, is also avialable to the server hardware type and enclosure group
                                $volumeToStorageSystem = $availStorageSystems | ? { $_.storageSystemUri -eq $attachableVolFound.storageSystemUri }
                
                                #If available, process the volume networks
                                if ($volumeToStorageSystem) 
								{ 
                                
                                    #Check to make sure profile connections exist.
                                    if ($serverProfile.connections -and $serverProfile.connections.functionType -contains "FibreChannel") 
									{

                                        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile has connections"
                                    
                                        #loop through profile connections
                                        $found = 0

                                        foreach ($volConnection in $attachableVolFound.availableNetworks) 
										{

                                            #write-verbose "Looking for $volConnection"
                                            $profileConnection = $serverProfile.connections | ? { $_.networkUri -eq $volConnection }

                                            if ($profileConnection) 
											{

                                                #Keep track of the connections found for error reporting later
                                                $found++

                                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Mapping connection ID '$($profileConnection.id)' -> volume ID '$($volumesToAttach[$i].id)'"
                                            
                                                [void]$volumesToAttach[$i].storagePaths.Add(

                                                    [pscustomobject]@{
                                                        connectionId = $profileConnection.id;
                                                        isEnabled    = $True
                                                    }

                                                )

                                            }

                                        }

                                        if (-not ($found)) 
										{

											# // What is this doing here
                                            #$uri += "?force=true"

                                            #Generate non-terminating error and continue
                                            $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException NoProfileConnectionsMapToVolume ObjectNotFound 'New-HPOVServerProfile' -Message "Unable to find a Profile Connection that will map to '$($volumeName)'. Creating server profile resource without Volume Connection Mapping."  #-verbose
                                            #$PSCmdlet.ThrowTerminatingError($errorRecord)
                                            $PSCmdlet.WriteError($errorRecord)

                                        }
                                    
                                    }

                                    #Else, generate an error that at least one FC connection must exist in the profile in order to attach volumes.
                                    else 
									{

                                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException NoProfileConnections ObjectNotFound 'New-HPOVServerProfile' -Message "The profile does not contain any Network Connections.  The Profile must contain at least 1 FC Connection to attach Storage Volumes.  Use the New-HPOVServerProfileConnection helper cmdlet to create 1 or more connections and try again."  #-verbose
                                        $PSCmdlet.ThrowTerminatingError($errorRecord)

                                    }
                
                                }
                
                                #If not, then error
                                elseif (-not($volumeToStorageSystem)) 
								{ 
                            
                                    $errorRecord = New-ErrorRecord InvalidOperationException StorageVolumeDoesNotExistOnStorageArray ObjectNotFound 'New-HPOVServerProfile' -Message "'$($volumeName)' Volume is not available on the '$($volumeToStorageSystem.storageSystemName)' storage system" #-verbose
                                    $PSCmdlet.ThrowTerminatingError($errorRecord)                      
                            
                                }
                
                            }
                
                            elseif (-not ($attachableVolFound)) 
							{ 
                        
                                $errorRecord = New-ErrorRecord InvalidOperationException StorageVolumeUnavailableForAttach ResourceUnavailable 'New-HPOVServerProfile' -Message "'$($volumeName)' Volume is not available to be attached to the profile. Please check the volume and try again."  #-verbose
                                $PSCmdlet.ThrowTerminatingError($errorRecord)

                            }

                        }

                        #Ephemeral volume support
                        elseif (-not ($volume.volumeUri) -and $volume.volumeStoragePoolUri -and $volume.volumeStorageSystemUri) 
						{

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No volumeUri, ephemeral volume request."

                            #Check to make sure profile connections exist.
                            if ($serverProfile.connections -and $serverProfile.connections.functionType -contains "FibreChannel") 
							{

                                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile has connections"

                                #Process available storage system and available FC networks
                                $storageSystemVolCreate = $availStorageSystems | where { $_.storageSystemUri -eq $volume.volumeStorageSystemUri }

                                if ($storageSystemVolCreate) 
								{
                                    
                                    #loop through profile connections
                                    $found = 0

                                    foreach ($storageSystemConnection in $storageSystemVolCreate.connections) 
									{

                                        $profileConnection = $serverProfile.connections | ? { $_.networkUri -eq $storageSystemConnection }

                                        if ($profileConnection) 
										{

                                            #Keep track of the connections found for error reporting later
                                            $found++
                                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Mapping connection ID '$($profileConnection.id)' -> volume ID '$($volumesToAttach[$i].id)'"
                                            
                                            [void]$volumesToAttach[$i].storagePaths.Add(
                                                
                                                [pscustomobject]@{
                                                
                                                    connectionId      = $profileConnection.id;
                                                    isEnabled         = $True;
                                                    storageTargetType =  "Auto"

                                                }
                                            
                                            )

                                        }

                                    }

                                    if (-not($found))
									{
                                    
                                        #$uri += "?force=true"

                                        #Generate non-terminating error and continue
                                        $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException NoProfileConnectionsMapToVolume ObjectNotFound 'New-HPOVProfile' -Message "Unable to find a Profile Connection that will map to '$($volumeName)'. Creating server profile resource without Volume Connection Mapping."  #-verbose
                                        #$PSCmdlet.ThrowTerminatingError($errorRecord)
                                        $PSCmdlet.WriteError($errorRecord)

                                
                                    }

                                }

                                else 
								{

                                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException StorageSystemNotFound ObjectNotFound 'New-HPOVServerProfile' -Message "The provided Storage System URI '$($volume.volumeStorageSystemUri)' for the ephemeral volume '$($volume.name)' was not found as an available storage system."  #-verbose
                                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                                }
                                    
                            }

                            #Else, generate an error that at least one FC connection must exist in the profile in order to attach volumes.
                            else 
							{

                                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException NoProfileConnections ObjectNotFound 'New-HPOVServerProfile' -Message "The profile does not contain any Network Connections.  The Profile must contain at least 1 FC Connection to attach Storage Volumes.  Use the New-HPOVServerProfileConnection helper cmdlet to create 1 or more connections and try again."  #-verbose
                                $PSCmdlet.ThrowTerminatingError($errorRecord)

                            }

                        }
 
                    }
                    
                    $i++
                }

                $serverProfile.sanStorage.volumeAttachments = $volumesToAttach
                
                #Check to see if user passed -EvenPathDisable and/or -OddPathDisable parameter switches
                if ($EvenPathDisabled.IsPresent -or $OddPathDisabled.IsPresent) 
				{
                    
                    if ($EvenPathDisabledd.IsPresent) { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Disable Even Path: $([bool]$EvenPathDisable)" }
                    if ($OddPathDisable.IsPresent) { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Disable Odd Path: $([bool]$OddPathDisable)" }

                    #Keep track of Volume Array index
                    $v = 0

                    foreach ($vol in $serverProfile.sanStorage.volumeAttachments) 
					{
                        
                        #Keep track of Volume Path Array index
                        $p = 0

                        foreach ($path in $vol.storagePaths) 
						{

                            if ([bool]$OddPathDisabled -and [bool]($path.connectionID % 2)) { $isEnabled = $false }
                            elseif ([bool]$EvenPathDisabled -and [bool]!($path.connectionID % 2)) { $isEnabled = $false }
                            else { $isEnabled = $true }

                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting Connection ID '$($path.connectionID)' path enabled:  $($isEnabled)"

                            $serverProfile.sanStorage.volumeAttachments[$v].storagePaths[$p].isEnabled = $isEnabled
                            $p++
                        }

                        $v++

                    }
                    
                }

            }

		    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile: $($serverProfile | out-string)"
			Try
			{

				$resp = Send-HPOVRequest $uri POST $serverProfile -appliance $_Connection

			}
	        
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

	        
            
            [void]$colStatus.Add($resp)

        }

    }

    End 
	{

        return $colStatus
    
	}    
    
    

}

function Join-HPOVServerProfileToTemplate 
{

    [CmdLetBinding(SupportsShouldProcess = $True)]

    Param 
	(

        [parameter (Mandatory = $true, ValueFromPipeline = $true, HelpMessage = "Enter the template to attach to the profile.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias("t")]
        [object]$template,

	    [parameter(Mandatory = $true)]
        [Alias("p")] 
        [object]$profile,

        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = $Global:ConnectedSessions

    )

    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_.Exception)

			}

			$c++

		}
        
        #If multiple appliance connections check for URI values in the parameters
        If($ApplianceConnection.count -gt 1){
            
            If($template -is [string] -and $template.startswith('/rest/')){

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $template"
                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidTemplateParameter InvalidArgument 'Template' -Message "Template parameter as URI is not supported with multiple appliance connections."
		        $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

            If($profile -is [string] -and $profile.startswith('/rest/')){

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $profile"
                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidProfileParameter InvalidArgument 'Profile' -Message "Profile parameter as URI is not supported with multiple appliance connections."
		        $PSCmdlet.ThrowTerminatingError($errorRecord)

            }
        }

		$uri = $script:ProfilesUri

        $colStatus = New-Object System.Collections.ArrayList

    }
	
    
    Process {
        
        ForEach($_Connection in $ApplianceConnection){
        
            #Process the template parameter
            #Template passed as string
            if ($template -is [string])
	        {
                
	            #If the URI is passed as set the Template Uri variable. Should not process if multiple connections identified
	            if ($template.StartsWith('/rest'))
	        	{ 
		    	Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Template URI: $template"
		    	$templateUri = $template
		    
		        }

	            #Otherwise, perform a lookup of the Enclosure Group
	            else
	        	{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Template Name: $template"					    
                
		    	$templateUri = (Get-HPOVServerProfileTemplate $template -appliance $ApplianceConnection).Uri
		        
	        }

	        }
	        	    				
	        #Else the template object or template object collection is passed
	        elseif (($template -is [Object]) -and ($template.category -eq "server-profile-templates")) 
	        { 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Template object provided"

                $thisTemplate = $template | ? { $_.ApplianceConnection.name -eq $_Connection.name }
                $templateUri = $thisTemplate.uri
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Name: $($thisTemplate.name)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Uri: $($thisTemplate.uri)"

            }

            #Process the profile parameter
            #profile passed as string
            if ($profile -is [string])
	        {
                
	            #If the URI is passed as set the Template Uri variable. Should not process if multiple connections identified
	            if ($profile.StartsWith('/rest'))
	        	{ 
		    	Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Template URI: $profile"
		    	$thisProfile = Send-HPOVRequest $profile -appliance $_Connection
		    
		        }

	            #Otherwise, perform a lookup of the Enclosure Group
	            else
	        	{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Template Name: $profile"					    
                
		    	$thisProfile = Get-HPOVServerProfile $profile -appliance $_Connection
		        
	        }

	        }
	        	    				
	        #Else the template object or template object collection is passed
	        elseif (($profile -is [Object]) -and ($profile.category -eq "server-profiles")) 
	        { 

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile object provided"

                $thisProfile = $profile | ? { $_.ApplianceConnection.name -eq $_Connection.name }
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Name: $($thisProfile.name)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Enclosure Group Uri: $($thisProfile.uri)"

            }

            if ($thisProfile.ApplianceConnection.name -eq $_Connection.name){
                
                $thisProfile.serverProfileTemplateUri = $templateUri
                $task = Set-HPOVResource $thisProfile -appliance $_Connection

                [void]$colStatus.Add($task)
            }

            

        }

    } #End Process Block


    End {
        return $colStatus
    }

}

function New-HPOVServerProfileAssign {
	# .ExternalHelp HPOneView.200.psm1-help.xml
	[CmdLetBinding(DefaultParameterSetName = "Default")]
    Param (
		[parameter(Mandatory = $true, valuefrompipeline = $True, ParameterSetName = "Unassigned", Position = 0)]
		[parameter(Mandatory = $true, valuefrompipeline = $True, ParameterSetName = "Default", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [object]$Profile = $Null,
        [parameter(Mandatory = $true, valuefrompipeline = $false, ParameterSetName = "Default", Position = 1)]
        [ValidateNotNullOrEmpty()]
        [object]$Server = $Null,
        [parameter(Mandatory = $false, ParameterSetName = "Unassigned")]
        [switch]$Unassigned
    )
    Begin {
        if (-not($global:cimgmtSessionId)) {
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError "New-HPOVServerProfileAssign" -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)
        }
    }
	Process {
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"
		#Looking for the $server DTO to be string
		if ($Profile -is [string]) {
			#If the server URI is passed, look up the server object
			if ($Profile.StartsWith($script:profilesUri)) {
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Profile URI passed: $Profile"
				[object]$Profile = Send-HPOVRequest $Profile
			}
			#Error because the URI is not the correct type
			elseif ($Profile.StartsWith('/rest/')) {
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid Server Profile URI passed: $Profile"
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException IncorrectServerProfileUri InvalidArgument 'Profile' -Message "The Server Profile URI provided '$Profile' does not begin with '/rest/server-profiles'.  Please correct the value and try again." #-verbose
				$pscmdlet.ThrowTerminatingError($errorRecord)
			}
			#Else the name is passed and need to look it up.
			else {
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Profile Name passed: $Profile"
				try { [object]$Profile = Get-HPOVServerProfile -name $Profile }
                catch [HPOneView.ServerProfileResourceException]{
					if ($_.FullQualifiedErrorId -match "ServerProfileResourceNotFound") {
						$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerProfileResourceNotFound ObjectNotFound 'Profile' -Message "The Server Profile '$Profile' was not found.  Please correct the value and try again." #-verbose
						$pscmdlet.ThrowTerminatingError($errorRecord)
					}
				}
			}
		}
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Profile Object: $($Profile | out-string)"
		#Check to make sure the server hardware the profile is assigned to is powered off
		if ($Profile.serverHardwareUri) {
			$profilePowerState = Send-HPOVRequest $Profile.serverHardwareUri
			if ($profilePowerState.powerState -ne "Off") {
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException InvalidServerPowerState InvalidResult 'Profile' -Message "The Server '$($profilePowerState.name)' is currently powered On.  Please power off the server and then perform the operation again." #-verbose
				$pscmdlet.ThrowTerminatingError($errorRecord)
			}
		}
		#Looking for the $server DTO to be string
		if ($server -is [string]) {
			#If the server URI is passed, look up the server object
			if ($server.StartsWith($script:serversUri)) {
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server URI passed: $server"
				[object]$server = Send-HPOVRequest $server
			}
			#Error because the URI is not the correct type
			elseif ($server.StartsWith('/rest/')) {
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException IncorrectServerUri InvalidArgument 'Server' -Message "The Server URI provided '$Server' does not begin with '/rest/server-hardware'.  Please correct the value and try again." #-verbose
				$pscmdlet.ThrowTerminatingError($errorRecord)
			}
			#Else the name is passed and need to look it up.
			else{
				try { [object]$server = Get-HPOVServer -name $server }
                catch [HPOneView.ServerHardwareResourceException]{
					if ($_.FullQualifiedErrorId -match "ServerHardwareResourceNotFound") {
						$errorRecord = New-ErrorRecord HPOneView.ServerHardwareResourceException ServerHardwareResourceNotFound ObjectNotFound 'Server' -Message "The Server hardware resource '$Server' was not found.  Please correct the value and try again." #-verbose
						$pscmdlet.ThrowTerminatingError($errorRecord)
					}
				}
			}
		}
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server Object: $($server | out-string)"
		if ($Unassigned.IsPresent) {
			$Profile.serverHardwareUri = $Null
			if ($Profile.enclosureUri) {
				$Profile.enclosureUri      = $Null
				$Profile.enclosureBay      = $Null	
			}
		}
		else {
			if ($server.serverHardwareTypeUri -ne $Profile.serverHardwareTypeUri) {
				$errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException IncorrectServerHardwareTypeUri InvalidArgument 'Server' -Message "The Server resource '$($Server.name)' provided does not match the same required Server Hardware Type ['$((Send-HPOVRequest $profile.serverHardwareTypeUri).name)'] found in the Server Profile.  This operation is not permitted, as the Server Hardware Types must match." #-verbose
				$pscmdlet.ThrowTerminatingError($errorRecord)
			}
			$Profile.serverHardwareUri = $server.uri
			$Profile.enclosureUri      = $server.locationUri
		}
		$resp = Send-HPOVRequest $Profile.uri PUT $Profile
	}
    End {
        return $resp
    }
}

function Copy-HPOVServerProfile 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdLetBinding()]
    Param
	(
	
        [parameter(Mandatory = $True, ValueFromPipeline = $true, position = 0)]
        [Alias('sname','src')]
        [ValidateNotNullOrEmpty()]
        [object]$SourceName = $null,
        
        [parameter(Mandatory = $false, position = 1)]
        [alias('dname','dst')]
        [string]$DestinationName = $null,
        
        [parameter(Mandatory = $false, position = 2)]
        [object]$assign = "unassigned",

        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )
    
    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}
        
        if($ApplianceConnection.count -gt 1)
		{
		
            # Check for appliance specific URI parameters and error if more than one appliance connection supplied
            if (($SourceName -is [string]) -and ($SourceName.StartsWith($script:profilesUri))) 
			{
                    
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SourceName is a Server Profile URI: $($SourceName)"
                $errorRecord = New-ErrorRecord ArgumentNullException ParametersNotSpecified InvalidArgument 'Copy-HPOVProfile' -Message "The input parameter 'SourceName' is a URI. For multiple appliance connections this is not supported." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)
				
            }

            if (($assign -is [string]) -and ($assign.StartsWith($script:serversUri))) 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Assign is a Server Profile URI: $($SourceName)"
                $errorRecord = New-ErrorRecord ArgumentNullException ParametersNotSpecified InvalidArgument 'Copy-HPOVProfile' -Message "The input parameter 'Assign' is a URI. For multiple appliance connections this is not supported." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)
            
			}

        }

        $taskCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

        if (!$SourceName) 
		{ 
        
            $errorRecord = New-ErrorRecord ArgumentNullException ParametersNotSpecified InvalidArgument 'Copy-HPOVProfile' -Message "The input parameter 'SourceName' was Null. Please provide a value and try again." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)
            
        }

        ForEach($_Connection in $ApplianceConnection)
		{

            if (($SourceName -is [string]) -and (!$SourceName.StartsWith($script:profilesUri))) 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SourceName is a Server Profile Name: $($SourceName)"
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting Server Profile URI"

                $profile = Get-HPOVServerProfile $SourceName -appliance $_Connection
                $profileSourceSHT = $profile.serverHardwareTypeUri

            }

            #Checking if the input is System.String and IS a URI - Should not process on multi-appliance connections
            elseif (($SourceName -is [string]) -and ($SourceName.StartsWith($script:profilesUri))) 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SourceName is a Server Profile URI: $($SourceName)"

                $profile = Send-HPOVRequest $SourceName -appliance $_Connection
                $profileSourceSHT = $profile.serverHardwareTypeUri
            
            }

            #Checking if source is object or object collection
            elseif (($SourceName -is [PSCustomObject]) -and ($SourceName.category -ieq "server-profiles")) 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SourceName is a Server Profile object: $($profile.name)"
                #For multi-appliance connections retrieve the source object only for this connection
                $profile = $SourceName | ? { $_.applianceConnection.name -eq $_Connection.name }
                
                #if no such profile for this appliance connection move onto the next connection
                if (!$profile){continue}
                $profileSourceSHT = $SourceName.serverHardwareTypeUri
            
            }

            else 
			{

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Copy-HPOVProfile' -Message "The parameter -SourceName value is invalid.  Please validate the SourceName parameter value you passed and try again." #-verbose
                $pscmdlet.ThrowTerminatingError($errorRecord)

            }

            if ($assign -ine 'unassigned') 
			{
                
                #Target Server is the server device name. Could be any empty bay assignment
                if (($assign -is [string]) -and (-not ($assign.StartsWith($script:serversUri)))) 
				{
                    
                    # Get-HPOVServer needs to be in a try/catch since it may be an empty bay
                    Try
					{
					
                        $serverDevice = Get-HPOVServer $assign -appliance $_Connection
						
					}
					
                    Catch 
					{
					
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($assign) server resource does not exist."
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Check for empty bay assignment."
							
                    }

                    Try
					{

                        if(!$serverDevice -and ($assign -match "bay"))
						{
                            
 
                            $assign = $assign.split(',').trim()
                            $thisEnc = Get-HPOVEnclosure $assign[0] -appliance $_Connection
                            [int]$thisBay = (($assign[1]) -replace "bay", "").trim()

                            $presence = $thisEnc.deviceBays[($thisBay - 1)].devicePresence
                            
                            #if presence is null, invalid device bay
                            if(!$presence) 
							{
							
                                $errorRecord = New-ErrorRecord ArgumentNullException ParametersNotSpecified InvalidArgument 'Copy-HPOVProfile' -Message "The bay number $thisBay is not valid or not present." #-verbose

                                $PSCmdlet.ThrowTerminatingError($errorRecord)
                            
							}
							
                            else 
							{
							
                                $profile.enclosureGroupUri = $thisEnc.uri
                                $profile.enclosureBay = $thisBay
                                $profileDestSHT = $profileSourceSHT
                            
							} 
                        
						}

                        else 
						{
						
                            $profileDestSHT = $serverDevice.serverHardwareTypeUri
							
                        }
						
                    }

                    Catch 
					{
					
                        $PSCmdlet.ThrowTerminatingError($_)
						
                    }
                    
                }

                #Checking if the input is System.String and IS a URI
                elseif (($assign -is [string]) -and ($assign.StartsWith($script:serversUri))) 
				{
                
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Assign to the Server hardware URI: $($assign)"

                    $serverDevice = Send-HPOVRequest $assign -appliance $_Connection
                    $profileDestSHT = $serverDevice.serverHardwareTypeUri
            
                }

                #Checking if the input is PSCustomObject, and the category type is server-profiles, which would be passed via pipeline input
                elseif (($assign -is [PSCustomObject]) -and ($assign.category -ieq "server-hardware")) 
				{
                    
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Assign to the Server object: $($assign.name)"

                    $serverDevice = $assign | ? { $_.applianceConnection.name -eq $_Connection.name }
                    $profileDestSHT = $serverDevice.serverHardwareTypeUri
            
                }

                else 
				{

                    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Copy-HPOVProfile' -Message "The parameter -Assign value is invalid.  Please validate the Assign parameter value you passed and try again." #-verbose
                    $pscmdlet.ThrowTerminatingError($errorRecord)

                }

                #Checking if the input is PSCustomObject, and the category type is server-hardware, which would be passed via pipeline input
                if ($serverDevice.serverProfileUri) 
				{

                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerPropfileResourceAlreadyExists ResourceExists 'Copy-HPOVProfile' -Message "A server profile is already assigned to $($serverDevice.name) ($(Get-HPOVServerProfile $serverDevice.serverProfileUri).name). Please try specify another server." #-verbose
                    $pscmdlet.ThrowTerminatingError($errorRecord)                
            
                }

            }

            elseif ($assign -ieq "unassigned") 
			{
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Server will be unassigned"

            }

            #Check to see if the SHT is different from the Profile and Target Assign Server
            if (($profileDestSHT -ine $profileSourceSHT) -and ($assign -ine "unassigned") -and (!$profile.enclosureBay))
			{
			
                $errorRecord = New-ErrorRecord HPOneView.ServerProfileResourceException ServerHardwareTypeMismatch InvalidOperation 'Copy-HPOVProfile' -Message "The Target Server Hardware Type does not match the source Profile Server Hardware Type. Please specify a different Server Hardware Device to assign." #-verbose
                $pscmdlet.ThrowTerminatingError($errorRecord)          
                    
            }

            #Remove Profile Specifics:
            $profile = $profile | select-object -Property * -excludeproperty uri,etag,created,modified,uuid,status,state,inprogress,serialNumber,enclosureUri,enclosureBay,serverHardwareUri,taskUri #,sanStorage

            $newConnections = New-Object System.Collections.ArrayList
            #Create new connections with excluded properties and add to the newConnections array
            $profile.connections | select-object -property * -excludeproperty mac,wwnn,wwpn,deploymentstatus,interconnectUri, applianceConnection | % {
			
				#Assign the newConnections array to $profile.connections
				[void]$newConnections.Add($_)
			
			}
            $profile.connections = $newConnections

            #Process SAN Volume Attachments
            if ($profile.sanStorage -and $profile.sanStorage.volumeAttachments) 
			{ 

		    	$newVolumeAttachments = @()
		    
		    	Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing SAN Volume Attachments"

		    	ForEach ($attachVolume in $profile.sanStorage.volumeAttachments ) 
				{

		    		$tempVolume = [PSCustomObject]@{}
		    
		    		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found attached volume ID $($attachVolume.id). Getting Volume properties."

		    		$volume = Send-HPOVRequest $attachVolume.volumeUri -appliance $_Connection

		    		#Process shared volume
		    		if ($volume.shareable) 
					{
		    
		    			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding Shareable Volume."

		    			$tempVolume = $attachVolume | Select-Object id,volumeUri,lunType,lun,storagePaths
		    			$tempVolume.lun = $Null
		    			$tempVolume.storagePaths = ($attachVolume.storagePaths | % { $_ | select-object * -exclude status } )

		    		}

		    		#Process private volume
		    		else 
					{

		    			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding Private Volume."

		    			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Checking for unique volume name."

		    			#Get list of existing volumes from Index
		    			$indexVolumes = Send-HPOVRequest ($indexUri + "?category=storage-volumes&count=-1&start=0&sort=name:asc") -appliance $_Connection

		    			$regex = " \((([0-9]|[1-9][0-9]|[1-9][0-9][0-9])+)\)"

		    			$tempVolumeName = $volume.name -replace $regex,""

		    			for ($i = 1; $i -le $volume.name.length; $i++) 
						{
		    			
		    				if (-not ($indexVolumes.members -contains ($tempVolumeName + " ($i)"))) 
							{
		    
		    					$attachVolumeName = $tempVolumeName + " ($i)"
		    					
		    					#verify the name is unique by searching the index.
								Try
								{
								
									$results = Send-HPOVRequest ($indexUri + "?category=storage-volumes&filter=name='$attachVolumeName'&count=-1&start=0&sort=name:asc") -appliance $_Connection
								
								}
		    					
								Catch
								{
								
									$PSCmdlet.ThrowTerminatingError($_)
								
								}

		    					if ($results.count -eq 0) 
								{	

		    						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting Volume Name to '$attachVolumeName'."
		    						break

		    					}

		    				}

		    			}

		    			$tempVolume | Add-Member -NotePropertyName id -NotePropertyValue $attachVolume.id
		    			$tempVolume | Add-Member -NotePropertyName volumeName -NotePropertyValue $attachVolumeName
		    			$tempVolume | Add-Member -NotePropertyName volumeUri -NotePropertyValue $Null
		    			$tempVolume | Add-Member -NotePropertyName volumeStoragePoolUri -NotePropertyValue $attachVolume.volumeStoragePoolUri 
		    			$tempVolume | Add-Member -NotePropertyName volumeStorageSystemUri  -NotePropertyValue $attachVolume.volumeStorageSystemUri 
		    			$tempVolume | Add-Member -NotePropertyName volumeProvisionType  -NotePropertyValue $volume.provisionType
		    			$tempVolume | Add-Member -NotePropertyName volumeProvisionedCapacityBytes  -NotePropertyValue $volume.provisionedCapacity
		    			$tempVolume | Add-Member -NotePropertyName volumeShareable   -NotePropertyValue $False
		    			$tempVolume | Add-Member -NotePropertyName lunType   -NotePropertyValue $attachVolume.lunType
		    			
		    			if ($attachVolume.lunType -eq "Auto") { $tempVolume | Add-Member -NotePropertyName lun  -NotePropertyValue $Null }
		    			else { $tempVolume | Add-Member -NotePropertyName lun  -NotePropertyValue $attachVolume.lun }
		    			
		    			$tempVolume | Add-Member -NotePropertyName storagePaths  -NotePropertyValue ($attachVolume.storagePaths | % { $_ | select-object * -exclude status } )
		    			$tempVolume | Add-Member -NotePropertyName permanent -NotePropertyValue $volume.isPermanent

		    		}

		    		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Copied volume details: $($tempVolume | out-string)"

		    		$newVolumeAttachments += $tempVolume

		    	}

		    	$profile.sanStorage.volumeAttachments = $newVolumeAttachments
	
		    }

            #If DestinationName is provided, change to the profile name to value
            if ($DestinationName) 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New Server Profile name provided $($DestinationName)"
                $profile.name = $destinationName
            
            }
            
            #If no DestinationName is provided, add "Copy Of " prefix.
            else 
			{

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No new Server Profile name provided. Setting to `"Copy of $($profile.name)`""
                $profile.name = "Copy of " + $profile.name

            }

            #If the server hardware device is present, add the property to the object
            if ($serverDevice) 
			{

                $profile | Add-Member @{ serverHardwareUri = $serverDevice.Uri }
            
            }

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New Server Profile object: $($profile | out-string)"
            
            #Send request to create new copied profile
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request"
			
			Try
			{
			
				$resp = Send-HPOVRequest $script:profilesUri POST $profile -appliance $_Connection
			
			}
			
			Catch
			{
			
				$PSCmdlet.ThrowTerminatingError($_)
			
			}
            
            [void]$taskCollection.Add($resp)
        }

    }

    End 
	{
        
        return $taskCollection
    }

}

function Remove-HPOVServerProfile 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default", SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    Param 
    (

        [parameter (Mandatory = $true,ValueFromPipeline = $true, ParameterSetName = "default", HelpMessage = "Specify the profile(s) to remove.", Position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias("uri")]
        [Alias("name")]
        [System.Object]$profile = $null,

        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions},

        [parameter (Mandatory = $false,ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Specify to force-remove the profile.")]
        [Switch]$force
    
    )

   Begin 
   {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}
        
        if($ApplianceConnection.count -gt 1){
            # Check for appliance specific URI parameters and error if more than one appliance connection supplied
            if (($profile -is [string]) -and ($profile.StartsWith($script:profilesUri))) {
                    
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SourceName is a Server Profile URI: $($profile)"
                $errorRecord = New-ErrorRecord ArgumentNullException ParametersNotSpecified InvalidArgument 'Remove-HPOVServerProfile' -Message "The input parameter 'profile' is a resource URI. For multiple appliance connections this is not supported." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)
            }

            if (($profile -is [array]) -and ($profile.getvalue(0).gettype() -is [string]) -and $profile -match '/rest/') {
                
                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Assign is a Server Profile URI: $($SourceName)"
                $errorRecord = New-ErrorRecord ArgumentNullException ParametersNotSpecified InvalidArgument 'Remove-HPOVServerProfile' -Message "The input parameter 'profile' is a resource URI. For multiple appliance connections this is not supported." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)
            
                }

        }

        $taskCollection = New-Object System.Collections.ArrayList
        $thisConnection = $ApplianceConnection.name
    }

    Process {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Profile input type:  $($profile.gettype())"

        foreach ($prof in $profile) {

            $profileNameOrUri = $null
            $profileDisplayName = $null

            if ($prof -is [String]) {

                $profileNameOrUri = $prof
                $profileDisplayName = $prof
        	}
            elseif ($prof -is [PSCustomObject] -and $prof.category -ieq 'server-profiles') {
                
                $thisConnection = $prof.ApplianceConnection.name
                $profileNameOrUri = $prof.uri
                $profileDisplayName = $prof.name

            }

		    else {

                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Remove-HPOVServerProfile' -Message "Invalid profile parameter: $prof" #-verbose
                $pscmdlet.ThrowTerminatingError($errorRecord)
            }

            if (!$profileNameOrUri) {
                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Remove-HPOVServerProfile' -Message "Invalid profile parameter: $prof" #-verbose
                $pscmdlet.ThrowTerminatingError($errorRecord)

            }
            elseif ($pscmdlet.ShouldProcess($thisConnection,"Remove profile $profileDisplayName from appliance?")){   
                
                if ([bool]$force) { Remove-HPOVResource -nameOrUri $profileNameOrUri -force -appliance $thisConnection}
                else { Remove-HPOVResource -nameOrUri $profileNameOrUri -appliance $thisConnection}

            }
	    }
    }
}

function Get-HPOVServerProfileConnectionList 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
	
	[CmdLetBinding()]
    Param 
    (
        [parameter(Mandatory = $false)]
        [ValidateNotNullOrEmpty()]
        [string]$name=$null,

        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    )

    Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

        $allConnections = New-Object System.Collections.ArrayList

    }

    Process {
	    
        ForEach($_Connection in $ApplianceConnection)
		    {

            $profiles = @();
    
            #get profiles
            if ($name)
            {
            $uri = $profilesUri + "?filter=`"name='$name'`"";
            $profile = (Send-HPOVRequest $uri -appliance $_Connection).members;
			if (-not ($profile)) { 
                $errorRecord = New-ErrorRecord InvalidOperationException ProfileResourceNotFound ObjectNotFound 'Get-HPOVServerProfileConnectionList' -Message "Server Profile '$name' was not found." #-verbose
                $pscmdlet.ThrowTerminatingError($errorRecord)
                
            }
            
            $profiles += $profile;
    
        } 
		    else {
                $index = Send-HPOVRequest $profileIndexListUri -appliance $_Connection
                if ($index.count -eq 0) {
                    $errorRecord = New-ErrorRecord InvalidOperationException ProfileResourceNotFound ObjectNotFound 'Get-HPOVServerProfileConnectionList' -Message "No Server Profile resources found.  Use New-HPOVServerProfile to create one." #-verbose
                    $pscmdlet.ThrowTerminatingError($errorRecord)            
                    
                }
    
                foreach ($entry in $index.members)
                {
                    $profile = Send-HPOVRequest $entry.uri -appliance $_Connection;
                    if (-not($profile)) { write-host "profile not found: " $entry.uri -ForegroundColor Red; continue; }
    
                    $profiles += $profile;
                }            
            }
    
            #get connections
            $conns = @();
            foreach($p in $profiles)
            {
    
                foreach($c in $p.connections) 
                { 
                    $c | add-member -membertype noteproperty -name cid -value $c.id;
                    $c | add-member -membertype noteproperty -name serverProfile -value $p.name;
                    $c | add-member -membertype NoteProperty -name Network -value (Send-HPOVRequest $c.networkUri -appliance $_Connection).Name
                    $c | Add-Member -NotePropertyName Appliance -NotePropertyValue $_Connection.name
                    if($c.wwpn) { $c.wwpn = $c.wwpn.Replace(":",""); } else {$c.wwpn = "-" }
                    if($c.wwnn) { $c.wwnn = $c.wwnn.Replace(":",""); } else {$c.wwnn = "-" } 
                    if($c.boot.targets) 
                    {
                        $c | add-member -membertype noteproperty -name arrayTarget -value $c.boot.targets[0].arrayWwpn
                        $c | add-member -membertype noteproperty -name lun -value $c.boot.targets[0].lun
                    }
    
                    if($c.portId) { 
		    		    $c.portId = $c.portId.Replace("Flexible", "")
		    		} 
		    		else { 
		    		    $name = "Dev:" + $c.deviceNumber + '-' + $c.physicalPortNumber
                        $c | add-member -membertype noteproperty -name portId -value $name
                    }
    
                   if($c.boot) { $c.boot = $c.boot.priority; }
                   if($c.boot -eq "NotBootable") { $c.boot = "-"; }      
                   
                   $conns += $c;
                }
            }
            #output
            $allConnections.Add($conns)
            
        
        }   
    }
    
    End {
        $allConnections | Sort-Object serverProfile, cid | format-table -Property serverProfile, cid, portId, functionType, Network, mac, wwpn, boot, arrayTarget, lun, Appliance  -AutoSize
    } 
}

function New-HPOVServerProfileConnection 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
	
    
	[CmdLetBinding(DefaultParameterSetName = "Ethernet")]
    Param 
    (

        [parameter(Mandatory = $true,ParameterSetName = "Ethernet")]
		[parameter(Mandatory = $true,ParameterSetName = "FC")]
		[parameter(Mandatory = $true,ParameterSetName = "UserDefinedEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "UserDefinedFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "bootFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedFC")]
		[ValidateNotNullOrEmpty()]
	    [parameter(Position=0)]
		[Alias('id')]
        [int]$connectionID = 1,

        [parameter(Mandatory = $true,ParameterSetName = "Ethernet")]
		[parameter(Mandatory = $true,ParameterSetName = "FC")]
		[parameter(Mandatory = $true,ParameterSetName = "UserDefinedEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "UserDefinedFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "bootFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedFC")]
		[ValidateNotNullOrEmpty()]
	    [ValidateSet("Ethernet", "FibreChannel","Eth","FC", IgnoreCase=$true)]
        [parameter(Position=1)]   
		[Alias('type')]
		[string]$connectionType = "Ethernet",

        [parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "Ethernet")]
	    [parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "FC")]
        [parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "UserDefinedEthernet")]
		[parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "UserDefinedFC")]
	    [parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "bootEthernet")]
		[parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "bootFC")]
		[parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "bootUserDefinedEthernet")]
		[parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "bootUserDefinedFC")]
		[ValidateNotNullOrEmpty()]
	    [parameter(Position=2)]
        [object]$network,

        [parameter(Mandatory = $false,ParameterSetName = "Ethernet")]
		[parameter(Mandatory = $false,ParameterSetName = "FC")]
        [parameter(Mandatory = $false,ParameterSetName = "UserDefinedEthernet")]
		[parameter(Mandatory = $false,ParameterSetName = "UserDefinedFC")]
		[parameter(Mandatory = $false,ParameterSetName = "bootEthernet")]
		[parameter(Mandatory = $false,ParameterSetName = "bootFC")]
		[parameter(Mandatory = $false,ParameterSetName = "bootUserDefinedEthernet")]
		[parameter(Mandatory = $false,ParameterSetName = "bootUserDefinedFC")]
		[ValidateNotNullOrEmpty()]
	    [parameter(Position=3)]
        [string]$portId = "Auto",

        [parameter(Mandatory = $false,ParameterSetName = "Ethernet")]
		[parameter(Mandatory = $false,ParameterSetName = "FC")]
        [parameter(Mandatory = $false,ParameterSetName = "UserDefinedEthernet")]
		[parameter(Mandatory = $false,ParameterSetName = "UserDefinedFC")]
		[parameter(Mandatory = $false,ParameterSetName = "bootEthernet")]
		[parameter(Mandatory = $false,ParameterSetName = "bootFC")]
		[parameter(Mandatory = $false,ParameterSetName = "bootUserDefinedEthernet")]
		[parameter(Mandatory = $false,ParameterSetName = "bootUserDefinedFC")]
		[ValidateNotNullOrEmpty()]
	    [parameter(Position=4)]
        [string]$name = $Null,

	    [parameter(Mandatory = $false,ParameterSetName = "Ethernet")]
		[parameter(Mandatory = $false,ParameterSetName = "FC")]
        [parameter(Mandatory = $false,ParameterSetName = "UserDefinedEthernet")]
		[parameter(Mandatory = $false,ParameterSetName = "UserDefinedFC")]
		[parameter(Mandatory = $false,ParameterSetName = "bootEthernet")]
		[parameter(Mandatory = $false,ParameterSetName = "bootFC")]
		[parameter(Mandatory = $false,ParameterSetName = "bootUserDefinedEthernet")]
		[parameter(Mandatory = $false,ParameterSetName = "bootUserDefinedFC")]
		[ValidateNotNullOrEmpty()]
		[ValidateRange(100,10000)]
        [int]$requestedBW = 2500,
	
		[parameter(Mandatory = $true,ParameterSetName = "UserDefinedEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "UserDefinedFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedFC")]
        [ValidateNotNullOrEmpty()]
        [switch]$userDefined,

        [parameter(Mandatory = $true,ParameterSetName = "UserDefinedEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "UserDefinedFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedFC")]
        [ValidateScript({$_ -match $script:macAddressPattern})]
        [string]$mac = $Null,
	
		[parameter(Mandatory = $true,ParameterSetName = "UserDefinedFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedFC")]
        [ValidateScript({$_ -match $script:wwnAddressPattern})]
        [string]$wwnn = $Null,
		
		[parameter(Mandatory = $true,ParameterSetName = "UserDefinedFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedFC")]
        [ValidateScript({$_ -match $script:wwnAddressPattern})]
        [string]$wwpn = $Null,
	
	    [parameter(Mandatory = $true,ParameterSetName = "bootEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "bootFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedFC")]
        [ValidateNotNullOrEmpty()]
        [switch]$bootable,
	
		[parameter(Mandatory = $true,ParameterSetName = "bootEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "bootFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedEthernet")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedFC")]
		[ValidateNotNullOrEmpty()]
	    [ValidateSet("UseBIOS", "Primary","Secondary", IgnoreCase=$true)]
		[string]$priority = "NotBootable",
	
		[parameter(Mandatory = $true,ParameterSetName = "bootFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedFC")]
		[ValidateScript({$_ -match $script:wwnAddressPattern})]
		[string]$arrayWwpn = $null,
	
		[parameter(Mandatory = $true,ParameterSetName = "bootFC")]
		[parameter(Mandatory = $true,ParameterSetName = "bootUserDefinedFC")]
		[ValidateRange(0,254)]
		[int]$lun = 0,

        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	
	)
	
	Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ParameterSet: + $($PsCmdLet.ParameterSetName)"
				
        #Init object collection
        $_Connections = New-Object System.Collections.ArrayList

	}

	Process 
    {


        ForEach ($net in $network) {

            $connection = NewObject -ProfileConnection
                
            $connection.id                  = [Int]$connectionId;
		    $connection.functionType        = [String]$connectionType;
            $connection.name                = [String]$name;
		    $connection.portId              = [String]$portId; 
		    $connection.networkUri          = [String]$null; 
		    $connection.requestedMbps       = [Int]$requestedBW; 
		    $connection.boot.priority       = $priority
            $connection.ApplianceConnection = $net.ApplianceConnection

            switch ($net.Gettype().Name) 
            {

            "PSCustomObject" 
            {

                if ($net.category -eq "fc-networks" -or $net.category -eq "ethernet-networks" -or $net.category -eq "network-sets") {
                
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network resource provided via parameter"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Name:  $($net.name)"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Category:  $($net.category)"
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User specified '$($connectionType)' ConnectionType"

			        $connection.networkUri = $net.uri
			
			        #If the object type is "network-set", we need to set the networkType to Ethernet as Network-Set is not a valid Connection Type.
			        if (($net.type -eq "network-set") -or ($net.type -eq "ethernet-networkV2"))
                    {

                        $connection.functionType = "Ethernet"
                        
			        }

			        elseif($net.type -eq "fc-networkV2")
                    {

                        $connection.functionType = "FibreChannel"
			        }
                
                }

                #Generate Error due to incorrect cagtegory
                else 
                {

                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileConnectionException InvalidNetworkCategory InvalidArgument 'New-HPOVServerProfileConnection' -Message "The -Network value category '$($net.category)' is not 'ethernet-networks', 'fc-networks' or 'network-sets'.  Please check the value and try again." #-verbose
		    	    $PSCmdlet.ThrowTerminatingError($errorRecord)

                }

            }

            default 
            {

                $errorRecord = New-ErrorRecord HPOneView.ServerProfileConnectionException InvalidNetworkCategory InvalidArgument 'New-HPOVServerProfileConnection' -Message "The -Network paramter is an invalid type. Please supply a network object or object collection." #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)

            }

        }
	
		    #write an error and break if the network category does not match the connection type requested
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Network Type: $($connection.functionType)"

		    If ($connection.functionType -ne $connectionType)
            {

                $errorRecord = New-ErrorRecord InvalidOperationException NetworkTypeMismatch InvalidOperation 'ConnectionType' -Message "$Network type '$($connection.functionType)' is a mismatch to the requested connection type $connectionType. Please provide a valid connection type that matches the network." #-verbose
		    	$PSCmdlet.ThrowTerminatingError($errorRecord)

		    }
		    
		    #Set conneciton boot settings
            if ($PSboundParameters['bootable']) 
            {

                $connection.boot.priority = $priority

                if ($connectionType -eq 'fibrechannel') 
                {

			    If(-not ($arrayWwpn)){
				
                    $errorRecord = New-ErrorRecord HPOneView.ServerProfileConnectionException InvalidFcBootTargetParameters InvalidArgument 'New-HPOVServerProfileConnection' -Message "FC Boot specified, and no array target WWPN is provided." #-verbose
			        $PSCmdlet.ThrowTerminatingError($errorRecord)

			    }

                [Array]$bootTarget = NewObject -ProfileConnectionFcBootTarget
				$bootTarget.arrayWwpn = $arrayWwpn
				$bootTarget.lun       = $lun.ToString()

				[void]$connection.boot.targets.Add($bootTarget)

                #$connection.boot | Add-Member -NotePropertyName targets -NotePropertyValue $bootTargets

            }

            }

		    if ($PSboundParameters['userDefined'])
            {

			if ($connectionType -eq "Ethernet")
            {

    			$connection.macType = "UserDefined"
				$connection.mac     = $mac

			}

			if ($connectionType -eq "FibreChannel")
            {

				$connection.macType  = "UserDefined" 
				$connection.mac      = $mac 
                $connection.wwpnType = "UserDefined" 
				$connection.wwnn     = $wwnn
                $connection.wwpn     = $wwpn 

			}


		}

		    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Connection object: $($connection | ConvertTo-Json)"

            [void]$_Connections.Add($connection)
        }
        
        
    }

    End 
	{

		return $_Connections

	}

}


function New-HPOVServerProfileAttachVolume 
{

    # .ExternalHelp HPOneView.120.psm1-help.xml
	
	[CmdLetBinding(DefaultParameterSetName = "Default")]
    Param 
    (

        [parameter(Mandatory = $true,ParameterSetName = "Default")]
        [parameter(Mandatory = $True,ParameterSetName = "ManualLunIdType")]
        [parameter(Mandatory = $True,ParameterSetName = "DynamicVolAttachAuto")]
        [parameter(Mandatory = $True,ParameterSetName = "DynamicVolAttachManual")]
		[ValidateNotNullOrEmpty()]
	    [parameter(Position=0)]
		[Alias('id')]
        [int]$VolumeID = 1,

        [parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "Default")]
        [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "ManualLunIdType")]
		[ValidateNotNullOrEmpty()]
	    [parameter(Position=1)]
        [object]$Volume = $Null,

        [parameter(Mandatory = $true,ParameterSetName = "DynamicVolAttachAuto")]
        [parameter(Mandatory = $true,ParameterSetName = "DynamicVolAttachManual")]
        [object]$Name,

        [parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "DynamicVolAttachAuto")]
        [parameter(Mandatory = $true, ValueFromPipeline = $True, ParameterSetName = "DynamicVolAttachManual")]
        [object]$StoragePool,

        [parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachAuto")]
        [parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachManual")]
        [object]$StorageSystem,

        [parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachAuto")]
        [parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachManual")]
        [int64]$Capacity,

        [parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachAuto", HelpMessage = "Create Thick provisioned volume.")]
        [parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachManual", HelpMessage = "Create Thick provisioned volume.")]
        [switch]$full,

        [parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachAuto")]
        [parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachManual")]
        [switch]$permanent,

		[parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachAuto")]
        [parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachManual")]
        [switch]$shared,

        [parameter(Mandatory = $False,ParameterSetName = "Default")]
        [parameter(Mandatory = $True,ParameterSetName = "ManualLunIdType")]
        [parameter(Mandatory = $False,ParameterSetName = "DynamicVolAttachAuto")]
        [parameter(Mandatory = $True,ParameterSetName = "DynamicVolAttachManual")]
        [ValidateNotNullOrEmpty()]
	    [ValidateSet("Auto","Manual", IgnoreCase=$true)]
		[Alias('type')]
        [string]$LunIdType = "Auto",

        [parameter(Mandatory = $True,ParameterSetName = "ManualLunIdType")]
        [parameter(Mandatory = $True,ParameterSetName = "DynamicVolAttachManual")]		
        [ValidateRange(0,254)]
        [int]$LunID,

        [parameter(Mandatory = $false,ParameterSetName = "Default")]
        [parameter(Mandatory = $false,ParameterSetName = "ManualLunIdType")]
        [parameter(Mandatory = $false,ParameterSetName = "DynamicVolAttachAuto")]
        [parameter(Mandatory = $false,ParameterSetName = "DynamicVolAttachManual")]
		[ValidateRange(1,32)]
	    [parameter(Position=4)]
        [int]$ProfileConnectionID,

        [parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)
	
	Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}
		
		Write-Verbose -message ("ParameterSet: " + $PsCmdLet.ParameterSetName)

        if ($LunIdType -eq "Manual" -and -not $PSBoundParameters.ContainsKey("LunId")) 
        { 
        
            $errorRecord = New-ErrorRecord ArgumentNullException ParametersNotSpecified InvalidArgument 'New-HPOVServerProfileAttachVolume' -Message "'Manual' LunIdType was specified, but no LUN ID value was provided.  Please include the -LunId parameter or a value in the parameters position and try again." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        if ($LunIdType -eq "Auto" -and $PSBoundParameters.ContainsKey("LunId")) 
        { 
        
            $errorRecord = New-ErrorRecord ArgumentException ParametersSpecifiedCollision InvalidArgument 'New-HPOVServerProfileAttachVolume' -Message "'Auto' LunIdType was specified and a specific LUN ID were provided.  Please either specify -LunIdType 'Manual' or omit the -LunId parameter and try again." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

        #If volume parameter is passed as URI validate that only one appliance connection is present
        if ($PSBoundParameters['volume']) 
        {

            if (($volume -is [String] -and $volume.StartsWith($script:storageVolumeUri)) -or ($volume -is [String] -and $volume.StartsWith("/rest"))) 
            {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Volume URI was provided."

                if($ApplianceConnection.Count -ne 1)
                {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Multiple appliance connections identified with volume URI parameter."
                    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'New-HPOVServerProfileAttachVolume' -Message "The Volume URI parameter is invalid with multiple appliance connections." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                }

            }

        }

        #If StoragePool parameter is present and passed as URI validate only one appliance connection is present
        if ($PSBoundParameters['StoragePool']) 
        {
            
            if (($StoragePool -is [string] -and $StoragePool.StartsWith($script:storagePoolUri)) -or ($StoragePool -is [string] -and $StoragePool.StartsWith("/rest"))) 
            {

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage Pool URI provided: $StoragePool"

                if($ApplianceConnection.Count -ne 1)
                {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Multiple appliance connections identified with storage pool URI parameter."
                    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'New-HPOVServerProfileAttachVolume' -Message "The StoragePool URI parameter is invalid with multiple appliance connections." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
                }

            }

        }

        #Initialize collection to hold multiple volume attachments objects
        $_volumeAttachments = New-Object System.Collections.ArrayList

    }

	Process 
    {

        ForEach ($_Connection in $ApplianceConnection) 
        {

            $volumeAttachment = NewObject -ServerProfileStorageVolume
            $volumeAttachment.id                     = $VolumeID;
            $volumeAttachment.lunType                = $LunIdType;

            if ($PSBoundParameters['volume']) 
            {

                if ($volume -is [String] -and (-not($volume.StartsWith($script:storageVolumeUri)))) 
                {
                    
                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Volume Name was provided."

                    $tmpVolumeName = $volume

                    Try
                    {
                    
                        $volume = Get-HPOVStorageVolume $volume -appliance $_Connection

                    }

                    Catch
                    {

                        $PSCmdlet.ThrowTerminatingError($_)

                    }

                    if (-not($volume))
                    {

                        $errorRecord = New-ErrorRecord InvalidOperationException StorageVolumeResourceNotFound ObjectNotFound 'volume' -Message "Storage Volume name '$tmpVolumeName' was not found. Check the name and try again." #-verbose
                        $PSCmdlet.ThrowTerminatingError($errorRecord)

                    }
                    		
                }

                elseif ($volume -is [String] -and $volume.StartsWith($script:storageVolumeUri)) 
                {

                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Volume URI was provided."
                    
                    $tmpVolumeUri = $volume
                    
                    Try 
                    {

                        $volume = Send-HPOVRequest $volume -appliance $ApplianceConnection

                    }

                    catch
                    {

                        $PSCmdlet.ThrowTerminatingError($_)

                    }

                    if ($volume.errorCode -and [int]$volume.statusCode -eq 404) 
                    {

                        $errorRecord = New-ErrorRecord InvalidOperationException StorageVolumeResourceNotFound ObjectNotFound 'New-HPOVServerProfileAttachVolume' -Message "Storage Volume URI '$tmpVolumeUri' was not found. Check the value and try again." #-verbose
                        $PSCmdlet.ThrowTerminatingError($errorRecord)

                    }

                    elseif ($volume.errorCode) 
                    {

                        $errorRecord = New-ErrorRecord InvalidOperationException $volume.errorCode InvalidResult 'New-HPOVServerProfileAttachVolume' -Message $volume.message #-verbose
                        $PSCmdlet.ThrowTerminatingError($errorRecord)

                    }

                }

                elseif ($volume -is [String]) 
                {

                    #Volume parameter value is not valid, generate error.
                    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'New-HPOVServerProfileAttachVolume' -Message "The Volume parameter contains an invalid value.  Please check it and try again." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)
            
                }

                $volumeAttachment.volumeUri              = $volume.uri
                $volumeAttachment.volumeStoragePoolUri   = $volume.storagePoolUri
                $volumeAttachment.volumeStorageSystemUri = $volume.storageSystemUri

                #Needs to be part of the
                if ($LunIdType -eq "Manual") 
                { 
        
                    #$volumeAttachment | Add-Member -type NoteProperty -Name "lun" -value $LunID 
                    $volumeAttachment.lun = $LunID 
            
                }

            }

            #Ephmeral Volume Support
            elseif ($PSBoundParameters['StoragePool']) 
            {

                # // Remove $volumeAttachment = [PsCustomObject]@{...} after merging with 2.0.5.200  
                #$volumeAttachment = [PsCustomObject]@{
                #
                #    id                             = $VolumeID;
                #    volumeStoragePoolUri           = $Null;
                #    volumeStorageSystemUri         = $Null;
                #    volumeName                     = $Name;
                #    volumeProvisionType            = if ($PSBoundParameters['full']) { "Thick" } else { "Thin" } ;
                #    volumeProvisionedCapacityBytes = [string]([int64]$Capacity * 1GB);
                #    permanent                      = $true;
                #    volumeShareable                = $false;
                #    ApplianceConnection            = $null;
				#
                #}

                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating dynamic volume attach object."
                
                $volumeAttachment = NewObject -EphemeralStorageVolume
                $volumeAttachment.volumeStoragePoolUri           = $sp.uri
                $volumeAttachment.volumeStorageSystemUri         = $sp.storageSystemUri
                $volumeAttachment.volumeName                     = $Name
                $volumeAttachment.volumeProvisionType            = if ($PSBoundParameters['full']) { "Thick" } else { "Thin" }
                $volumeAttachment.volumeProvisionedCapacityBytes = [string]([int64]$Capacity * 1GB)

                switch ($StoragePool.GetType().Name) 
                {

                    "String" 
                    { 
                    
                        if ($StoragePool.StartsWith($script:storagePoolUri)) 
                        {
                        
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Storage Pool URI provided: $StoragePool"

                            Try
                            {
                                
                                $sp = Send-HPOVRequest $StoragePool -appliance $ApplianceConnection

                            }

                            Catch
                            {

                                $PSCmdlet.ThrowTerminatingError($_)

                            }
                        
                         }

                         elseif ($StoragePool.StartsWith("/rest/")) 
                         {
                         
                            #Invalid URI, so error
                            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid StoragePool URI provided: $StoragePool"

                            $errorRecord = New-ErrorRecord ArgumentException InvalidStoragePoolURI InvalidArgument 'New-HPOVServerProfileAttachVolume' -Message "The provided URI value for the -StoragePool parameter '$StroagePool' is invalid.  The StoragePool URI must begin with /rest/storage-pools.  Please check the value and try again." #-verbose
                            $PSCmdlet.ThrowTerminatingError($errorRecord)

                         }

                         else 
                         {
                         
                            if ($StorageSystem) 
                            {
                                
                                #If both storagepool and storagesystem were provided, look that up first

                                Try
                                {
                                
                                    $sp = Get-HPOVStoragePool -poolName $StoragePool -storageSystem $StorageSystem -appliance $ApplianceConnection

                                }

                                Catch
                                {

                                    $PSCmdlet.ThrowTerminatingError($_)

                                }
                            
                            }

                            else 
                            {

                                Try
                                {

                                    #If both storagepool and storagesystem were provided, look that up first
                                    $sp = Get-HPOVStoragePool -poolName $StoragePool -appliance $ApplianceConnection

                                }

                                Catch
                                {

                                    $PSCmdlet.ThrowTerminatingError($_)

                                }

                                if ($sp -and $sp.count -gt 1) {

                                    #Generate Error that StoragePool name is not unique and must supply the StorageSystem as well.
                                    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] {$($sp.count)} StoragePool resource found"

                                    $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException MultipleStoragePoolsFound InvalidResult 'New-HPOVServerProfileAttachVolume' -Message "Multiple StoragePool resources found with the name '$StoragePool'.  Please use the -StorageSystem parameter to specify the Storage System the Storage Pool is to be used." #-verbose
                                    $PSCmdlet.ThrowTerminatingError($errorRecord)

                                }

                            }
                        
                        }
                    
                    }

                    "PSCustomObject" 
                    { 
                    
                        #Validate the object
                        if ($StoragePool.category -eq 'storage-pools') { $sp = $StoragePool }

                        else 
                        {

                            $errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidStoragePoolCategory InvalidArgument 'New-HPOVServerProfileAttachVolume' -Message "Invalid -StoragePool parameter value.  Expected Resource Category 'storage-pools', received '$($VolumeTemplate.category)'." #-verbose
                            $PSCmdlet.ThrowTerminatingError($errorRecord)

                        }              
                    
                    }

                }

                $volumeAttachment.volumeStoragePoolUri   = $sp.uri
                $volumeAttachment.volumeStorageSystemUri = $sp.storageSystemUri           
                
		    	if($shared.IsPresent -and (-not($permanent.IsPresent))) 
                {
		    
		    		$errorRecord = New-ErrorRecord HPOneView.StorageVolumeResourceException InvalidVolumePermanentAndShareState InvalidArgument 'shared' -Message "Unable to create a shared epehemeral storage volume.  Please either remove the -shared switch, or include the -permanent switch to properly create a volume." #-verbose
                    $PSCmdlet.ThrowTerminatingError($errorRecord)

		    	}

                $volumeAttachment.permanent = $PSBoundParameters['permanent']
                #$volumeAttachment.permanent                      = $PSBoundParameters['permanent']

            }

            $volumeAttachment.applianceConnection = $_Connection
            
            [void]$_volumeAttachments.Add($volumeAttachment)
        
        }

	}

    End 
    {

        return $volumeAttachments

    }

}

#######################################################
# Index: 
#

function Search-HPOVIndex  {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param (
       [parameter (Mandatory = $false)]
       [string]$search = $null,

       [parameter (Mandatory = $false)]
       [string]$category = $null,

       [parameter (Mandatory = $false)]
       [int]$count = 50,

       [parameter (Mandatory = $false)]
       [int]$start = 0
    )

    Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Search-HPOVIndex' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    Process {

        #"/rest/index/resources?category=fc-networks=&count=50&start=0&query=name:%22fabric%20a%22"

        $uri = $indexuri + '?start=' + $start.ToString() + '&count=' + $count.ToString()
        
        if ($search) { $uri = $uri + "&userQuery=" + $search }
        
        if ($category) { $uri = $uri + "&category=" + $category }
        
        $uri = $uri.Replace(" ", "%20")
        
        $r = Send-HPOVRequest $uri
        
        if ($r.count -eq 0) {

            $errorRecord = New-ErrorRecord InvalidOperationException NoIndexResults ObjectNotFound 'Search-HPOVIndex' -Message "No Index results found." #-verbose
            $pscmdlet.WriteError($errorRecord)
        }

        else {
            #Set-DefaultDisplay $r.members -defProps 'name', 'category', 'attributes'
            
            $r.members
            "Done. {0} index resource(s) found." -f $r.count | write-verbose

        }
    }

}

function Search-HPOVAssociations {

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param 
	(

		[parameter (Mandatory = $false, Position = 0)]
		[ValidateNotNullorEmpty()]
		[string]$associationName = $null,

		[parameter (Mandatory = $false, Position = 1)]
		[Alias('startObjUri')]
		[ValidateNotNullorEmpty()]
		[object]$Parent = $null,

		[parameter (Mandatory = $false, Position = 2)]
		[Alias('endObjUri')]
		[ValidateNotNullorEmpty()]
		[object]$Child = $null,

		[parameter (Mandatory = $false, Position = 3)]
		[ValidateNotNullorEmpty()]
		[int]$count = 50,

		[parameter (Mandatory = $false, Position = 4)]
		[ValidateNotNullorEmpty()]
		[int]$start = 0

    )    

    Begin {

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError 'Search-HPOVIndex' -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }

    Process {

        $uri = $associationsUri + '?start=' + $start.ToString() + '&count=' + $count.ToString()

        if ($PSBoundParameters['AssociationName']) { $uri = $uri + "&name=" + $associationName }
        
        if ($PSBoundParameters['Parent']) 
		{
		
			# // Figure out parameter value type
				
			$uri = $uri + "&parentUri=" + $Parent 
		
		}
        
        if ($PSBoundParameters['Child']) 
		{
		
			# // Figure out parameter value type
				
			$uri = $uri + "&childUri=" + $Child 
		
		}
        
        $uri = $uri.Replace(" ", "%20")
        
        $r = Send-HPOVRequest $uri -Start $start -Count $count
        
        return $r
    }

}

#######################################################
# Tasks:
#

function Get-HPOVTask 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = "Default")]
	Param 
	(

		[parameter(Mandatory = $false, HelpMessage = "Enter the name of the Task", ParameterSetName = "Default")]
        [parameter(Mandatory = $false, HelpMessage = "Enter the name of the Task", ParameterSetName = "ResourceCategory")]
		[ValidateNotNullorEmpty()]
        [Alias("name")]
		[string]$TaskName = $Null,

        [parameter(Mandatory = $false, ValueFromPipeline = $true, HelpMessage = "Enter the resource you want to find tasks associated with.", ParameterSetName = "Default")]
        [ValidateNotNullorEmpty()]
		[Object]$Resource = $Null,

        [parameter(Mandatory = $false, HelpMessage = "Please specify the Resource Category the task (i.e. 'ethernet-networks', 'fc-networks', 'server-profiles', etc..)", ParameterSetName = "ResourceCategory")]
        [ValidateNotNullorEmpty()]
		[Alias("Category")]
        [String]$ResourceCategory = $Null,

        [parameter(Mandatory = $false, HelpMessage = "Please specify the State of the task (i.e. Completed.)", ParameterSetName = "Default")]
        [parameter(Mandatory = $false, HelpMessage = "Please specify the State of the task (i.e. Completed.)", ParameterSetName = "ResourceCategory")]
        [ValidateNotNullorEmpty()]
		[ValidateSet("Unknown","New","Running","Suspended","Terminated","Killed","Completed","Error","Warning")]
        [string]$State = $Null,

        [parameter(Mandatory = $false, HelpMessage = "Please specify the amount of task objects to return.", ParameterSetName = "Default")]
        [parameter(Mandatory = $false, HelpMessage = "Please specify the amount of task objects to return.", ParameterSetName = "ResourceCategory")]
        [ValidateScript({ if ([int]$_ -gt -1) {$true} else {Throw "The Count Parameter value '$_' is invalid."}})]
        [Int]$Count = 0,

        [parameter(Mandatory = $false, ValueFromPipelineByPropertyName)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)
	
	Begin 
    {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

        ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
            {
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
            {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
            {

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_TaskCollection = New-Object System.Collections.ArrayList

    }
	
    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			$uri = $allNonHiddenTaskUri

			if ($PSBoundParameters['TaskName']) 
			{ 
        
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Name parameter value: $($TaskName)"

				$Uri += "?filter=name='$TaskName'" 
        
			}

			if ($PSBoundParameters['State']) 
			{ 
        
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] State parameter value: $($State)"

				if ($Uri) 
				{ 
					
					$Uri += "&filter=taskState='$State'" 
				
				}

				else 
				{
					
					$Uri = "?filter=taskState='$State'" 
				
				}
			
			}

			if ($PSBoundParameters['Count']) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Count parameter value: $($Count)"

				if ($Uri) 
				{ 
					
					$Uri += "&count=$Count&sort=created:descending" 
				
				}

				else 
				{ 
					
					$Uri = "?count=$Count&sort=created:descending"
					
				} 

			}


			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Parameter Set Name resolved to: $($PSCmdlet.ParameterSetName)"

			switch ($PSCmdlet.ParameterSetName) 
			{

			    "Default" 
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resource value:  $Resource"
			        
					if ($PSBoundParameters['Resource']) 
					{

			            #If the Resource value is a Name
			            if (($Resource -is [string]) -and (-not($Resource.StartsWith("/rest/"))))
						{

			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resource parameter Name: $($Resource)"

			                if ($Uri) 
							{ 
								
								$Uri += "&filter=associatedResource.resourceName='$Resource'" 
							
							}

			                else 
							{ 
								
								$Uri = "?filter=associatedResource.resourceName='$Resource'" 
							
							}

			            }

			            #Checking if the input is System.String and IS a URI
			            elseif (($Resource -is [string]) -and ($Resource.StartsWith("/rest/"))) 
						{
			    
			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resource parameter URI: $($Resource)"

			                if ($Uri) 
							{ 
								
								$Uri += "&filter=associatedResource.resourceUri='$Resource'" 
							
							}
			                
							else 
							{ 
								
								$Uri = "?filter=associatedResource.resourceUri='$Resource'" 
							
							}
			
			            }

			            #Checking if the input is PSCustomObject, and the category type is not null, which would be passed via pipeline input
			            elseif (($Resource -is [PSCustomObject]) -and ($Resource.category)) 
						{

			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resource is an object: '$($Resource.name)' of type '$($Resource.Category)'"

			                Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Using URI value ($($Resource.Uri)) from input object."

			                if ($Uri) 
							{ 
								
								$Uri += "&filter=associatedResource.resourceUri='$($Resource.Uri)'" 
							
							}

			                else 
							{ 
								
								$Uri = "?filter=associatedResource.resourceUri='$($Resource.Uri)'" 
							
							}
			            
						}

						else 
						{
							 
			                $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Get-HPOVTask' -Message "The Resource input parameter was not recognized as a valid type or format." #-verbose
			                $pscmdlet.ThrowTerminatingError($errorRecord)
							
						}
						
			        }

			    } #End Default
			    
			    "ResourceCategory" 
				{ 
			    
			        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resource Category was specified:  $($ResourceCategory)"

			        if ($Uri) 
					{
						
						 $Uri += "&filter=associatedResource.resourceCategory='$($ResourceCategory)'" 
					}

			        else 
					{
						
						$Uri = "?filter=associatedResource.resourceCategory='$($ResourceCategory)'" 
					
					}

			    } #End ResourceCategory

			} #End switch

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] URI: $($Uri)"

			if ($Count -gt 0 ) 
			{ 
			
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting $($Count) task objects." 
		
			}

			else 
			{ 
			
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] ($($Count)) Returning all available task objects." 
		
			}


			try 
			{
        
				$_tasks = Send-HPOVRequest $Uri -Hostname $_Connection

				if ($_tasks.count -eq 0) 
				{ 
                
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No tasks found on Appliance '$($_Connection.Name)'."
                    
				}

				else 
				{ 
                
					$_tasks.members | % { 
							
						$_.PSObject.TypeNames.Insert(0,"HPOneView.Appliance.TaskResource") 
						
						[void]$_TaskCollection.Add($_)
						
					}
 
				}

			}

			catch 
			{

				$pscmdlet.ThrowTerminatingError($_)
			
			}

		}

    }    

    End
	{

		"[$($MyInvocation.InvocationName.ToString().ToUpper())] Done. {0} task resource(s) found." -f $_TaskCollection.count | write-verbose

		Return $_TaskCollection

    }

}

function Wait-HPOVTaskStart  
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param 
	(

		[parameter(Mandatory, ValueFromPipeline, HelpMessage = "Enter the task URI or task object")]
		[Alias('taskuri')]
        [object]$task,

        [parameter(Mandatory = $false,HelpMessage = "Provide the resource name the task is for, which is displayed in the Write-Progress output.")]
        [string]$resourceName,

        [parameter(Mandatory = $false,HelpMessage = "Enter the new value for the global parameter")]
        [timespan]$timeout = $script:defaultTimeout,

		[parameter(ValueFromPipelineByPropertyName, ValueFromPipeline = $False, Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	) 

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if (-not $PSBoundParameters['task']) { $PipelineInput = $True }

		if ($Task -is [String] -and ($ApplianceConnection.Count -gt 1) -and (-not($PipelineInput)))
		{
		
			$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Task' -Message "The -Task parameter requires an Appliance to be specified.  Please provide the Appliance Connection object or name by using the -ApplianceConnection parameter." #-verbose
			$PSCmdLet.ThrowTerminatingError($errorRecord)

		}

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		elseif (-not($PipelineInput))
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}
		
		$TaskCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

        if ($PipelineInput) 
		{ 
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Task resource passed via pipeline input." 
		
		}

        #Validate the task object
        if (($task -is [String]) -and ($task.StartsWith($script:taskUri))) 
		{
            
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Task is System.String $($task)"
        
		}

        elseif (($task -is [PSCustomObject] -or $task -is [HPOneView.Appliance.TaskResource]) -and ($task.category -ieq 'tasks')) 
		{
        
		    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Task is $($task.GetType()). Task URI: $($task.uri)"

            $ApplianceConnection = $task.ApplianceConnection

			$task = $task.uri
        
		}

        else 
		{

            $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Wait-HPOVTaskStart' -Message "Invalid task.  Please verify the task object you are passing and try again." #-verbose
            $PSCmdLet.ThrowTerminatingError($errorRecord)

        }

        $sw = [diagnostics.stopwatch]::StartNew()

		Try
		{

			$taskObj = Send-HPOVRequest $task -HostName $ApplianceConnection.name

		}
        
		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}
        
		$i = 0

        if ($resourceName) 
		{ 
			
			$taskname = "Waiting for '$($taskObj.name) $resourceName' task to start"
		
		}

        else 
		{ 
			
			$taskName = "Waiting for '$($taskObj.name)' task to start" 
		
		}

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Waiting for $taskName to start..."

        while ($taskObj.taskState -and ($taskObj.taskState -ieq "Adding" -or $taskObj.taskState -ieq "New" -or $taskObj.taskState -ieq "Starting")) 
		{

			Try
			{

				$taskObj = Send-HPOVRequest $task -Hostname $taskObj.ApplianceConnection.Name

			}

			Catch
			{
			
				$PSCmdlet.ThrowTerminatingError($_)
			
			}
            
            if ($sw.Elapsed -gt $timeout) 
			{
                
                $errorRecord = New-ErrorRecord InvalidOperationException TaskWaitExceededTimeout OperationTimeout  'Wait-HPOVTaskStart' -Message "The time-out period expired before waiting for task '$taskName' to start." #-verbos
                $PsCmdlet.ThrowTerminatingError($errorRecord)

            }

            #Display Progress Bar

			#Display the task status
			if ($taskObject.taskStatus)
			{

				$progressStatus = $taskObject.taskStatus

			}
						
			elseif ($taskObject.taskState)
			{

				$progressStatus = $taskObject.taskState

			}

			else
			{

				$progressStatus = "Waiting $($taskObject.Name)"

			}

			if ($taskObj.expectedDuration) 
			{

				$percentComplete = ($i / $taskObj.expectedDuration * 100)

			}

			else
			{

				$percentComplete = $taskObj.percentComplete 

			}
            
            #Handle the call from -Verbose so Write-Progress does not get borked on display.
            if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
			{ 
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Skipping Write-Progress display."
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Task Status: '$taskName' {$progressStatus} $($percentComplete)% Complete"

			}
             
			else 
			{

				Write-Progress -activity $taskName -status $progressStatus -percentComplete $percentComplete
                
            }

            Start-Sleep 1

            $i++

        }

		Write-Progress -activity $taskName -Completed

		[void]$TaskCollection.Add($taskObj)

    }

    End 
	{
    
		Return $TaskCollection

    }

}

function Wait-HPOVTaskComplete 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param
	(

		[parameter(Position = 0, ValueFromPipeline, Mandatory, HelpMessage = "Enter the task URI or task object")]
		[Alias('TaskUri')]
        [Object]$Task,

        [parameter(Position = 1, Mandatory = $false, HelpMessage = "Enter the new value for the global parameter")]
        [timespan]$timeout = $script:defaultTimeout,

		[parameter(ValueFromPipelineByPropertyName, ValueFromPipeline = $False, Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = $null

	)

    Begin 
    {
        
        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if (-not($PSBoundParameters['task'])) { $PipelineInput = $True }
		
		#Task isn't provided by pipeline, but check for ApplianceConnection property
		else
		{

			if ((-not($task.ApplianceConnection)) -and (-not($task.ApplianceConnection -is [PSCustomObject])))
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Task' -TargetType 'PSObject' -Message "The -Task parameter object does not contain the required property 'ApplianceConnection'.  Please provide the Appliance Connection object or name by using the -ApplianceConnection parameter, or validate the input object contains a valid 'ApplianceConnection' property value." #-verbose
				$PSCmdLet.ThrowTerminatingError($errorRecord)

			}

			else
			{

				$ApplianceConnection = $task.ApplianceConnection

			}

		}

		if ($Task -is [String] -and (-not($ApplianceConnection)))
		{
		
			$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument 'Task' -Message "The -Task parameter requires an Appliance to be specified.  Please provide the Appliance Connection object or name by using the -ApplianceConnection parameter." #-verbose
			$PSCmdLet.ThrowTerminatingError($errorRecord)

		}

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		if (-not($PipelineInput))
		{

			ForEach ($_Connection in $ApplianceConnection) 
			{

				Try 
				{
	
					$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}

		}

		elseif (-not($PipelineInput))
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$TaskCollection          = New-Object System.Collections.ArrayList
		$FinishedTasksCollection = New-Object System.Collections.ArrayList

		$i = 1

    }

    Process 
	{

        if ($PipelineInput -and $task) { Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Task resource passed via pipeline input." }

		#Validate the task object 
		ForEach ($_task in $Task)
		{

			if (($_task -is [String]) -and ($_task.StartsWith($script:taskUri))) 
			{

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Task is System.String $($_task)"

				#Use to track -ID in Write-Progress
				[void]$TaskCollection.Add(([PSCustomObject]@{id = $i; uri = $_task; taskState = $Null; ApplianceConnection = $ApplianceConnection }))

			}

			elseif ($_task -is [PSCustomObject] -and $_task.category -ieq 'tasks')
			{

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Task is $($_task.GetType()). Task URI: $($_task.uri)"
				
				#Use to track -ID in Write-Progress
				$_task | Add-Member -NotePropertyName id -NotePropertyValue $i -force

				[void]$TaskCollection.Add($_task)

			}

			else 
			{

			    $errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument $_task -Message "Invalid task '$_task'.  Please verify the task object you are passing and try again." #-verbose
			    $PSCmdLet.ThrowTerminatingError($errorRecord)

			}

			$i++
			
		}

	}

	End
	{

		$_taskCollection = $TaskCollection.Clone()

		#Start Stopwatch
		$sw = [diagnostics.stopwatch]::StartNew()

		while ($_taskCollection.Count -gt 0 -and $sw.Elapsed -lt $timeout)
		{

			if ($sw.Elapsed -gt $timeout) 
			{
                #Tear down Write-Progress
				1..$_taskCollection.count | % { Write-Progress -id $_ -Completed }

				#Return 'finished' collection to caller then display error
				$FinishedTasksCollection

				#UPDATE ERROR MESSAGE to state timeout waiting for tasks to complete
                $errorRecord = New-ErrorRecord InvalidOperationException TaskWaitExceededTimeout OperationTimeout  'Wait-HPOVTaskComplet' -Message "The time-out period expired before waiting for task '$taskName' to start." #-verbos
                $PsCmdlet.ThrowTerminatingError($errorRecord)

            }

			ForEach ($_task in $_taskCollection)
			{

				#Get task object from API
				Try
				{

					$taskObj = Send-HPOVRequest $_task.uri -Hostname $_task.ApplianceConnection.Name

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
			
				#Task is in a finished state
				if ($script:taskFinishedStates -contains $taskObj.taskState)
				{

					#Remove task object from base arraylist
					$ndx = [array]::IndexOf($TaskCollection, $_task)

					[void]$TaskCollection.RemoveAt($ndx)

					#Add Task Object from API to return back to caller
					[void]$FinishedTasksCollection.Add($taskObj)

					if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
					{
						
						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($taskObj.name) [$($_task.ApplianceConnection.Name)$($_task.uri)] Task finished. "  
					
					}

					else {
					
						Write-Progress -id $_task.id -activity "$($taskObj.name) ($($taskObj.associatedResource.resourceName))" -Completed
					
					}

				}

				#Display Progress Bar
            
				#Handle the call from -Verbose so Write-Progress does not get borked on display.
				if ($PSBoundParameters['Verbose'] -or $VerbosePreference -eq 'Continue') 
				{ 
					
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Skipping Write-Progress display."  
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] CMDLET Task Track ID:$($_task.id)`nTask Object Name: $($taskObj.name)`nAssociated Resource Name: $($taskObj.associatedResource.resourceName)`nPrecent Complete: $($taskObj.percentComplete)"  
				
					If ($taskObj.progressUpdates[-1].statusUpdate)
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Child tasks - Child task: $($_task.id + 100) ParentId: $($_task.id) $($taskObj.progressUpdates[-1].statusUpdate) {$($taskObj.taskStatus)}"

					}

				}
				 
				else 
				{

					# // Need to re-write this logic.  Need to figure out progressUpdates versus taskStatus versus taskState, and display -status correctly
					# // Done?

				    #Display the task status, and associated child tasks
				    if ($taskObj.progressUpdates) 
					{ 

				        #Child task is executing, display reported status
				        If ($taskObj.progressUpdates[-1].statusUpdate) 
						{

				            Write-Progress -id ($_task.id + 100) -ParentId $_task.id -activity "$($taskObj.name) ($($taskObj.associatedResource.resourceName))" -status $taskObj.progressUpdates[-1].statusUpdate -percentComplete $taskObj.computedPercentComplete
				        
						}

				        #There is a child task, but it's statusUpdate value is NULL, so just display the parent task status
				        else 
						{
				         
				            if ($taskObject.taskStatus)
							{

								$progressStatus = $taskObject.taskStatus

							}
							
							else
							{

								$progressStatus = $taskObject.taskState

							}

							Write-Progress -activity "$($taskObj.name) ($($taskObj.associatedResource.resourceName))" -status $progressStatus -percentComplete $taskObj.percentComplete
				        
						}

				    }

				    #Just display the task status, as it has no child tasks
				    elseif ($taskObj.taskStatus) 
					{
						
						Write-Progress -activity $taskObj.name -status $taskObj.taskStatus -percentComplete $taskObj.percentComplete 
					
					}
				    
					else 
					{
						
						Write-Progress -activity $taskObj.name -status $taskObj.taskState -percentComplete $taskObj.percentComplete 
					
					}

				}

				#Start-Sleep -Seconds 2

			}

			#Reclone $_taskCollection object to update array with current task ArrayList
			$_taskCollection = $TaskCollection.Clone()

		}

		Return $FinishedTasksCollection

    }

}

#######################################################
# Securty and LDAP Functions
#

function Get-HPOVUser 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdLetBinding()]
    Param 
	(

        [Parameter(Mandatory = $false)]
		[ValidateNotNullorEmpty()]
        [string]$Name = $null,
		
		[parameter(Mandatory = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )
	
    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_UserCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Try
			{

				$_users = Send-HPOVRequest ($usersUri+"?sort=username:asc") -Hostname $_Connection.Name 

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Found $($_users.count) user resources on '$($_Connection.Name)' appliance."

			ForEach ($u in $_users.members) 
			{

				$u.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.User')

				[void]$_UserCollection.Add($u)

            }

        }

	}

	End 
	{

        if ($Name) 
		{

            $_UserCollection = $_UserCollection | ? userName -like $Name

        }

        if ($_UserCollection.count -eq 0 -and $Name) 
		{
				
            $errorRecord = New-ErrorRecord HPOneView.Appliance.UserResourceException UserNotFound ObjectNotFound "Name" -Message "Username `'$Name`' was not found. Please check the spelling, or create the user and try again."
			$pscmdlet.ThrowTerminatingError($errorRecord)

		}

		"Done. {0} user(s) found." -f $_UserCollection.count | write-verbose 
		
	    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] returning account resource objects."  
		
		Return $_UserCollection    

    }

}

function New-HPOVUser 
{
	 
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param 
	(

        [parameter(Mandatory = $true)]
        [string]$UserName, 

        [parameter(Mandatory = $true)]
        [string]$Password, 

        [parameter(Mandatory = $false)]
        [string]$FullName, 

        [parameter(Mandatory = $true)]
        [Array]$Roles = @(),

        [parameter(Mandatory = $false)]
        [validatescript({$_ -as [Net.Mail.MailAddress]})]
        [string]$EmailAddress = $null,

        [parameter(Mandatory = $false)] 
        [string]$officePhone = $null,
     
        [parameter(Mandatory = $false)]
        [string]$mobilePhone = $null,
     
        [parameter(Mandatory = $false)]
        [switch]$enabled,

		[parameter(Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"


		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}
		
		$_UserStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Validating requested role values"
			
			$_unsupportedRoles = New-Object System.Collections.ArrayList
			$_NewUserRoles     = New-Object System.Collections.ArrayList

			#Validate roles provided are allowed.
			foreach ($_role in $Roles) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing role: $_role"

				if (-not ((${Global:ConnectedSessions} | ? Name -EQ $_Connection.Name).ApplianceSecurityRoles -contains $_role)) 
				{ 
				
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid or unsupported"

					[void]$_unsupportedRoles.Add($_role)
			
				}

				else
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Supported"

					[void]$_NewUserRoles.Add($_role)

				}

			}

			if ($_unsupportedRoles.count -ge 1) 
			{ 
        
				$errorRecord = New-ErrorRecord ArgumentException UnsupportedRolesFound InvalidArgument $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "The '$($_unsupportedRoles -join ", ")' role(s) is/are not supported or the correct names.  Please validate the -roles parameter contains one or more valid roles.  Allowed roles are: $((${Global:ConnectedSessions} | ? Name -EQ $_Connection.Name).ApplianceSecurityRoles -join ", ")"
				$PSCmdlet.ThrowTerminatingError($errorRecord)            
            
			}

			$_user = NewObject -UserAccount

			$_user.userName     = $userName
			$_user.fullName     = $fullName
			$_user.password     = $password
			$_user.emailAddress = $emailAddress
			$_user.officePhone  = $officePhone 
			$_user.mobilePhone  = $mobilePhone
			$_user.enabled      = $enabled.IsPresent
			$_user.roles        = $_NewUserRoles

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User requested to create:  $($_user | out-string )"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to create $($_user.userName) user"
			
			Try
			{

				$_resp = Send-HPOVRequest $usersUri POST $_user -Hostname $_Connection.Name

			}
			
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$_resp.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.User')

			[void]$_UserStatus.Add($_resp)

		}

    }

	End
	{
		
		Return $_UserStatus

    }

}

function Set-HPOVUser 
{
	 
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = 'default')]
	Param 
	(

		[parameter(Position = 0, Mandatory, ValueFromPipeline, ParameterSetName = 'Pipeline')]
		[ValidateNotNullorEmpty()]
		[Object]$UserObject,

        [parameter(Position = 0, Mandatory = $true, ParameterSetName = 'default')]
		[ValidateNotNullorEmpty()]
        [string]$UserName, 

        [parameter(Position = 1, Mandatory = $false, ParameterSetName = 'default')]
		[parameter(Position = 1, Mandatory = $false, ParameterSetName = 'Pipeline')]
        [ValidateNotNullorEmpty()]
		[string]$Password, 

		[parameter(Position = 2, Mandatory = $false, ParameterSetName = 'default')]
        [parameter(Position = 2, Mandatory = $false, ParameterSetName = 'Pipeline')]
        [ValidateNotNullorEmpty()]
		[string]$FullName, 

		[parameter(Position = 3, Mandatory = $false, ParameterSetName = 'default')]
        [parameter(Position = 3, Mandatory = $false, ParameterSetName = 'Pipeline')]
        [ValidateNotNullorEmpty()]
		[Array]$Roles,

		[parameter(Position = 4, Mandatory = $false, ParameterSetName = 'default')]
        [parameter(Position = 4, Mandatory = $false, ParameterSetName = 'Pipeline')]
        [validatescript({$_ -as [Net.Mail.MailAddress]})]
        [string]$EmailAddress,

		[parameter(Position = 5, Mandatory = $false, ParameterSetName = 'default')]
        [parameter(Position = 5, Mandatory = $false, ParameterSetName = 'Pipeline')] 
        [ValidateNotNullorEmpty()]
		[string]$OfficePhone,
     
		[parameter(Position = 6, Mandatory = $false, ParameterSetName = 'default')]
        [parameter(Position = 6, Mandatory = $false, ParameterSetName = 'Pipeline')]
        [ValidateNotNullorEmpty()]
		[string]$MobilePhone,
     
		[parameter(Position = 7, Mandatory = $false, ParameterSetName = 'default')]
        [parameter(Position = 7, Mandatory = $false, ParameterSetName = 'Pipeline')]
        [alias('enable')]
		[ValidateNotNullorEmpty()]
        [switch]$Enabled,

		[parameter(Position = 8, Mandatory = $false, ParameterSetName = 'default')]
        [parameter(Position = 8, Mandatory = $false, ParameterSetName = 'Pipeline')]
        [alias('disable')]
		[ValidateNotNullorEmpty()]
        [switch]$Disabled,

		[parameter(Mandatory = $false, ValueFromPipelineByPropertyName, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[ValidateNotNullorEmpty()]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		#No need to validate ApplianceConnection, as object is passed via pipeline.
		if ($PSCmdlet.ParameterSetName -eq 'Pipeline')
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Pipeline input."
			
			$PipelineInput = $True

		}

		else
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

			$c = 0

			ForEach ($_Connection in $ApplianceConnection) 
			{

				Try 
				{
	
					$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}
						
		}

		$_UsersToUpdate = New-Object System.Collections.ArrayList
		$_UserStatus    = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if ($PipelineInput)
		{

			#Validate pipeline input is user object
			if (-not($UserObject -is [PSCustomObject]) -and -not($UserObject.category -eq 'users'))
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid UserObject provided: $($UserObject | FL * | Out-String)"

				$errorRecord = New-ErrorRecord HPOneView.Appliance.UserResourceException InvalidUserObject InvalidArgument "UserObject" -TargetType 'PSObject' -Message "The UserObject parameter value is not a valid User object resource.  Object category provided '$($UserObject.category)', allowed object category value 'users'.  Please verify the input object and try again."
				$pscmdlet.ThrowTerminatingError($errorRecord)

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding UserObject to process collection: $($UserObject | FL * | Out-String)"

			[void]$_UsersToUpdate.Add($UserObject)

		}

		else
		{

			ForEach ($_Connection in $ApplianceConnection)
			{

				try 
				{ 
					
					$_UserObject = Get-HPOVUser $userName -ApplianceConnection $_Connection
				
				}
        
				#If not found, throw error
				catch [HPOneView.Appliance.UserResourceException]
				{
				
				    #Generate terminating error
				    $errorRecord = New-ErrorRecord HPOneView.Appliance.UserResourceException UserNotFound ObjectNotFound 'UserName' -Message "Username `'$userName`' was not found. Please check the spelling, or create the user and try again."
				    $pscmdlet.ThrowTerminatingError($errorRecord)
				
				}

				Catch
				{

					$pscmdlet.ThrowTerminatingError($_)

				}

				[void]$_UsersToUpdate.Add($_UserObject)

			}

		}

	}

	End
	{

		ForEach ($_User in $_UsersToUpdate)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing User: $($_User.userName)"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Original User object: $($_User | FL * | Out-String)"

			$_User | Add-Member -NotePropertyName type -NotePropertyValue 'UserAndRoles'

			switch ($PSBoundParameters.keys) 
			{

				"Password" 
				{ 

					if ($_User.userName -eq (${Global:ConnectedSessions} | ? Name -eq $_User.ApplianceConnection.Name).UserName) 
					{

					    write-warning "This CMDLET will not modify the password for your account.  Please use the Set-HPOVUserPassword CMDLET to update your user account password.  Password update will not be processed."

					}  
						          
					else 
					{ 
						
						$_User | Add-Member -NotePropertyName password -NotePropertyValue $Password -force
						
					} 
                
				}

				"fullName" 
				{ 
					
					$_User.fullName = $FullName
				
				}

				"roles" 
				{

					if ($_User.userName -eq (${Global:ConnectedSessions} | ? Name -eq $_User.ApplianceConnection.Name).UserName) 
					{

					    write-warning "Unable to modify roles for your account, as you must be authenticated to the appliance with a different administrator account.  Roles will not be processed."

					}

					else 
					{
					
					    $_User | add-member -NotePropertyName replaceRoles -NotePropertyValue $True -force

					    #Validate roles provided are allowed.
					    $_unsupportedRoles = New-OBject System.Collections.ArrayList

					    #Validate roles provided are allowed.
						foreach ($_role in $Roles) 
						{

							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing role: $_role"

							if (-not ((${Global:ConnectedSessions} | ? Name -EQ $_Connection.Name).ApplianceSecurityRoles -contains $_role)) 
							{ 
							
								Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid or unsupported"

								[void]$_unsupportedRoles.Add($_role)
						
							}

							else
							{

								Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Supported"

								[void]$_NewUserRoles.Add($_role)

							}

						}

						if ($_unsupportedRoles.count -ge 1) 
						{ 
        
							$errorRecord = New-ErrorRecord ArgumentException UnsupportedRolesFound InvalidArgument $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "The '$($_unsupportedRoles -join ", ")' role(s) is/are not supported or the correct names.  Please validate the -roles parameter contains one or more valid roles.  Allowed roles are: $((${Global:ConnectedSessions} | ? Name -EQ $_Connection.Name).ApplianceSecurityRoles -join ", ")"
							$PSCmdlet.ThrowTerminatingError($errorRecord)            
						
						}

					    #Need to make sure role name is first letter capitalized only.
					    $i = 0

					    foreach ($_role in $_NewUserRoles) 
						{

					        $_NewUserRoles[$i] = $_role.substring(0,1).ToUpper()+$_role.substring(1).tolower()

					        $i++

					    }

						$_User.roles = $_NewUserRoles

					}

				}

				"emailAddress" 
				{ 
					
					$_User.emailAddress = $EmailAddress
				
				}

				"officePhone" 
				{ 
					
					$_User.officePhone = $OfficePhone
				
				}

				"mobilePhone" 
				{ 
					
					$_User.mobilePhone = $MobilePhone
				
				}

				"enabled" 
				{ 
                
				    if ($_User.userName -eq (${Global:ConnectedSessions} | ? Name -eq $_User.ApplianceConnection.Name).UserName) 
					{

				        write-warning "This CMDLET will not modify the state for your account.  Please authenticate to the appliance with a different administrator account.  Account state will not be processed."

				    }

				    else 
					{ 
						
						$_User.enabled = $true
					
					}

				}

				"disabled" 
				{ 

				    if ($_User.userName -eq (${Global:ConnectedSessions} | ? Name -eq $_User.ApplianceConnection.Name).UserName) 
					{

				        write-warning "This CMDLET will not modify the state for your account.  Please authenticate to the appliance with a different administrator account.  Account state will not be processed."

				    }

				    else 
					{ 
						
						$_User.enabled = $false

					}

				}

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updated User object: $($_User | FL * | Out-String)"

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to update `'$($_User.userName)`' user at '$usersUri'"

			Try
			{

				$_resp = Send-HPOVRequest $usersUri PUT $updateUser -Hostname $_User.ApplianceConnection.Name

			}
            
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$_resp.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.User')

			[void]$_UserStatus.Add($_resp)

		}
        
		Return $_UserStatus

	}

}

function Set-HPOVUserPassword 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	Param 
	(

        [parameter(Position = 0, Mandatory = $false, ValueFromPipeline = $false)]
		[ValidateNotNullorEmpty()]
		[Alias('CurrentPassword')]
        [String]$Current,

        [parameter(Position = 1, Mandatory = $false, ValueFromPipeline = $False)]
        [ValidateNotNullorEmpty()]
		[Alias('NewPassword')]
		[String]$New,

		[parameter(Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"


		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		

		#Prompt user for current password if not provided
        if (-not ($Current)) 
		{ 
        
            $Current                  = Read-Host -AsSecureString "Current"
            $_decryptCurrentPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($currentPassword))

        }

        else 
		{ 
			
			$_decryptCurrentPassword = $Current 
		
		}

        #Prompt user for new password if not provided
        if (-not($New)) 
		{ 
        
            Do 
			{

                $New                 = Read-Host -AsSecureString "New"
                $_CompareNewPassword = Read-Host -AsSecureString "Re-type New"
                
                #Compare provided password matches
                $_decryptNewPassword        = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($New))
                $_decryptcompareNewPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($_CompareNewPassword))

                if (-not ($_decryptNewPassword -eq $_decryptcompareNewPassword))
				{

                    $errorRecord = New-ErrorRecord HPOneview.Appliance.PasswordMismatchException NewPasswordsDoNotMatch InvalidResult 'New' -Message "The new password values do not match. Please check the value and try again." #-verbose
                    $PSCmdlet.WriteError($errorRecord)

                }

                if (-not ($_decryptNewPassword.length -ge 8) -or -not ($_decryptcompareNewPassword -ge 8)) 
				{
                
                    $errorRecord = New-ErrorRecord HPOneview.Appliance.PasswordMismatchException NewPasswordLengthTooShort InvalidResult 'New' -Message "The new password value do not meet the minimum character length of 8 characters. Please try again." #-verbose
                    $PSCmdlet.WriteError($errorRecord)

                }

            } Until ($_decryptNewPassword -eq $_decryptcompareNewPassword -and $_decryptNewPassword.length -ge 8)

        }

        else 
		{

            $_decryptNewPassword = $New

        }


		$_UserStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			#Get current user object
			Try
			{

				$_CurrentUserObj = Get-HPOVUser $_Connection.UserName -ApplianceConnection $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
			
			$_CurrentUserObj | add-member -notepropertyname currentPassword -NotePropertyValue $decryptCurrentPassword
			$_CurrentUserObj | add-member -notepropertyname password -NotePropertyValue $decryptNewPassword
			$_CurrentUserObj | add-member -notepropertyname replaceRoles -NotePropertyValue $false
			$_CurrentUserObj | add-member -notepropertyname type -NotePropertyValue UserAndRoles

			Try
			{

				$_resp = Send-HPOVRequest $usersUri PUT $_CurrentUserObj -Hostname $_Connection

			}
			
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			if ($_resp.category -eq 'users')
			{

				$_resp.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.User')

			}

			[void]$_UserStatus.Add($_resp)

		}     

    }

    End 
	{

        Return $_UserStatus

    }

}

function Remove-HPOVUser 
{
	 
    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = "default", SupportsShouldProcess = $True, ConfirmImpact = 'High')]
	param
	(

		[parameter(Mandatory, ValueFromPipeline, HelpMessage = "Enter the User Account Name to delete from the appliance", Position = 0, ParameterSetName = "default")]
		[ValidateNotNullOrEmpty()]
		[alias("u","user",'UserName')]
		[Object]$Name,
	
		[parameter(Mandatory = $False, ValueFromPipelineByPropertyName, ParameterSetName = "ApplianceRequired", position = 1)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = $Null

    )

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		if (-not($PSBoundParameters['Name'])) { $PipelineInput = $True }

		$_TaskCollection = New-Object System.Collections.ArrayList
		$_UserCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if ($PipelineInput) 
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User Object provided: $($Name | FL * | Out-String)"

			If ('users' -contains $Name.category)
			{

				If (-not($Name.ApplianceConnection))
				{

					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "User:$($Name.Name)" -TargetType PSObject -Message "The User object resource provided is missing the source ApplianceConnection property.  Please check the object provided and try again." #-verbose
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				[void]$_UserCollection.Add($Name)

			}

			else
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "User:$($Name.Name)" -TargetType PSObject -Message "The User object resource is not an expected category type [$($Name.category)].  The allowed resource category type is 'users'.  Please check the object provided and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

		}

		else 
		{

			ForEach ($_Connection in $ApplianceConnection)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance $($_Connection.Name) (of $($ApplianceConnection.Count))"

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing User Name $($Name)"

				Try
				{

					$_User = Get-HPOVUser $Name -ApplianceConnection $_Connection

					$_User | % {

						[void]$_UserCollection.Add($_)

					}

				}

				Catch
				{

					if ($_.FullyQualifiedErrorId -match 'UserNotFound')
					{

						$errorRecord = New-ErrorRecord HPOneView.Appliance.UserResourceException UserNotFound ObjectNotFound 'Name' -Message "The User 'Name' was not found on Appliance '$($_Connection.Name)'." #-verbose
						$PSCmdlet.WriteError($errorRecord)

					}

					else
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}				

			}

		}

	}

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($_UserCollection.count) User object resources to remove."

		#Process User Resources
		ForEach ($_user in $_UserCollection)
		{

			if ($pscmdlet.ShouldProcess($_user.ApplianceConnection.Name,"Remove User '$($_user.userName)' from appliance")) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing User '$($_user.userName)' from appliance '$($_user.ApplianceConnection.Name)'."

				Try
				{

					$_resp = Send-HPOVRequest $_user.Uri DELETE -Hostname $_user.ApplianceConnection.Name

					$_resp | Add-Member -NotePropertyName userName -NotePropertyValue $_user.userName

					[void]$_TaskCollection.Add($_resp)

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			elseif ($PSBoundParameters['WhatIf'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf parameter was passed."

			}

		}

		Return $_TaskCollection

    }

}

function Show-HPOVUserSession 
{


    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default")]
    Param ()

    Begin 
	{
    
        Write-Warning "This CMDLET has been deprecated. Please use the $ConnectedSessions Global variable for appliance session information."
    
    }

    Process { }

    End { }

}

function Get-HPOVRole 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default")]
    Param()
	
    Begin 
	{

        Write-Warning "This CMDLET is now deprecated. Please use the Get-HPOVUser CMDLET to retrieve the user account and associated Roles."

    }

}

function Set-HPOVUserRole 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param 
	(

        [parameter (Mandatory, ValueFromPipeline)]
        [ValidateNotNullOrEmpty()]
        [Alias("user",'userName')]
        [Object]$Name = $null,

        [parameter (Mandatory)]
        [ValidateNotNullOrEmpty()]
        [alias('roleName')]
        [Array]$Roles,

		[parameter(ValueFromPipelineByPropertyName, ValueFromPipeline = $False, Mandatory = $false, HelpMessage = "Enter the Appliance Name or Object")]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		

		if (-not($PSBoundParameters['Name']))
		{ 
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Validating requested role values"
				
			$PipelineInput = $True 
		
		}

		else
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

			$c = 0

			ForEach ($_Connection in $ApplianceConnection) 
			{

				Try 
				{
	
					$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}

		}

		#elseif (-not($PipelineInput))
		#{
		#
		#	Try 
		#	{
		#
		#		$ApplianceConnection = Test-HPOVAuth $ApplianceConnection
		#
		#	}
		#
		#	Catch [HPOneview.Appliance.AuthSessionException] 
		#	{
		#
		#		$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
		#		$PSCmdlet.ThrowTerminatingError($errorRecord)
		#
		#	}
		#
		#	Catch 
		#	{
		#
		#		$PSCmdlet.ThrowTerminatingError($_)
		#
		#	}
		#
		#}

        #Need to make sure role name is first letter capitalized only.
        $i = 0

        foreach ($role in $roles) 
		{

            $roles[$i] = $role.substring(0,1).ToUpper()+$role.substring(1).tolower()

            $i++

        }

		$_UserRoleUpdateStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Validating requested role values"
			
			$_unsupportedRoles = New-Object System.Collections.ArrayList
			$_NewUserRoles     = New-Object System.Collections.ArrayList

			#Validate roles provided are allowed.
			foreach ($_role in $Roles) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing role: $_role"

				if (-not ((${Global:ConnectedSessions} | ? Name -EQ $_Connection.Name).ApplianceSecurityRoles -contains $_role)) 
				{ 
				
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid or unsupported"

					[void]$_unsupportedRoles.Add($_role)
			
				}

				else
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Supported"

					$_roleObject = [PsCustomObject]@{
					    roleName = $_role;
					    type = "RoleNameDtoV2"
					}

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding to role collection: $($_roleObject | fl * | out-string)"

					[void]$_NewUserRoles.Add($_roleObject)

				}

			}

			if ($_unsupportedRoles.count -ge 1) 
			{ 
        
				$errorRecord = New-ErrorRecord ArgumentException UnsupportedRolesFound InvalidArgument $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "The '$($_unsupportedRoles -join ", ")' role(s) is/are not supported or the correct names.  Please validate the -roles parameter contains one or more valid roles.  Allowed roles are: $((${Global:ConnectedSessions} | ? Name -EQ $_Connection.Name).ApplianceSecurityRoles -join ", ")"
				$PSCmdlet.ThrowTerminatingError($errorRecord)            
            
			}

			if ($Name -is [PSCustomObject] -and $Name.category -eq 'users')
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Name parameter value is a User object"

				$_Name = $Name.userName

			}

			elseif ($Name -is [PSCustomObject] -and $Name.category -ne 'users')
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Name parameter value is NOT a valid User object"

				$errorRecord = New-ErrorRecord HPOneView.Appliance.UserResourceException InvalidUserObject InvalidArgument "Name" -TargetType 'PSObject' -Message "The object provided via the pipeline for the Name parameter is not a valid user object. Please check the value and try again."
				$pscmdlet.ThrowTerminatingError($errorRecord)

			}

			else
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Name parameter value is string"

				$_Name = $Name

			}

			$_setUserRolesUri = "/rest/users/" + $_Name + "/roles?multiResource=true"

			Try
			{

				$_resp = Send-HPOVRequest $_setUserRolesUri PUT $_NewUserRoles -Hostname $_Connection.Name

			}
		
    
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			[void]$_UserRoleUpdateStatus.Add($_resp)

		}

    }

    End 
	{

        Return $_UserRoleUpdateStatus

    }

}

function Set-HPOVInitialPassword  
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = 'Default')]
    Param 
	(

        [parameter (Position = 0, Mandatory, HelpMessage = "User account.", ParameterSetName = 'Default')]
        [ValidateNotNullOrEmpty()]
        [Alias("user")]
        [String]$UserName = "Administrator",

        [parameter (Position = 1, Mandatory, HelpMessage = "Original password", ParameterSetName = 'Default')]
        [ValidateNotNullOrEmpty()]
        [string]$OldPassword,

        [parameter (Position = 2, Mandatory, HelpMessage = "New Password", ParameterSetName = 'Default')]
        [ValidateNotNullOrEmpty()]
        [string]$NewPassword,

		[parameter(Position = 3, Mandatory, HelpMessage = "Provide the IP Address or FQDN of the Appliance to connect to.", ParameterSetName = 'Default')]
        [ValidateNotNullOrEmpty()]
		[Object]$Appliance = $null

	)

	Begin 
	{ 

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		#Check to see if a connection to the appliance exists
        if (-not(${Global:ConnectedSessions}.Name -contains $Appliance) -and (-not(${Global:ConnectedSessions} | ? Name -eq $Appliance).SessionID))
        {

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Appliance Session not found. Running FTS sequence?"

            write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Creating temporary Session object"

            [HPOneView.Appliance.Connection]$_ApplianceConnection = New-Object HPOneView.Appliance.Connection

			$_ApplianceConnection.ConnectionId = 99
			$_ApplianceConnection.Name         = $Appliance
			$_ApplianceConnection.SessionID    = 'TemporaryConnection'
			$_ApplianceConnection.SslChecked   = $true

            [void]${Global:ConnectedSessions}.Add($_ApplianceConnection)

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($_ApplianceConnection | out-string)"
            
        }

		else
		{

			$_ApplianceConnection = ${Global:ConnectedSessions} | ? Name -eq $Appliance

		}
    
    }

    Process 
	{
        
        $body = [PSCustomObject]@{
			
			userName    = $userName; 
			oldPassword = $oldPassword; 
			newPassword = $newPassword;
		
		}

        $uri  = $usersUri + "/changePassword"

        Try
		{

			$resp = Send-HPOVRequest $uri POST $body -Hostname $_ApplianceConnection.Name

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		if ((${Global:ConnectedSessions} | ? Name -eq $_ApplianceConnection.Name).SessionID -eq 'TemporaryConnection')
		{

			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing temporary Session object"

			[void]${Global:ConnectedSessions}.Remove($_ApplianceConnection)

		}

    }

    End 
	{

        return $resp

    }

}

function Get-HPOVLdap 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName='Default')]
	param 
	(

        [Parameter(Mandatory, ParameterSetName = 'Export')]
        [Alias('x')]
        [switch]$Export,

        [Parameter(Position = 1, Mandatory, ParameterSetName = 'Export')]
        [Alias('location')]
        [ValidateScript({split-path $_ | Test-Path})]
        [string]$Save,
		
		[parameter(Mandatory = $false, ParameterSetName = 'Default')]
		[parameter(Mandatory = $false, ParameterSetName = 'Export')]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_GlobalAuthDirectorySettings = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Try
			{

				$_AuthDirectoryGlobalSettings = Send-HPOVRequest $authnSettingsUri -Hostname $_Connection.Name
				
				$_AuthDirectoryGlobalSettings | % { $_.psobject.typenames.Insert(0,”HPOneView.Appliance.AuthGlobalDirectoryConfiguration") }

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			[void]$_GlobalAuthDirectorySettings.Add($_AuthDirectoryGlobalSettings)

		}
		
	}

	end 
	{

        if ($PSBoundParameters['export'])
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Exporting Global Directory configuration."

			ForEach ($_Directory in $_GlobalAuthDirectorySettings)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Saving to: $($save)\$($_Directory.ApplianceConnection.Name)_globalSettings.json"

				ConvertTo-Json $_Directory > $save\$($_Directory.ApplianceConnection.Name)_globalSettings.json

			}		

        }

        else
		{
 			
			Return $_GlobalAuthDirectorySettings 

        }

	}

}

 # // TODO
function Set-HPOVLoginMessage
{

#[PS] C:\Users\clynch> $authdirectory = Send-HPOVRequest "/rest/logindomains/global-settings"
#[PS] C:\Users\clynch> $authdirectory
#
#
#loginMessage           : @{type=LoginMessage; acknowledgment=False; message=This management appliance is a company
#                         owned asset and provided for the exclusive use of authorized personnel. Unauthorized use or
#                         abuse of this system may lead to corrective action including termination, civil and/or
#                         criminal penalties.; eTag=2015-10-21T20:37:13.813Z; created=2015-10-21T20:37:13.813Z;
#                         modified=2015-10-21T20:37:13.813Z; category=users; uri=/rest/logindomains/global-settings}
#technicianEnabled      : True
#allowLocalLogin        : True
#defaultLoginDomain     : @{type=LoginDomainConfigInfoDto; loginDomain=0; name=LOCAL; eTag=;
#                         created=2015-10-21T20:37:13.810Z; modified=2015-10-21T20:37:13.810Z; category=; uri=}
#configuredLoginDomains : {@{type=LoginDomainConfigInfoDto; loginDomain=1; name=CINetworking.lab; eTag=Wed Sep 30
#                         17:55:41 UTC 2015; created=Wed Sep 30 17:55:41 UTC 2015; modified=Wed Sep 30 17:55:41 UTC
#                         2015; category=users; uri=/rest/logindomains/1}}
#ApplianceConnection    : @{Name=hpov-tot.cinetworking.lab; ConnectionId=1}
#
#loginMessage           : @{type=LoginMessage; acknowledgment=False; message=This management appliance is a company
#                         owned asset and provided for the exclusive use of authorized personnel. Unauthorized use or
#                         abuse of this system may lead to corrective action including termination, civil and/or
#                         criminal penalties.; category=users; eTag=2015-10-21T20:38:47.149Z;
#                         created=2015-10-21T20:38:47.149Z; modified=2015-10-21T20:38:47.149Z;
#                         uri=/rest/logindomains/global-settings}
#technicianEnabled      : True
#defaultLoginDomain     : @{type=LoginDomainConfigInfoDto; loginDomain=0; name=LOCAL; category=; eTag=;
#                         created=2015-10-21T20:38:47.146Z; modified=2015-10-21T20:38:47.146Z; uri=}
#allowLocalLogin        : True
#configuredLoginDomains : {}
#ApplianceConnection    : @{Name=172.20.255.128; ConnectionId=2}



}

# // TODO
function Remove-HPOVLoginMessage
{}

function Get-HPOVLdapDirectory 
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = 'Default')]
	param 
	(

		[Parameter(Position = 0, Mandatory = $false, ParameterSetName='Default')]
        [Alias('directory','domain')]
		[String]$Name,

        [Parameter(Mandatory = $true, ParameterSetName = 'Export')]
        [Alias('x')]
		[ValidateScript({split-path $_ | Test-Path})]
        [string]$Export,

		[parameter(Mandatory = $false, ParameterSetName = 'Default')]
		[parameter(Mandatory = $false, ParameterSetName = 'Export')]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_AuthDirectorySettings = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Try
			{

				$_AuthDirectories = Send-HPOVRequest $authnProvidersUri -Hostname $_Connection.Name
			
				$_AuthDirectories | % { 
					
					Try
					{

						$_AuthDirectory = Send-HPOVRequest $_.uri -Hostname $_AuthDirectories.ApplianceConnection.Name

					}
					
					Catch 
					{

						PSCmdlet.ThrowTerminatingError($_)

					}

					$_AuthDirectory.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.AuthDirectory") 
				
					[void]$_AuthDirectorySettings.Add($_AuthDirectory)

				}

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

	}

	End 
	{

		If ($Name) 
		{

			$_AuthDirectorySettings = $_AuthDirectorySettings | ? name -like $name

			if ($_AuthDirectorySettings.Count -eq 0)
			{
				
				$errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryException AuthDirectoryResourceNotFound ObjectNotFound "Name" -Message "The specified '$name' Authentication Directory resource not found.  Please check the name and try again." #-verbose
                
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }

        }
    
	    #Export directory settings (raw JSON) to file
        if ($PSboundParameters['export'])
		{

            #Loop through each directory and get all configured settings
            ForEach ($_directory in $_AuthDirectorySettings)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Exporting Directory $($_directory.name) configuration."

				$_SaveLocation = $Export + "\" + $_directory.ApplianceConnection.Name + "_" + $_directory.name + ".json"

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Saving to: $_SaveLocation"
                
				$_directory                  | Select-Object * -ExcludeProperty credential,created,modified,eTag 			
				$_directory.directoryServers | Select-Object * -ExcludeProperty directoryServerCertificateStatus,serverStatus,created,modified,eTag
				$_directory                  | convertto-json > $_SaveLocation
            
			}
        
		}
        
        else
		{
            
            Return $_AuthDirectorySettings

        }

	}

}

function New-HPOVLdapDirectory 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName='AD')]
	param
	(

		[Parameter(Position=0, Mandatory = $true, ParameterSetName = "AD")]
        [Parameter(Position=0, Mandatory = $true, ParameterSetName = "LDAP")]
        [ValidateNotNullOrEmpty()]
		[String]$Name,

		[Parameter(Mandatory = $true, ParameterSetName = "AD")]
		[Switch]$AD,

		[Parameter(Mandatory = $true, ParameterSetName = "LDAP")]
		[Alias('LDAP')]
		[Switch]$OpenLDAP,

		[Parameter(Position = 2, Mandatory = $true, ParameterSetName = "AD")]
        [Parameter(Position = 2, Mandatory = $true, ParameterSetName = "LDAP")]
		[ValidateNotNullOrEmpty()]
		[Alias('root','rootdn')]
        [String]$BaseDN,

		[Parameter(Position = 3, Mandatory = $true, ParameterSetName = "LDAP")]
        [ValidateSet('UID','CN')]
		[String]$UserAttribute,

        [Parameter(Position = 4, Mandatory = $true, ParameterSetName = "LDAP")]
        [ValidateNotNullOrEmpty()]
		[Array]$OrganizationalUnits,

        [Parameter(Position = 3, Mandatory = $true, ParameterSetName = "AD")]
        [Parameter(Position = 5, Mandatory = $true, ParameterSetName = "LDAP")]
        [ValidateNotNullOrEmpty()]
		[Array]$Servers,

        [Parameter(Position = 4, Mandatory = $true, ParameterSetName = "AD")]
        [Parameter(Position = 6, Mandatory = $true, ParameterSetName = "LDAP")]
        [ValidateNotNullOrEmpty()]
		[Alias('u','user')]
        [String]$Username,

        [Parameter(Position = 5, ValueFromPipeline = $true, Mandatory = $true, ParameterSetName = "AD")]
        [Parameter(Position = 7, ValueFromPipeline = $true, Mandatory = $true, ParameterSetName = "LDAP")]
        [ValidateNotNullOrEmpty()]
		[Alias('p','pass')]
        [SecureString]$Password,

		[parameter(Mandatory = $false, ParameterSetName = 'Default')]
		[parameter(Mandatory = $false, ParameterSetName = 'Export')]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_AuthDirectorySettings = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		$_decryptPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($Password))

		ForEach ($_Connection in $ApplianceConnection)
		{
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			$_NewAuthDirectoryObj = NewObject -AuthDirectory
		
			$_NewAuthDirectoryObj.name                = $Name
			$_NewAuthDirectoryObj.baseDN              = $BaseDN
			$_NewAuthDirectoryObj.credential.userName = $Username
			$_NewAuthDirectoryObj.credential.password = $_decryptPassword
        
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Validating Server object values"

			ForEach ($_Server in $Servers)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Type: $($_Server.GetType().Name)"

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Type: $($_Server | fl * | Out-String)"

				if ($_Server -is [PSCustomObject] -and $_Server.type -eq 'LoginDomainDirectoryServerInfoDto')
				{

					[void]$_NewAuthDirectoryObj.directoryServers.Add($_Server)

				}

				else
				{

					$errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryException InvalidDirectoryServer InvalidArgument 'Servers' -TargetType ($_Server.GetType().Name) -Message "The Servers parameter contains an invalid Server object: $($_Server | fl * | Out-String).  Please correct this value and try again." #-verbose
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

			}

			if ($PSBoundParameters['OpenLDAP'])
			{

				$_NewAuthDirectoryObj.authProtocol = 'LDAP'

				ForEach ($_ou in $OrganizationalUnits)
				{

					if ($_ou.type -match $OrganizationalUnitPattern)
					{

						[void]$_NewAuthDirectoryObj.orgUnits.Add($Server)

					}

					else
					{

						$errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryException InvalidDirectoryServer InvalidArgument 'OrganizationalUnits' -Message "The OrganizationalUnits parameter contains an invalid OU value: '$_ou'.  Please correct this value and try again." #-verbose
						$PSCmdlet.ThrowTerminatingError($errorRecord)

					}

				}

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New Authentication Directory Object: $($_NewAuthDirectoryObj | fl * | Out-String)"

			Try
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Validating authentication directory setting is valid"

				$_validateresp = Send-HPOVRequest $authnProviderValidatorUri POST $_NewAuthDirectoryObj -Hostname $_Connection

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Submitting request to create new authentication directory"

				$_resp = Send-HPOVRequest $authnProvidersUri POST $_NewAuthDirectoryObj -Hostname $_Connection

				$_resp.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.AuthDirectory")

				[void]$_AuthDirectorySettings.Add($_resp)

			}

			Catch
			{

				foreach ($NestedError in (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.nestedErrors) 
				{

					if ($NestedError.errorCode -eq "AUTHN_LOGINDOMAIN_SERVER_AUTHENTICATION_ERROR" ) 
					{ 
						
						$ErrorCategory = 'AuthenticationError' 

					}

					elseif ($NestedError.errorCode -eq "AUTHN_LOGINDOMAIN_DUPLICATE_NAME" ) 
					{ 
						
						$ErrorCategory = 'ResourceExists' 

					}

					else 
					{ 
						
						$ErrorCategory = 'InvalidOperation' 
					
					}

					$errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryException $NestedError.errorCode $ErrorCategory $NestedError.errorSource -Message "$($NestedError.message) $($NestedError.details)" #-verbose
					$PSCmdlet.WriteError($errorRecord)

				}

				$errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryException (${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.errorCode InvalidOperation 'New-HPOVLdap' -Message "$((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.message) $((${Global:ResponseErrorObject} | ? Name -eq $ApplianceHost.Name).ErrorResponse.details)" #-verbose
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

		}

    }

    End 
	{

		Return $_AuthDirectorySettings
       
	}

}

function Remove-HPOVLdapDirectory 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = "default", SupportsShouldProcess = $True, ConfirmImpact = 'High')]
	param
	(

		[parameter(Mandatory, ValueFromPipeline, HelpMessage = "Enter the Directory name", Position = 0, ParameterSetName = "default")]
		[parameter(Mandatory, ParameterSetName = "ApplianceRequired", position = 0)]
		[ValidateNotNullOrEmpty()]
		[alias("d")]
		[Object]$Directory,
	
		[parameter(Mandatory = $False, ValueFromPipelineByPropertyName, ParameterSetName = "ApplianceRequired", position = 1)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = $Null,

		[switch]$Force

    )

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		if (-not($PSBoundParameters['Directory'])) { $PipelineInput = $True }

		$_TaskCollection    = New-Object System.Collections.ArrayList
		$_DirectoryCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if ($PipelineInput) 
		{ 

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Directory Object provided: $($Directory | FL * | Out-String)"

			If ($Resource.category -eq 'users')
			{

				If (-not($Directory.ApplianceConnection))
				{

					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "Directory:$($Directory.Name)" -TargetType PSObject -Message "The Directory resource provided is missing the source ApplianceConnection property.  Please check the object provided and try again." #-verbose
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				[void]$_DirectoryCollection.Add($Directory)

			}

			else
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "Directory:$($Directory.Name)" -TargetType PSObject -Message "The Directory resource is not an expected category type [$($Directory.category)].  Allowed resource category type is 'users'.  Please check the object provided and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

			}
        
		}

		else 
		{

			ForEach ($_Connection in $ApplianceConnection)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance $($_Connection.Name) (of $($ApplianceConnection.Count))"

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Directory Name $($Directory)"

				Try
				{

					$_directory = Get-HPOVLdapDirectory $Directory -ApplianceConnection $_Connection

					$_directory | % {

						[void]$_DirectoryCollection.Add($_)

					}

				}

				Catch
				{

					if ($_.FullyQualifiedErrorId -match 'AuthDirectoryResourceNotFound')
					{

						$errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryException AuthDirectoryResourceNotFound ObjectNotFound 'Directory' -Message "The Directory '$Directory' was not found on Appliance '$($_Connection.Name)'." #-verbose
						$PSCmdlet.WriteError($errorRecord)

					}

					else
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}				

			}

		}
        
    }

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($_DirectoryCollection.count) Authentication Directory resources to remove."

		#Process Directory Resources
		ForEach ($_Directory in $_DirectoryCollection)
		{

			if ($pscmdlet.ShouldProcess($_Directory.ApplianceConnection.Name,"remove directory '$($_Directory.name)'")) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing Directory '$($_Directory.name)' from appliance '$($_Directory.ApplianceConnection.Name)'."

				Try
				{
					
					$_resp = Send-HPOVRequest $_Directory.Uri DELETE -Hostname $_Directory.ApplianceConnection.Name

					$_resp | Add-Member -NotePropertyName name -NotePropertyValue $_Directory.name

					[void]$_TaskCollection.Add($_resp)

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			elseif ($PSBoundParameters['WhatIf'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf parameter was passed."

			}

			Return $_TaskCollection

		}

	}

}

Function Set-HPOVLdapDefaultDirectory 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
	[CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'High')]
	param
	(

		[Parameter(Position = 0, Mandatory, ValueFromPipeline, HelpMessage = "Please provide the LDAP/AD Directory Name or Object.")]
		[ValidateNotNullOrEmpty()]
		[Object]$Directory = $Null,

		[Switch]$DisableLocalLogin,
	
		[parameter(Mandatory = $False, ValueFromPipelineByPropertyName, position = 1)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = $Null
	
	)

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if (-not($PSBoundParameters['Directory'])) 
		{ 
			
			$PipelineInput = $True 
	
		}

		else
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

			$c = 0

			ForEach ($_Connection in $ApplianceConnection) 
			{

				Try 
				{
	
					$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}

		}

		$_TaskCollection      = New-Object System.Collections.ArrayList
		$_DirectoryCollection = New-Object System.Collections.ArrayList
	
	}

	#Build collection of objects to process
	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance $($_Connection.Name) (of $($ApplianceConnection.Count)"

			#Create default Directory configuration object
			$_DefaultDirectoryConfig = [PSCustomObject]@{
			
				allowLocalLogin     = (-not($DisableLocalLogin.IsPresent));
				defaultLoginDomain  = $Null;
				ApplianceConnection = $_Connection

			}

			switch ($Directory.Gettype().Name) 
			{

				"String" 
				{

					if ($Directory -ne "Local") 
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Authentication Directory Name provided: $Directory"

						$_Directory = Get-HPOVLdapDirectory $Directory -Hostname $_Connection.Name

					}

					elseif ($Directory -eq "Local") 
					{

						$_Directory = [PSCustomObject] @{

							type                = 'LoginDomainConfigInfoDto';
							name                = "LOCAL";
							uri                 = "";
							loginDomain         = "0";

						}

					}

				}

				"PSCustomObject" 
				{

					if ($Directory.type -eq 'LoginDomainConfigVersion2Dto') 
					{

						Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Authentication Directory Object provided: $($Directory | out-string)"

					}

					else 
					{

						$errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryException InvalidAuthDirectoryObject InvalidArgument "Directory" -TargetType "PSObject" -Message "The authentication directory object type '$($Directory.type)' provided is not correct.  The type must be 'LoginDomainConfigVersion2Dto'.  Please correct the value and try again." #-verbose

						$PSCmdlet.ThrowTerminatingError($errorRecord)

					}

				}

			}

			$_DefaultDirectoryConfig.defaultLoginDomain = ($_Directory | Select-Object type,loginDomain,name,eTag,uri)

			[void]$_DirectoryCollection.Add($_DefaultDirectoryConfig)

		}

	}

	#Process objects here
	End 
	{

		ForEach ($_DirectoryToProcess in $_DirectoryCollection)
		{

			if ($pscmdlet.ShouldProcess($_DirectoryToProcess.ApplianceConnection.Name,"Set appliance authentication directory $($_DirectoryToProcess.defaultLoginDomain.name) as default domain")) 
			{
		
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Authentication Directory Object request: $($_DirectoryToProcess | out-string)"

				Try
				{

					$_resp = Send-HPOVRequest $authnSettingsUri POST $_DirectoryToProcess -Hostname $_DirectoryToProcess.ApplianceConnection.Name

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting PowerShell library AuthProvider registry value to '$$_DirectoryToProcess.defaultLoginDomain.name)'"

				Set-ItemProperty -Path HKCU:\Software\Hewlett-Packard\HPOneView -Name "AuthProvider#$($_DirectoryToProcess.ApplianceConnection.Name)" -Value $_DirectoryToProcess.defaultLoginDomain.name -Type STRING | write-verbose
				
			}

			elseif ($PSBoundParameters['WhatIf'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf was passed."

				$_resp = $null

			}

			else
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] User likely selected 'No' to prompt."

				$_resp = $null

			}

			[void]$_TaskCollection.Add($_resp)

		}

		Return $Resp

	}

}

Function Enable-HPOVLdapLocalLogin 
{
		
    # .ExternalHelp HPOneView.120.psm1-help.xml

	[CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'High')]
	param
	(

		[parameter(Mandatory = $False, position = 0)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	
	)

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_TaskCollection = New-Object System.Collections.ArrayList
	
	}

	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance $($_Connection.Name) (of $($ApplianceConnection.Count)"

			Try
			{
				
				#Get current auth directory configuration
				$_currentDirectoryConfig = Send-HPOVRequest $authnSettingsUri -Hostname $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Current global authentication settings: $($_currentDirectoryConfig | fl * | Out-String)"

			if ($pscmdlet.ShouldProcess($_Connection.Name,"enable local logins")) 
			{

				$_currentDirectoryConfig.allowLocalLogin = $True

				Try
				{
					
					#Update Configuration
					$_resp = Send-HPOVRequest $authnSettingsUri POST $_currentDirectoryConfig -Hostname $_Connection

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
				
				[void]$_TaskCollection.Add($_resp)

			}

			elseif ($PSBoundParameters['Whatif'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf parameter was passed."

			}

		}
		
	}

	End 
	{

		Return $_TaskCollection

	}

}

Function Disable-HPOVLdapLocalLogin 
{
		
    # .ExternalHelp HPOneView.120.psm1-help.xml

	[CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'High')]
	param
	(

		[parameter(Mandatory = $False, position = 0)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
	
	)

	Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_TaskCollection = New-Object System.Collections.ArrayList
	
	}

	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance $($_Connection.Name) (of $($ApplianceConnection.Count)"

			Try
			{
				
				#Get current auth directory configuration
				$_currentDirectoryConfig = Send-HPOVRequest $authnSettingsUri -Hostname $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Current global authentication settings: $($_currentDirectoryConfig | fl * | Out-String)"

			if ($pscmdlet.ShouldProcess($_Connection.Name,"disable local logins")) 
			{

				$_currentDirectoryConfig.allowLocalLogin = $false

				Try
				{
					
					#Update Configuration
					$_resp = Send-HPOVRequest $authnSettingsUri POST $_currentDirectoryConfig -Hostname $_Connection

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
				
				[void]$_TaskCollection.Add($_resp)

			}

			elseif ($PSBoundParameters['Whatif'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf parameter was passed."

			}

		}
		
	}

	End 
	{

		Return $_TaskCollection

	}

}

function New-HPOVLdapServer 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = "default")]
	param
	(
		
		[Parameter(Position = 0, Mandatory, ValueFromPipeline, ParameterSetName = "default")]
		[String]$Name = $Null,

		[Parameter(Position = 1, Mandatory = $false, ParameterSetName = "default")]
		[Alias('port')]
        [ValidateRange(1,65535)]
        [Int32]$SSLPort = 636,

        [Parameter(Position = 2, Mandatory = $false, ParameterSetName = "default")]
        [Alias('cert')]
        [Object]$Certificate = $null

	)

	begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"
        
		$_AuthDirectoryServer = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if ($PSBoundParameters['Certificate'])
		{

			if (Test-Path $Certificate) 
			{ 

			    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Certificate file found."

			    $readfile = [System.IO.File]::OpenText($Certificate)
			    $certificate = $readfile.ReadToEnd()
			    $readfile.Close()
				$Base64Certificate = ($Certificate | Out-String) -join "`n"

			}

			else 
			{

			    $errorRecord = New-ErrorRecord System.IO.FileNotFoundException CertificateNotFound ObjectNotFound 'Certificate' -TargetType 'PSObject' -Message "Autehntication Directory Server SSL certiciate not found.  Please check the path of the public key, and try again." #-verbose
			    $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

		}

		else
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Attempting to retrieve Directory Server Secure LDAP Certificate"

			# // Support Getting LDAP Server Certificate    
			$uri = $Name + ":" + $Sslport

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] URI: $uri"
			   
			$WebRequest = [Net.WebRequest]::Create("https://$uri")

			try 
			{
				
				$Response = $WebRequest.GetResponse()
			
			}
			
			catch [Net.WebException] 
			{ 

			    if (-not($WebRequest.Connection) -and ([int]$Response.StatusCode -eq 0)) 
				{

			        Write-Error $_.Exception.Message -Category ObjectNotFound -ErrorAction Stop

			    } 

			}

			#Close the response connection, as it is no longer needed, and will cause problems if left open.
			if ($response) 
			{ 
				
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Closing response connection"
			
				$Response.Close() 
			
			}

			if ($WebRequest.ServicePoint.Certificate -ne $null) 
			{
			    
				#Get certificate
				$Cert = New-Object Security.Cryptography.X509Certificates.X509Certificate2($WebRequest.ServicePoint.Certificate)

				$out = New-Object String[] -ArgumentList 3
				         
				$out[0] = "-----BEGIN CERTIFICATE-----"
				$out[1] = [System.Convert]::ToBase64String($Cert.RawData, "InsertLineBreaks")
				$out[2] = "-----END CERTIFICATE-----"

				$Base64Certificate = $out -join "`n"

			}

			# Error we couldn't get the certificate
			else
			{

				Write-Host "Unable to get cert."

			}

		}
        
        $_ldapServer = NewObject -AuthDirectoryServer

        $_ldapServer.directoryServerIpAddress             = $Name
        $_ldapServer.directoryServerCertificateBase64Data = $Base64Certificate

		if ($PSBoundParameters['Sslport'])
		{

			$_ldapServer.directoryServerSSLPortNumber = [string]$sslport 

		}
        

		$_ldapServer.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.AuthDirectoryServer')

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] New Auth Directory Server Object: $($_ldapServer | fl * | Out-String)"

        [void]$_AuthDirectoryServer.Add($_ldapServer)

	}

    End 
	{

        Return $_AuthDirectoryServer

    }

}

function Show-HPOVLdapGroups {

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	param(
         [parameter(Mandatory = $true,HelpMessage = "Enter the user name",Position=0)]
         [ValidateNotNullOrEmpty()]
         [alias("u")]
         [string]$UserName,

         [parameter(Mandatory = $true,ValueFromPipeline = $true,HelpMessage = "Enter the password",Position=1)]
         [alias("p")]
         [ValidateNotNullOrEmpty()]
         [SecureString]$password,

         [parameter(Mandatory = $true,HelpMessage = "Enter the Directory name",Position=2)]
         [ValidateNotNullOrEmpty()]
         [alias("d","domain","directory")]
         [string]$authProvider
    )

    Begin {

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

        if (-not($global:cimgmtSessionId)) {
        
            $errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSession AuthenticationError $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "No valid session ID found.  Please use Connect-HPOVMgmt to connect and authenticate to an appliance." #-verbose
            $PSCmdlet.ThrowTerminatingError($errorRecord)

        }

    }


	process {
 
        $decryptPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($password))
        $body = @{userName=$username; password=$decryptPassword; authLoginDomain=$authProvider}

		$groups = Send-HPOVRequest $script:authnDirectoryGroups POST -body $body

        if ($groups.count -eq 0){ Write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No LDAP groups found."}
        else {

			Write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $($groups.count) LDAP groups found: $($groups)"

			$DirectoryGroups = [PSCustomObject]@{Name = @()}
                
			$groups | % { $_.psobject.typenames.Insert(0,”HPOneView.Appliance.AuthDirectoryGroup") }

        }

	}

    end {
    
        return $groups
    }

}

function Get-HPOVLdapGroup 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = 'Default')]
	param
	(

        [parameter(Position = 0, Mandatory = $false, HelpMessage = "Enter the Directroy Group Name", ParameterSetName = 'Default')]
		[ValidateNotNullorEmpty()]
        [alias("group","GroupName")]
        [string]$Name,

        [Parameter(Mandatory = $true, ParameterSetName = 'Export')]
        [Alias('x')]
		[ValidateScript({split-path $_ | Test-Path})]
        [string]$Export,
		
		[parameter(Mandatory = $false, ParameterSetName = 'Default')]
		[parameter(Mandatory = $false, ParameterSetName = 'Export')]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_DirectoryGroupsCollection = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Try
			{ 
				
				$_Groups = Send-HPOVRequest $authnEgroupRoleMappingUri -Hostname $_Connection.Name

				ForEach ($_Group in $_Groups.members)
				{

					$_Group.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.AuthDirectoryGroupRoleMapping") 
				
					[void]$_DirectoryGroupsCollection.Add($_Group)

				}

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}      

	}

	End 
	{

        if ($PSBoundParameters['Name']) 
		{ 
			
			$_DirectoryGroupsCollection = $_DirectoryGroupsCollection | ? egroup -eq $Name

			if ($_DirectoryGroupsCollection.Count -eq 0)
			{
				
				$errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryGroupException AuthDirectoryGroupResourceNotFound ObjectNotFound "Name" -Message "The specified '$name' Authentication Directory Group resource not found.  Please check the name and try again." #-verbose
                
                $PSCmdlet.ThrowTerminatingError($errorRecord)

            }
		
		}

        if ($PSBoundParameters['Name'])
		{ 
			
			$_DirectoryGroupsCollection | convertto-json > $Export 
		
		}
 
        else 
		{

            Return $_DirectoryGroupsCollection

        }

	}

}

function New-HPOVLdapGroup 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = 'Default')]
	param
	(

		[parameter(Mandatory = $true,HelpMessage = "Enter the Directory name",Position=0, ParameterSetName = 'Default')]
		[ValidateNotNullOrEmpty()]
		[alias("d","domain","directory")]
		[string]$authProvider,

		[parameter(Mandatory = $true,HelpMessage = "Enter the Directroy Group name in Distinguished Name format (i.e. CN=Admin Group,OU=Admins,DC=Domain,DC=com",Position=1, ParameterSetName = 'Default')]
		[ValidateNotNullOrEmpty()]
		[alias("g","group","name")]
		[string]$GroupName,

		[parameter(Mandatory = $true,HelpMessage = "Enter the Directroy Group roles in System.Array format",Position=2, ParameterSetName = 'Default')]
		[ValidateNotNullOrEmpty()]
		[alias("r","role")]
		[Array]$Roles,

		[parameter(Mandatory = $true,HelpMessage = "Enter the user name",Position=3, ParameterSetName = 'Default')]
		[ValidateNotNullOrEmpty()]
		[alias("u")]
		[string]$UserName,

		[parameter(Mandatory = $true,ValueFromPipeline = $true,HelpMessage = "Enter the password",Position=4, ParameterSetName = 'Default')]
		[alias("p")]
		[ValidateNotNullOrEmpty()]
		[SecureString]$Password,
			
		[parameter(Mandatory = $false, ParameterSetName = 'Default')]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

	)

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"


		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		ForEach ($_Connection in $_tmpApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_DirectroyGroupStatus = New-Object System.Collections.ArrayList

		$_decryptPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($password))

	}

	Process
	{
		
		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Validating requested role values"
			
			$_unsupportedRoles = New-Object System.Collections.ArrayList
			$_Roles            = New-Object System.Collections.ArrayList

			#Validate roles provided are allowed.
			foreach ($_role in $Roles) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing role: $_role"

				if (-not ((${Global:ConnectedSessions} | ? Name -EQ $_Connection.Name).ApplianceSecurityRoles -contains $_role)) 
				{ 
				
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid or unsupported"

					[void]$_unsupportedRoles.Add($_role)
			
				}

				else
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Supported"

					[void]$_NewUserRoles.Add($_Roles)

				}

			}

			if ($_unsupportedRoles.count -ge 1) 
			{ 
        
				$errorRecord = New-ErrorRecord ArgumentException UnsupportedRolesFound InvalidArgument $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "The '$($_unsupportedRoles -join ", ")' role(s) is/are not supported or the correct names.  Please validate the -roles parameter contains one or more valid roles.  Allowed roles are: $((${Global:ConnectedSessions} | ? Name -EQ $_Connection.Name).ApplianceSecurityRoles -join ", ")"
				$PSCmdlet.ThrowTerminatingError($errorRecord)            
            
			}
		
			#Get new Directory Group object   
			$_NewGroup = NewObject -DirectoryGroup
			
			$_NewGroup.group2rolesPerGroup.loginDomain          = $authProvider
			$_NewGroup.group2rolesPerGroup.egroup               = $GroupName
			$_NewGroup.group2rolesPerGroup.roles                = $_Roles
			$_NewGroup.group2rolesPerGroup.credentials.userName = $UserName
			$_NewGroup.group2rolesPerGroup.credentials.password = $_decryptPassword
		
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Directory Group requested to create:  $($_NewGroup | out-string )"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to create $($_NewGroup.egroup) Directory Group"
			
			Try
			{

				$_resp = Send-HPOVRequest $authnEgroupRoleMappingUri POST $_NewGroup -Hostname $_Connection

			}
			
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$_resp.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.AuthDirectoryGroup')

			[void]$_DirectroyGroupStatus.Add($_resp)
	       
		}

	}

	End
	{
		
		Return $_DirectroyGroupStatus

    }

}

function Set-HPOVLdapGroupRole 
{

	# .ExternalHelp HPOneView.200.psm1-help.xml
    
	[CmdletBinding(DefaultParameterSetName = 'Default')]
	param
	(

		[parameter(Position = 0, Mandatory, HelpMessage = "Enter the Directory name", ParameterSetName = 'Default')]
		[ValidateNotNullOrEmpty()]
		[alias("d","domain","directory")]
		[string]$authProvider,

		[parameter(Position = 1, Mandatory, ValueFromPipeline, HelpMessage = "Enter the Directroy Group name", ParameterSetName = 'Default')]
		[ValidateNotNullOrEmpty()]
		[alias("g","name",'GroupName')]
		[Object]$Group,

		[parameter(Position = 2, Mandatory, HelpMessage = "Enter the Directroy Group roles in System.Array format", ParameterSetName = 'Default')]
		[ValidateNotNullOrEmpty()]
		[alias("r","role")]
		[Array]$Roles,

		[parameter(Position = 3, Mandatory, HelpMessage = "Enter the user name", ParameterSetName = 'Default')]
		[ValidateNotNullOrEmpty()]
		[alias("u")]
		[string]$UserName,

		[parameter(Position = 4, Mandatory, HelpMessage = "Enter the password", ParameterSetName = 'Default')]
		[alias("p")]
		[ValidateNotNullOrEmpty()]
		[SecureString]$Password,
		
		[parameter(Mandatory = $false, ValueFromPipelineByPropertyName, ParameterSetName = 'ApplianceRequired')]
		[ValidateNotNullorEmpty()]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
	{
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		#No need to validate ApplianceConnection, as object is passed via pipeline.
		if (-not($PSboundParameters['Group']))
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Pipeline input."
			
			$PipelineInput = $True

		}

		else
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

			$c = 0

			ForEach ($_Connection in $ApplianceConnection) 
			{

				Try 
				{
	
					$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}
						
		}

		$_DirectoryGroupsToUpdate = New-Object System.Collections.ArrayList
		$_DirectoryGroupStatus    = New-Object System.Collections.ArrayList

		#Decrypt the password
		$_decryptPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($password))

    }

	Process 
	{
 
        if ($PipelineInput)
		{

			#Validate pipeline input is user object
			if (-not($Group -is [PSCustomObject]) -and -not($Group.category -eq 'users'))
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid Group provided: $($Group | FL * | Out-String)"

				$errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryGroupException InvalidDirectoryGroupObject InvalidArgument "Group" -TargetType 'PSObject' -Message "The Group parameter value is not a valid Directory Group object resource.  Object category provided '$($Group.category)', allowed object category value 'users'.  Please verify the input object and try again."
				$pscmdlet.ThrowTerminatingError($errorRecord)

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Adding Group to process collection: $($Group | FL * | Out-String)"

			[void]$_DirectoryGroupsToUpdate.Add($Group)

		}

		else
		{

			ForEach ($_Connection in $ApplianceConnection)
			{

				try 
				{ 
					
					$_GroupObject = Get-HPOVUser $userName -ApplianceConnection $_Connection
				
				}
        
				#If not found, throw error
				catch [HPOneView.Appliance.LdapDirectoryGroupException]
				{
				
				    #Generate terminating error
				    $errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryGroupException AuthDirectoryGroupResourceNotFound ObjectNotFound 'Group' -Message "Group `'$Group`' was not found. Please check the spelling, or create the user and try again."
				    $pscmdlet.ThrowTerminatingError($errorRecord)
				
				}

				Catch
				{

					$pscmdlet.ThrowTerminatingError($_)

				}

				[void]$_DirectoryGroupsToUpdate.Add($_GroupObject)

			}

		}

    }

	End
	{

		ForEach ($_Group in $_DirectoryGroupsToUpdate)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Group: $($_Group.egroup)"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Original Group object: $($_Group | FL * | Out-String)"

			#Validate roles provided are allowed.
			$_unsupportedRoles = New-OBject System.Collections.ArrayList
			$_NewGroupRoles    = New-Object System.Collections.ArrayList

			#Validate roles provided are allowed.
			foreach ($_role in $Roles) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing role: $_role"

				if (-not ((${Global:ConnectedSessions} | ? Name -EQ $_Group.ApplianceConnection.Name).ApplianceSecurityRoles -contains $_role)) 
				{ 
							
					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid or unsupported"

					[void]$_unsupportedRoles.Add($_role)
						
				}

				else
				{

					Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Supported"

					$_role.substring(0,1).ToUpper()+$_role.substring(1).tolower()

					[void]$_NewGroupRoles.Add($_role)

				}

			}

			if ($_unsupportedRoles.count -ge 1) 
			{ 
        
				$errorRecord = New-ErrorRecord ArgumentException UnsupportedRolesFound InvalidArgument $($MyInvocation.InvocationName.ToString().ToUpper()) -Message "The '$($_unsupportedRoles -join ", ")' role(s) is/are not supported or the correct names.  Please validate the -roles parameter contains one or more valid roles.  Allowed roles are: $((${Global:ConnectedSessions} | ? Name -EQ $_Connection.Name).ApplianceSecurityRoles -join ", ")"
				$PSCmdlet.ThrowTerminatingError($errorRecord)            
						
			}

			$_Group.roles = $_NewUserRoles

			$_UpdateDirectroyGroup = NewObject -DirectoryGroup
			$_UpdateDirectroyGroup.group2rolesPerGroup  = $_Group
			$_UpdateDirectroyGroup.credentials.userName = $UserName
			$_UpdateDirectroyGroup.credentials.password = $_decryptPassword
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Updated Group object: $($_UpdateDirectroyGroup | FL * | Out-String)"

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Sending request to update `'$($_Group.egroup)`' group at '$authnEgroupRoleMappingUri'"

			Try
			{

				$_resp = Send-HPOVRequest $authnEgroupRoleMappingUri PUT $updateUser -Hostname $_User.ApplianceConnection.Name

			}
            
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$_resp.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.User')

			[void]$_DirectoryGroupStatus.Add($_resp)

		}
        
		Return $_DirectoryGroupStatus

	}

}

function Remove-HPOVLdapGroup 
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = "default", SupportsShouldProcess = $True, ConfirmImpact = 'High')]
	param 
	(

		[parameter(Mandatory, ValueFromPipeline, HelpMessage = "Enter the Directory Group name", Position = 0, ParameterSetName = "default")]
		[ValidateNotNullOrEmpty()]
		[alias('g','Group')]
		[Object]$Name,
	
		[parameter(Mandatory = $False, ValueFromPipelineByPropertyName, ParameterSetName = "ApplianceRequired", position = 1)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = $Null

	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $_tmpApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] {

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		if (-not($PSBoundParameters['Name'])) { $PipelineInput = $True }

		$_TaskCollection  = New-Object System.Collections.ArrayList
		$_GroupCollection = New-Object System.Collections.ArrayList

    }

	Process 
	{
 
		if ($PipelineInput) 
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Group Object provided: $($Name | FL * | Out-String)"

			If ('users' -contains $Name.category)
			{

				If (-not($Name.ApplianceConnection))
				{

					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "Group:$($Name.Name)" -TargetType PSObject -Message "The Group object resource provided is missing the source ApplianceConnection property.  Please check the object provided and try again." #-verbose
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				[void]$_GroupCollection.Add($Name)

			}

			else
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "Name" -TargetType PSObject -Message "The Group object resource is not an expected category type [$($Name.category)].  The allowed resource category type is 'users'.  Please check the object provided and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

		}

		else 
		{

			ForEach ($_Connection in $ApplianceConnection)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Appliance $($_Connection.Name) (of $($ApplianceConnection.Count))"

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Group Name $($Name)"

				Try
				{

					$_Group = Get-HPOVLdapGroup $Name -ApplianceConnection $_Connection

					$_Group | % {

						[void]$_GroupCollection.Add($_)

					}

				}

				Catch
				{

					if ($_.FullyQualifiedErrorId -match 'AuthDirectoryGroupResourceNotFound')
					{

						$errorRecord = New-ErrorRecord HPOneView.Appliance.LdapDirectoryGroupException AuthDirectoryGroupResourceNotFound ObjectNotFound 'Name' -Message "The Directory Group '$Name' was not found on Appliance '$($_Connection.Name)'." #-verbose
						$PSCmdlet.WriteError($errorRecord)

					}

					else
					{

						$PSCmdlet.ThrowTerminatingError($_)

					}

				}				

			}

		}

	}

	End
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($_GroupCollection.count) Directory Group resources to remove."

		#Process Network Resources
		ForEach ($_Group in $_GroupCollection)
		{

			if ($PSCmdlet.ShouldProcess($_Group.ApplianceConnection.Name,"remove directory group '$($_Group.egroup)'")) 
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing Directory Group '$($_Group.egroup)' from appliance '$($_Group.ApplianceConnection.Name)'."

				Try
				{
					
					$_resp = Send-HPOVRequest $_Group.Uri DELETE -Hostname $_Group.ApplianceConnection.Name

					$_resp | Add-Member -NotePropertyName name -NotePropertyValue $_Group.egroup

					[void]$_TaskCollection.Add($_resp)

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			elseif ($PSBoundParameters['WhatIf'])
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] WhatIf parameter was passed."

			}

			Return $_TaskCollection

		}

	}

}

Function Get-HPOVAuditLog 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default")]
    Param 
	(

		[parameter(Mandatory = $false, ParameterSetName = 'default')]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_AllAudiLogs = New-Object System.Collections.ArrayList
        
	}
	
	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Try
			{
				
				#Send the request
				$_AuditLogs = Send-HPOVRequest $applAuditLogsUri -Hostname $_Connection

				$_AuditLogs | % {

					$_.PSObject.TypeNames.Insert(0,'HPOneView.Appliance.AuditLogEntry')

					[void]$_AllAudiLogs.Add($_)

				}

			}

			Catch [System.Net.WebException]
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

    }

	End
	{

		Return $_AllAudiLogs

	}

}

Function Download-HPOVAuditLog 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding(DefaultParameterSetName = "default")]
    Param 
	(

        [parameter(Position = 0, Mandatory = $false, ValueFromPipeline = $false, ParameterSetName = "default", HelpMessage = "Specify the folder location to save the audit log file.")]
		[ValidateNotNullofEmpty()]
        [Alias("save")]
        [string]$Location = (get-location).Path,
		
		[parameter(Mandatory = $false, ParameterSetName = 'Export')]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_GlobalAuthDirectorySettings = New-Object System.Collections.ArrayList

		#Validate the path exists.  If not, create it.
		if (!(Test-Path $Location)){ 
            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Directory does not exist.  Creating directory..."
            New-Item $Location -itemtype directory
        }
        
	}
	
	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Try
			{
				#Send the request
				#Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Please wait while the appliance backup is generated.  This can take a few minutes..."
	
				#Now that the Support Dump has been requested, download the file
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Downloading audit log to $($Location)"

				Download-File $applAuditLogDownloadUri $_Connection $Location

			}

			Catch [System.Net.WebException]
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

    }

}

#######################################################
# Alerts & Events: 
#

function Get-HPOVAlert 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
	
	[CmdletBinding(DefaultParameterSetName = "Default")]

    Param
	(

		[parameter(Position = 0, Mandatory = $false, ValueFromPipeline, HelpMessage = "Resource URI or Object (i.e. Get-HPOV*)", ParameterSetName = "ServerProfile")]
		[parameter(Position = 0, Mandatory = $false, ValueFromPipeline, HelpMessage = "Resource URI or Object (i.e. Get-HPOV*)", ParameterSetName = "Default")]
		[ValidateNotNullOrEmpty()]
		[alias('resourceUri')]
		[Object]$Resource = $null,

		[parameter(Position = 1, Mandatory = $false, HelpMessage = "Alert Severity 'OK','Critical','Disabled','Warning', or 'Unknown'.", ParameterSetName = "ServerProfile")]
		[parameter(Position = 1, Mandatory = $false, HelpMessage = "Alert Severity 'OK','Critical','Disabled','Warning', or 'Unknown'.", ParameterSetName = "Default")]
		[ValidateNotNullOrEmpty()]
		[ValidateSet('OK','Critical','Disabled','Warning','Unknown')]
		[string]$Severity = $null,

		[parameter(Position = 2, Mandatory = $false, HelpMessage = "Alert/Health Category", ParameterSetName = "Default")]
		[ValidateNotNullOrEmpty()]
		[ValidateSet('Appliance', 'DeviceBay', 'Enclosure', 'Fan', 'Firmware', 'Host', 'Instance', 'InterconnectBay', 'LogicalSwitch', 'Logs', 'ManagementProcessor', 'Memory', 'Network', 'Operational', 'Power', 'Processor', 'RemoteSupport', 'Storage', 'Thermal', 'Unknown')]
		[string]$HealthCategory = $null,

		[parameter(Mandatory = $false, HelpMessage = "Filter by User",Position=3, ParameterSetName = "Default")]
		[ValidateNotNullOrEmpty()]
		[String]$AssignedToUser = $null,

		[parameter(Mandatory = $false,  HelpMessage = "Alert state",Position=4, ParameterSetName = "Default")]
		[ValidateNotNullOrEmpty()]
		[String]$AlertState = $null,
		
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_AlertResources = New-Object System.Collections.ArrayList

		if (-not $PSBoundParameters['resource']) { $Pipelineinput = $True }
        
	}
	
	Process 
	{

		If ($Pipelineinput -and $Resource -ne $null)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resource provided via pipeline."

			#Input object is a Server Profile resource, get special alerts URI
			if ($Resource.category -eq "server-profiles") 
			{
        
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Input object is a Server Profile. Getting special URI for alert messages."
            
				Try
				{

					$_serverAlerts = Send-HPOVRequest ($resource.uri + "/messages") -Hostname $Resource.ApplianceConnection.Name

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
				

				foreach ($_alert in $_serverAlerts) 
				{

					switch ($_alert | select * -ExcludeProperty etag,type | get-member -MemberType NoteProperty | select -expandproperty Name) {

						"connections" 
						{ 
							
							if ($alert.connections.count -gt 0) 
							{ 
								
								$_alert.connections | % { 
									
									$_.PSObject.TypeNames.Insert(0,”HPOneView.Alert")

									[void]$_Alerts.members.Add($_.messages)
								
								}

							} 
						
						}

						"serverHardware" 
						{ 
							
							if ($alert.serverHardware.count -gt 0) 
							{

								$_alert.serverHardware | % { 
									
									$_.PSObject.TypeNames.Insert(0,”HPOneView.Alert")

									[void]$_Alerts.members.Add($_.messages)
								
								}
							
							} 
						
						}
						
						"firmwareStatus" 
						{ 
							
							if ($alert.firmwareStatus.count -gt 0) 
							{ 
								
								$_alert.firmwareStatus | % { 
									
									$_.PSObject.TypeNames.Insert(0,”HPOneView.Alert")

									[void]$_Alerts.members.Add($_.messages)
								
								}
							
							} 
						
						}
                
					}

				}

				$_Alerts.count = $_Alerts.members.count
        
			}

			else 
			{

				$uri = $alertsUri + "?start=0&count=-1"

				#Generate Error, unsupported pipeline input
				if ($resource -is [String]) 
				{ 
					
					$PSCmdlet.ThrowTerminatingError($ErrorRecord)
				
				}

				elseif ($resource -is [PsCustomObject]) 
				{ 
					
					$uri += "&filter=resourceUri=`'$($resource.uri)`'" 
				
				}
            
				if ($severity) 
				{ 
					
					$uri += "&filter=severity='$severity'" 
				
				}
            
				if ($healthCategory) 
				{
					
					 $uri += "&filter=healthCategory='$healthCategory'" 
				
				}
            
				if ($AssignedToUser) 
				{ 
					
					$uri += "&filter=assignedTOuter='$AssignedToUser'" 
				
				}
            
				if ($alertState) 
				{ 
					
					$alertState = $alertState.ToLower(); 

					$alertState = $alertState.substring(0,1).ToUpper()+$alertState.substring(1).tolower(); 

					$uri += "&filter=alertState=`'$alertState`'" 
				
				}

				Try
				{

					$_ResourceAlerts = Send-HPOVRequest $uri -Hostname $Resource.ApplianceConnection.Name

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
        
				$_ResourceAlerts.members | % { 
					
					$_.PSObject.TypeNames.Insert(0,”HPOneView.Alert")

					[void]$_Alerts.members.Add($_.messages)
				
				
				}

			}

			[void]$_AlertResources.Add($_Alerts)

		}

		#Process
		Else
		{

			ForEach ($_Connection in $ApplianceConnection)
			{

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

				$uri = $alertsUri

				if ($resource -is [String]) 
				{ 
					
					$_AppendUri += "&filter=resourceName='$resource'" 
				
				}

				elseif ($resource -is [PsCustomObject]) 
				{ 
					
					$_AppendUri += "&filter=resourceUri=`'$($resource.uri)`'" 
				
				}
            
				if ($PSBoundParameters['severity']) 
				{ 
					
					$_AppendUri += "&filter=severity='$severity'" 
				
				}
            
				if ($PSBoundParameters['healthCategory']) 
				{
					
					 $_AppendUri += "&filter=healthCategory='$healthCategory'" 
				
				}
            
				if ($PSBoundParameters['AssignedToUser']) 
				{ 
					
					$_AppendUri += "&filter=assignedToUser'$AssignedToUser'" 
				
				}
            
				if ($PSBoundParameters['alertState']) 
				{ 
					
					$alertState = $alertState.ToLower(); 

					$alertState = $alertState.substring(0,1).ToUpper()+$alertState.substring(1).tolower(); 

					$_AppendUri += "&filter=alertState=`'$alertState`'" 
				
				}

				if ($_AppendUri)
				{

					$uri += "?" + $_AppendUri.SubString(1)

				}

				Try
				{

					$_ResourceAlerts = Send-HPOVRequest $uri -Hostname $_Connection

				}

				Catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}
        
				$_ResourceAlerts.members | % { 
					
					$_.PSObject.TypeNames.Insert(0,”HPOneView.Alert")

					[void]$_AlertResources.Add($_)
				
				
				}

			}

		}

    }

    End 
	{

        Return $_AlertResources

    }

}

function Set-HPOVAlertAssignToUser 
{
    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param
	()

	Write-Warning 'This CMDLET is deprecated. Please use Set-HPOVAlert.'

}

function Set-HPOVAlert
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param
	(

        [parameter (Position = 0, Mandatory, ValueFromPipeline)]
        [ValidateNotNullOrEmpty()]
		[alias('alertUri')]
        [Object]$Alert,

        [parameter (Position = 1, Mandatory = $false)]
        [string]$AssignToUser = $null,

        [parameter (Position = 2, Mandatory = $false)]
        [ValidateNotNullOrEmpty()]
        [String]$Notes,

        [parameter (Mandatory = $true, ParameterSetName = 'Cleared')]
        [switch]$Cleared,

        [parameter (Mandatory = $true, ParameterSetName = 'Active')]
        [switch]$Active,

		[parameter(Mandatory = $true, ValueFromPipelineByPropertyName)]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = $Null

	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		if (-not($PSBoundParameters['alert'])) 
		{ 
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Alert Object via pipeline"

			$Pipelineinput = $True 
		
		}

		else
		{

			if (-not($Alert -is [PSCustomObject]) -and $Alert.category -ne 'alerts')
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidAlertObject InvalidArgument 'Alert' -TargetType $Alert.GetType().Name -Message 'The Alert parameter value is not a PSCustomObject or contains a valid resource category.  Please check the value and try again.'
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

			Try 
			{
			
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$_AlertResources = New-Object System.Collections.ArrayList

    }

    Process 
	{

		$_AlertUpdateObject = NewObject -UpdateAlert

		if ($PSBoundParameters['Cleared'])
		{

			$_AlertUpdateObject.alertState = 'Cleared';

		}

		elseif ($PSBoundParameters['Active'])
		{

			$_AlertUpdateObject.alertState = 'Active';

		}
			
		$_AlertUpdateObject.assignedToUser = $AssignToUser;
		$_AlertUpdateObject.notes          = $Notes;

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Resource provided via pipeline."

		#Validate input object is correct
		if ($Alert.category -ne 'alerts')
		{

			$errorRecord = New-ErrorRecord InvalidOperationException InvalidAlertObject InvalidArgument 'Alert' -TargetType $Alert.GetType().Name -Message 'The Alert parameter value is not a PSCustomObject or contains a valid resource category.  Please check the value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}
			
		if (-not($Alert.ApplianceConnection.Name))
		{

			$errorRecord = New-ErrorRecord InvalidOperationException InvalidAlertObject InvalidArgument 'Alert' -TargetType $Alert.GetType().Name -Message 'The Alert parameter value does not contain a valid ApplianceConnection property.  Please check the value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		if ($Pipeline)
		{

			$ApplianceConnection = $Alert.ApplianceConnection.Name

		}
			
		Try
		{

			if ($Alert.eTag)
			{

				$_AlertUpdateObject.eTag = $Alert.eTag

			}

			$_resp = Send-HPOVRequest $Alert.uri PUT $_AlertUpdateObject -Hostname $ApplianceConnection.ApplianceConnection.Name
		
			$_resp.PSObject.TypeNames.Insert(0,"HPOneView.Alert")

		}

		Catch
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}
        

		[void]$_AlertResources.Add($_resp)

	}

	End
	{        

        return $_AlertResources

    }

}

function Clear-HPOVAlert  
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdLetBinding()]
    Param
	()

	Write-Warning 'This CMDLET is deprecated. Please use Set-HPOVAlert.'

}
    
function Get-HPOVLicense 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdletBinding(DefaultParameterSetName = "Default")]
    param
	(

        [Parameter(Position = 0, Mandatory = $False, ParameterSetName = "Default", HelpMessage = "Please specify the type of license you wish to generate a report for. Accepted values are `"OneView`", `"OneViewNoiLO`", or `"all`".")]
        [ValidateSet("OneViewAdvanced", "OneView", "OneViewAdvancedNoiLO", "OneViewNoiLO","all")]
        [String]$Type,
        
        [Parameter(Position = 1, Mandatory = $False, ParameterSetName = "Default", HelpMessage = "Please specify the license state you wish to generate a report for. Accepted values are `"Unlicensed`" or `"Permanent`".")]
        [ValidateSet("Unlicensed", "Permanent",$null)]
        [String]$State,

		[Parameter(Mandatory = $false, ParameterSetName = "Default")]
		[Switch]$Report,
		
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
    )

    begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_LicenseResources = New-Object System.Collections.ArrayList

		[string]$filter = $null
		
        If ($PSboundParameters['Type'])
		{

            write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] License Type: $Type"

            switch ($Type)
			{

                #User wants the HP OneView License report
                {$_ -match "OneView","OneViewAdvanced"} 
				{

                    $filter += "?filter=`"product='HP OneView Advanced'`""

                }

                #User wants the HP OneView without iLO License Report
                {$_ -match "OneViewNoiLO","OneViewAdvancedNoiLO"} 
				{

                    $filter += "?filter=`"product='HP OneView Advanced w/o iLO'`""

                }

            }

        }

        If ($PSboundParameters['State'])
		{

            write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] License $State State"

			#Check to see if the license type/product was specified, as we would have an existing filter value
            If ($filter)
			{

				$filter += "&filter=`"licenseType='$State'`""

			}
			ElseIf (-not($filter))
			{

				$filter += "?filter=`"licenseType='$State'`""

			}

        }

		ElseIf (-not($PSboundParameters['State']))
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] No license state provided ($State)"

        }
  
        If ($PSboundParameters['Report'])
		{
			
			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Generating detailed report"

			$disSummary = $null
			
        }

        Elseif (-not($PSboundParameters['Report']))
		{

            Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Generating Summary Report"
			
			#Check to see if the license type/product was specified, as we would have an existing filter value
            If ($filter)
			{

				$disSummary = "&view=summary"

			}
			ElseIf (-not($filter))
			{

				$disSummary = "?view=summary"

			}

        }
    
    }

    process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"
		
			#Display verbose data of what will be sent to Send-HPOVRequest
			write-verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] $(($script:licensesUri + $filter + $disSummary) + " GET")"
			
			Try
			{

				#Send the request	
				$ret = Send-HPOVRequest ($script:licensesUri + $filter + $disSummary) GET -Hostname $_Connection

			}
			
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$ret.members | ForEach { 

				$_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.License")
					
				if ($_.nodes) 
				{ 
						
					$_.nodes | % { $_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.License.Node") } 
					
				} 

				[void]$_LicenseResources.Add($_)
				
			}

		}

	}

	end
	{

		if ($PSboundParameters['Report'])
		{

			ForEach ($_LicenseObject in $_LicenseResources)
			{

				$a = @{Expression={$_.Product};Label="License Name"},
					 @{Expression={$_.AvailableCapacity};Label="Available"},
					 @{Expression={$_.TotalCapacity};Label="Total"},
					 @{Expression={$licenseGroup.nodes.count};Label="Associated Nodes"}
			 
				$now = (Get-Date).ToShortDateString()

				ForEach ($licenseGroup in $_LicenseObject)
				{

				    $licenseGroup | Format-Table $a -autosize -wrap
				
				    $b = @{Expression={$_.nodeName};Label="Device"},
				         @{Expression={$licenseGroup.LicenseType};Label="License Type"},
				         @{Expression={
				        
							if ($licenseGroup.LicenseType -eq "Unlicensed") 
							{
								 
								$appliedDate = (Get-Date($_.appliedDate)).ToShortDateString()
								
								$daysToAdd = 60 
									
							}

							elseif ($licenseGroup.LicenseType -eq "Evaluation") 
							{  
								
								$appliedDate = (Get-Date($licenseGroup.created)).ToShortDateString()
								
								$daysToAdd = 365 

							}

							$expire = (Get-Date($appliedDate)).AddDays($daysToAdd)

							$warnDate = new-timespan -start $now -end $expire

							if ($warnDate.Days -eq 0 -or $warnDate.Days -lt 0) 
							 {

								$appliedDate = $appliedDate + " (EXPIRED)"

							}
							  
							elseif($warnDate.Days -le 30) 
							{
								
								$appliedDate = $appliedDate + " (Expires in $($warnDate.days) days)"

							}
							
				            $appliedDate

				        };Label="Applied Date"}

				    $licenseGroup.nodes | sort-object -property nodeName | Format-Table $b -autosize -wrap | Out-String | ForEach-Object {

				        $_.Split("`n") | ForEach-Object {

				            if($_ -match "EXPIRED") { Write-Host -ForegroundColor Red $_ }
				            elseif($_ -match "Expires in"){ Write-Host -ForegroundColor Yellow $_ }
				            else{ Write-Host $_ }
				       
				        }

				    } 
 
				}

			}

		}

        else 
		{

            Return $_LicenseResources

        }

    }

}

function New-HPOVLicense 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdletBinding(DefaultParameterSetName = "licenseKey")]
    param
	(

        [Parameter(Position=0, Mandatory = $true, ParameterSetName = "licenseKey",HelpMessage = "Please specify the license you wish to install")]
        [ValidateNotNullOrEmpty()]
        [String]$LicenseKey,
        
        [Parameter(Position=0, Mandatory = $true,ParameterSetName = "InputFile",HelpMessage = "Please specify the license file")]
        [ValidateScript({Test-Path $_})]
        [String]$File,
		
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = $null

    )

	Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if ($ApplianceConnection.Count -eq 0)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoAuthSessionFound InvalidArgument 'ApplianceConnection' -Message 'No ApplianceConnections were found.  Please use Connect-HPOVMgmt to establish an appliance connection.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		if ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MustSpecifyUniqueConnection InvalidArgument 'ApplianceConnection' -Message 'Multiple Appliance Connections were specified.  This cmdlet only supports a single appliance connection per request.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		Try 
		{
			
			$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

		}

		Catch [HPOneview.Appliance.AuthSessionException] 
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_connection -Message $_.Exception.Message -InnerException $_.Exception
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		Catch 
		{

			$PSCmdlet.ThrowTerminatingError($_)

		}

		$_LicenseResponseCollection = New-Object System.Collections.ArrayList

		if ($file)
		{

			$_licenseKey = Get-Content $file

		}

	}

    Process 
	{
	    
		#Loop through all keys, and add one by one.
		foreach ($_lk in $_licenseKey)
		{

			$_key = [PsCustomObject] @{
	        	type = "License";
	        	key  = $lk
	    	}

			Try 
			{
	    	
				$_ret = Send-HPOVRequest $licensesUri $_key -Hostname $ApplianceConnection

			}

			Catch 
			{

				Switch ($_.FullyQualifiedErrorId)
				{

					"LICENSE_ALREADY_EXISTS"
					{

						$errorRecord = New-ErrorRecord HPOneview.Appliance.LicenseKeyException LicenseKeyAlreadyExists ResourceExists 'LicenseKey' -Message "The license key provided already exists on the appliance.  Please correct the value, and try again." #-verbose

					}

					"ADD_LICENSE_FAILED"
					{

						$errorRecord = New-ErrorRecord HPOneview.Appliance.LicenseKeyException InstallLicenseFailure InvalidResult 'LicenseKey' -Message $_.Message #-verbose						

					}

				}

				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			[void]$_LicenseResponseCollection.Add($_ret)
			
		}

	}

	End 
	{

		Return $ret
	
	}

}

function Remove-HPOVLicense 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdletBinding(DefaultParameterSetName = "PipelineDefault", SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    param
	(

		[parameter(Mandatory, ValueFromPipeline, ParameterSetName = "PipelineDefault", HelpMessage = "Specify the license to remove.", Position = 0)]
		[parameter(Mandatory, ParameterSetName = "ApplianceRequired", position = 0)]
        [ValidateNotNullOrEmpty()]
        [Alias('uri', 'name', 'license')]
        [System.Object]$Resource = $null,
    
		[parameter(Mandatory = $true, ValueFromPipelineByPropertyName, ParameterSetName = "ApplianceRequired", position = 1)]
		[parameter(Mandatory = $true, ValueFromPipelineByPropertyName, ParameterSetName = "PipelineDefault", position = 1)]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = $Null

    )

    begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_.Exception)

			}

			$c++

		}

		if (-not($PSBoundParameters['Resource'])) { $PipelineInput = $True }

		$_ResponseCollection = New-Object System.Collections.ArrayList
		$_LicenseCollection = New-Object System.Collections.ArrayList

    }

    Process 
	{

		if ($PipelineInput -and $Resource -ne $null) 
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing Pipeline input"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] License Object provided: $($Resource | FL * | Out-String)"

			if ('licenses' -contains $Resource.category)
			{

				if (-not($Resource.ApplianceConnection))
				{

					$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "License:$($Resource.uri)" -TargetType PSObject -Message "The License resource provided is missing the source ApplianceConnection property.  Please check the object provided and try again." #-verbose
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				[void]$_LicenseCollection.Add($Resource)

			}

			else
			{

				$errorRecord = New-ErrorRecord InvalidOperationException InvalidArgumentValue InvalidArgument "License:$($Resource.uri)" -TargetType PSObject -Message "The License resource is not an expected category type [$($License.category)].  Allowed resource category types are 'licenses'.  Please check the object provided and try again." #-verbose
                $PSCmdlet.ThrowTerminatingError($errorRecord)

			}

		}

		else 
		{

			foreach ($license in $Resource) 
			{

				switch ($license.GetType().name) 
				{

					"String" 
					{ 
                
						if ([System.Uri]::IsWellFormedUriString($license,'Relative') -and $license.StartsWith($script:licensesUri)) 
						{
                    
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] License URI provided: $license"
							
							# // NEED APPLIANCE NAME HERE with If Condition
							try
							{

								$license = Send-HPOVRequest $license -ApplianceConnection $ApplianceConnection

							}
							
							catch
							{

								$PSCmdlet.ThrowTerminatingError($_)

							}
                    
						}

						elseif ($license.StartsWith("/rest/")) 
						{
                     
							#Invalid URI, so error
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid License URI provided: $license"

							$errorRecord = New-ErrorRecord ArgumentException InvalidLicenseURI InvalidArgument 'Remove-HPOVLicense' -Message "The provided URI value for the -License parameter '$license' is invalid.  The License URI must begin with /rest/licenses.  Please check the value and try again." #-verbose
							$PSCmdlet.ThrowTerminatingError($errorRecord)

						}

						else 
						{

							#Invalid parameter, so error
							Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Invalid License URI provided: $license"

							$errorRecord = New-ErrorRecord ArgumentException InvalidLicenseValue InvalidArgument 'Remove-HPOVLicense' -Message "The provided value for the -License parameter '$license' is invalid.  Please check the value and try again." #-verbose
							$PSCmdlet.ThrowTerminatingError($errorRecord)
                    
						}
                
					}

					"PSCustomObject" 
					{ 
                
						#Validate the object
						if (-not($license.category -eq "licenses"))
						{

							$errorRecord = New-ErrorRecord ArgumentException InvalidLicenseCategory InvalidArgument 'Remove-HPOVLicense' -Message "Invalid -License parameter value.  Expected Resource Category 'licenses', received '$($license.category)'." #-verbose
							$PSCmdlet.ThrowTerminatingError($errorRecord)

						}              
                
					}

				}

				[void]$_LicenseCollection.Add($license)
			}

        }

    }

    End 
	{
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing $($_LicenseCollection.count) License resources to remove."

		foreach ($license in $_LicenseCollection)
		{

			if ($pscmdlet.ShouldProcess($license.product,'remove license $($license.product) from appliance $($license.ApplianceConnection.Name)'))
			{    

				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Removing License '$($license.product)' [$($license.productDescription)]."
				Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] URI: '$($license.uri)'"

				try
				{

					# // NEED APPLIANCE NAME HERE with If Condition
					$_resp = Send-HPOVRequest $license.uri DELETE -Hostname $license.ApplianceConnection.Name

				}

				catch
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

			}

			elseif ($PSBoundParameters['whatif'].ispresent) 
			{ 
                           
				write-warning "-WhatIf was passed, would have proceeded with removing '$($license.product)'."
				$_resp = $null
            
			}
			else 
			{

				#If here, user chose "No", end processing
				write-host ""
				write-warning "Not removing license, $($license.product)."
				write-host ""
                    
				$_resp = $null

			}

			$_ResponseCollection.Add($_resp)

		}

		return $_ResponseCollection

    }

}

function Set-HPOVSMTPConfig 
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = "Default")]
	param
	(
	
		[parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Sender E-Mail address to assign to the appliance.", ParameterSetName = "Disabled")]
        [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Sender E-Mail address to assign to the appliance.", ParameterSetName = "Default")]
		[ValidateNotNullOrEmpty()]
        [validatescript({if ($_ -as [Net.Mail.MailAddress]) {$true} else { Throw "The parameter value is not an email address. Please correct the value and try again." }})]
		[System.String]$SenderEmailAddress,

		[parameter(Position = 0, Mandatory = $false, ValueFromPipeline = $True, HelpMessage = "Provide SMTP Server name if ", ParameterSetName = "Disabled")]
        [parameter(Position = 0, Mandatory = $false, ValueFromPipeline = $True, HelpMessage = "Help Message", ParameterSetName = "Default")]
        [Alias('server')]		
        [ValidateNotNullOrEmpty()]
		[System.String]$SmtpServer,

        [parameter(Position = 1, Mandatory = $false, ValueFromPipeline = $false, HelpMessage = "Help Message", ParameterSetName = "Disabled")]
		[parameter(Position = 1, Mandatory = $false, ValueFromPipeline = $false, HelpMessage = "Help Message", ParameterSetName = "Default")]
		[Alias('port')]
		[ValidateNotNull()]
		[System.Int32]$SmtpPort = 25,

		[parameter(Position = 2, Mandatory = $false, ValueFromPipeline = $True, HelpMessage = "Help Message", ParameterSetName = "Disabled")]
        [parameter(Position = 2, Mandatory = $false, ValueFromPipeline = $True, HelpMessage = "Help Message", ParameterSetName = "Default")]
		[ValidateNotNullOrEmpty()]
		[System.String]$Password,

		[parameter(Mandatory = $false, HelpMessage = "Help Message", ParameterSetName = "Disabled")]
		[Switch]$alertEmailDisabled,

		[parameter(Mandatory = $false, HelpMessage = "Help Message", ParameterSetName = "Default")]
		[Switch]$alertEmailEnabled,
    
		[parameter(Mandatory = $False, ValueFromPipelineByPropertyName, ParameterSetName = "ApplianceRequired", position = 1)]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = ${Global:ConnectedSessions}
		
	)
	
	Begin 
	{
	
		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
	
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_.Exception)

			}

			$c++

		}

		if (-not($PSBoundParameters['Resource'])) { $PipelineInput = $True }

		$_ResponseCollection = New-Object System.Collections.ArrayList

        $smtpConfig = NewObject -SmtpConfig
		
		[PSCustomObject]@{
        
            type               = "EmailNotification";
            senderEmailAddress = if ($alertEmailEnabled.IsPresent -and -not $senderEmailAddress) { Throw "error" }
                                 else { $senderEmailAddress };
            password           = $password;
            smtpServer         = $SmtpServer;
            smtpPort           = $Port;
            alertEmailDisabled = if ($alertEmailDisabled.IsPresent) { $True }
                                 elseif ($alertEmailEnabled.IsPresent) { $False }
                                 else { $False }
        
        }

	}
	
	Process 
	{

		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing SMTP Configuration"
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SMTP Configuration: $($smtpConfig | fl * -force | out-string)"

			Try
			{

				$_resp = Send-HPOVRequest $smtpNotificationConfig POST $smtpConfig -Hostname $_Connection

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			[void]$_ResponseCollection.Add($_resp)

		}

	}
	
	
	End 
	{

		Return $RespCollection
	
	}

}

function Get-HPOVSMTPConfig 
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding()]
	param
	(	
	
		[parameter(Mandatory = $false)]
		[Alias('Appliance')]
		[Array]$ApplianceConnection = ${Global:ConnectedSessions}
    
	)

    Begin 
	{

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"
		
		$c = 0
		
		ForEach ($_Connection in $ApplianceConnection) 
		{

			Try 
			{
			
				$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			$c++

		}

		$_SMTPConfigCollection = New-Object System.Collections.ArrayList

	}
	
	Process 
	{


		ForEach ($_Connection in $ApplianceConnection)
		{

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing '$($_Connection.Name)' Appliance (of $($ApplianceConnection.Count))"

			Try
			{

				$currentSmtpConfig = Send-HPOVRequest $smtpNotificationConfig -Hostname $_Connection

			}
	        
			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}
	
	        $currentSmtpConfig | % { 
				
				$_.PSObject.TypeNames.Insert(0,”HPOneView.Appliance.SmtpConfiguration") 
			
				[void]$_SMTPConfigCollection.Add($_)
			
			}	

		}

	}
	
	End 
	{

		Return $_SMTPConfigCollection
	
	}

}

function Add-HPOVSmtpAlertEmailFilter 
{

	# .ExternalHelp HPOneView.200.psm1-help.xml

	[CmdletBinding(DefaultParameterSetName = "Default")]
	param
	(
	
		[parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $false, HelpMessage = "Help Message", ParameterSetName = "Default")]
		[alias('query')]
		[ValidateNotNullOrEmpty()]
		[System.String]$filter,

        [parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $True, HelpMessage = "Sender E-Mail address to assign to the appliance.", ParameterSetName = "Default")]
		[Alias('recipients')]
        [ValidateNotNullOrEmpty()]
        [validatescript({$_ | foreach { if ($_ -as [Net.Mail.MailAddress]) {$true} else { Throw "The parameter value '$_' is not an email address. Please correct the value and try again." }}})]
		[System.Array]$Emails,

		[parameter(Mandatory = $false, ParameterSetName = "Default")]
		[Alias('Appliance')]
		[Object]$ApplianceConnection = ${Global:ConnectedSessions}

    )

    Begin 
	{

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		$c = 0

		if ($ApplianceConnection -is [Array])
		{

			$_tmpApplianceConnection = $ApplianceConnection.Clone()

			ForEach ($_Connection in $_tmpApplianceConnection) 
			{

				Try 
				{
	
					$ApplianceConnection[$c] = Test-HPOVAuth $_Connection

				}

				Catch [HPOneview.Appliance.AuthSessionException] 
				{

					$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError $_Connection -Message $_.Exception.Message -InnerException $_.Exception
					$PSCmdlet.ThrowTerminatingError($errorRecord)

				}

				Catch 
				{

					$PSCmdlet.ThrowTerminatingError($_)

				}

				$c++

			}

		}

		$colStatus = New-Object System.Collections.ArrayList

    }
     
    Process 
	{

		ForEach ($_appliance in $ApplianceConnection)
		{

		    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Getting current SMTP Configuration from '$($_appliance.Name)'."

		    $_smtpFilterConfiguration = Send-HPOVRequest $smtpNotificationConfig -Hostname $_appliance.Name
		
		    #Create new alert filter object
		    $_alertFilter = NewObject -AlertFilter
		
			$_alertFilter.filter          = "($filter)"
			$_alertFilter.displayFilter   = $filter
			$_alertFilter.userQueryFilter = $filter
			$_alertFilter.emails          = $Emails

			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Processing SMTP Alert Configuration for '$($_appliance.Name)'."
			
			Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] SMTP Appliance Filter Configuration: $($_alertFilter | fl * -force | out-string)"

			[void]$smtpFilterConfiguration.alertEmailFilters.Add($alertFilter)

			Try
			{

				$resp = Send-HPOVRequest $smtpNotificationConfig POST $smtpFilterConfiguration -Hostname $_appliance.Name

			}

			Catch
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

			[void]$colStatus.Add($resp)
			
		}

	}
	
	End 
	{
	
        Return $colStatus
	
	}

}



#Function Get-HPOVRemoteSyslog {}
#Function Set-HPOVRemoteSyslog {}
########################################################
# HP Support CMDLETs

function Enable-HPOVDebug 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml
    
    [CmdletBinding(DefaultParameterSetName = "default")]
    param
	(

        [Parameter(Position=0, Mandatory = $true, ParameterSetName = "default",HelpMessage = "Provide the debug Scope.")]
        [ValidateNotNullOrEmpty()]
        [String]$Scope,

        [Parameter(Position = 1, Mandatory = $true, ParameterSetName = "default",HelpMessage = "Provide the component Logger Name.")]
        [ValidateNotNullOrEmpty()]
        [String]$LoggerName,

        [Parameter(Position = 2, Mandatory = $true, ParameterSetName = "default",HelpMessage = "Specify the verbose log level (ERROR, WARN, DEBUG or TRACE are allowed).")]
        [ValidateNotNullOrEmpty()]
        [ValidateSet('ERROR','WARN','DEBUG','TRACE', IgnoreCase = $False)]
        [String]$Level,

		[parameter(Mandatory = $true, ParameterSetName = "default", ValueFromPipelineByPropertyName)]
		[ValidateNotNullorEmpty()]
		[object]$ApplianceConnection = $null

    )

	Begin 
	{

		[console]::WriteLine()
        Write-Warning "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        Write-Warning "!!! FOR HP SUPPORT USE ONLY. DO NOT USE UNLESS OTHERWISE INSTRUCTED TO BY HP SUPPORT !!!"
        Write-Warning "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        [console]::WriteLine() 

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$colStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

		$_debug = NewObject -ApplianceDebug

        $_debug.scope      = $Scope
        $_debug.loggerName = $LoggerName
        $_debug.level      = $Level

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting '$Level' at '$Scope`:$LoggerName'"

		Try
		{

			$resp = Send-HPOVRequest $script:applianceDebugLogSetting POST $_debug -Hostname $ApplianceConnection

		}

		Catch
		{

			"Unable to set '{0}:{1}' to '{2}' logging level. Error '{3}'" -f $Scope,$LoggerName,$Level,$_.Exception.Message

			$PSCmdlet.ThrowTerminatingError($_)

		}

		$_Status = "'{0}:{1}' successfully set to '{2}' on Appliance {3}" -f $Scope,$LoggerName,$Level,$ApplianceConnection.Name

		[void]$colStatus.Add($_Status)

    }

    End 
	{

		$colStatus

		Write-Warning "Remember to set '$Scope`:$LoggerName' back to 'INFO' with 'Disable-HPOVDebug $Scope $LoggerName'"

    }

}

function Disable-HPOVDebug 
{

    # .ExternalHelp HPOneView.200.psm1-help.xml

    [CmdletBinding(DefaultParameterSetName = "default")]
    param
	(

        [Parameter(Position=0, Mandatory = $true, ParameterSetName = "default",HelpMessage = "Provide the debug Scope.")]
        [ValidateNotNullOrEmpty()]
        [String]$Scope,

        [Parameter(Position = 1, Mandatory = $true, ParameterSetName = "default",HelpMessage = "Provide the component Logger Name.")]
        [ValidateNotNullOrEmpty()]
        [String]$LoggerName,

		[parameter(Mandatory = $true, ParameterSetName = "default", ValueFromPipelineByPropertyName)]
		[ValidateNotNullorEmpty()]
		[object]$ApplianceConnection = $null

    )

	Begin 
	{

		[console]::WriteLine()
        Write-Warning "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        Write-Warning "!!! FOR HP SUPPORT USE ONLY. DO NOT USE UNLESS OTHERWISE INSTRUCTED TO BY HP SUPPORT !!!"
        Write-Warning "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        [console]::WriteLine() 

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Bound PS Parameters: $($PSBoundParameters | out-string)"

		$Caller = (Get-PSCallStack)[1].Command

        Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Called from: $Caller"

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Verify auth"

		if (-not($ApplianceConnection -is [HPOneView.Appliance.Connection]) -and (-not($ApplianceConnection -is [System.String])))
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException InvalidApplianceConnectionDataType InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter is not type [HPOneView.Appliance.Connection] or [System.String].  Please correct this value and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		elseif  ($ApplianceConnection.Count -gt 1)
		{

			$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException MultipleApplianceConnections InvalidArgument 'ApplianceConnection' -Message 'The specified ApplianceConnection parameter contains multiple Appliance Connections.  This CMDLET only supports 1 Appliance Connection in the ApplianceConnect parameter value.  Please correct this and try again.'
			$PSCmdlet.ThrowTerminatingError($errorRecord)

		}

		else
		{

			Try 
			{
	
				$ApplianceConnection = Test-HPOVAuth $ApplianceConnection

			}

			Catch [HPOneview.Appliance.AuthSessionException] 
			{

				$errorRecord = New-ErrorRecord HPOneview.Appliance.AuthSessionException NoApplianceConnections AuthenticationError 'ApplianceConnection' -TargetType $ApplianceConnection.GetType().Name -Message $_.Exception.Message -InnerException $_.Exception
				$PSCmdlet.ThrowTerminatingError($errorRecord)

			}

			Catch 
			{

				$PSCmdlet.ThrowTerminatingError($_)

			}

		}

		$colStatus = New-Object System.Collections.ArrayList

    }

    Process 
	{

		$_debug = NewObject -ApplianceDebug

        $_debug.scope      = $Scope
        $_debug.loggerName = $LoggerName
        $_debug.level      = 'INFO'

		Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Setting '$Level' at '$Scope`:$LoggerName'"

		Try
		{

			$resp = Send-HPOVRequest $script:applianceDebugLogSetting POST $_debug -Hostname $ApplianceConnection

		}

		Catch
		{

			"Unable to set '{0}:{1}' to '{2}' logging level. Error '{3}'" -f $Scope,$LoggerName,$Level,$_.Exception.Message

			$PSCmdlet.ThrowTerminatingError($_)

		}

		$_Status = "'{0}:{1}' successfully set to '{2}' on Appliance {3}" -f $Scope,$LoggerName,$Level,$ApplianceConnection.Name

		[void]$colStatus.Add($_Status)

    }

    End 
	{

		$colStatus

		Write-Warning "Remember to set '$Scope`:$LoggerName' back to 'INFO' with 'Disable-HPOVDebug $Scope $LoggerName'"

    }

}

########################################################
# PowerShell Filters

filter ColorPattern( [string]$Pattern, [hashtable]$Color) 
{

	$split = $_ -split $Pattern

	$found = [regex]::Matches( $_, $Pattern, 'IgnoreCase' )

	for( $i = 0; $i -lt $split.Count; ++$i ) 
	{

		[ConsoleColor]$displayColor = $Color.keys | % { if ($_ -ieq $found[$i]) { $color[$_]} }
		Write-Host $split[$i] -NoNewline
		Write-Host $found[$i] -NoNewline -ForegroundColor $displayColor

	}

	[console]::WriteLine()

}

#######################################################
#  CMDLET Aliases
set-alias New-HPOVEnclosure Add-HPOVEnclosure
set-alias New-HPOVServer Add-HPOVServer 
set-alias Wait-HPOVTaskAccepted Wait-HPOVTaskStart
set-alias Get-HPOVServerHardwareTypes Get-HPOVServerHardwareType
set-alias New-HPOVStorageSystem Add-HPOVStorageSystem
set-alias New-HPOVSanManager Add-HPOVSanManager
set-alias New-HPOVStoragePool Add-HPOVStoragePool
#set-alias New-HPOVPowerDevice Add-HPOVPowerDevice 
set-alias Set-HPOVRole Set-HPOVUserRole
set-alias Get-HPOVSppFile Get-HPOVBaseline
set-alias Add-HPOVSppFile Add-HPOVBaseline
set-alias New-HPOVLdap New-HPOVLdapDirectory
set-alias Remove-HPOVLdap Remove-HPOVLdapDirectory
set-alias Get-HPOVProfile Get-HPOVServerProfile

set-alias New-HPOVProfile New-HPOVServerProfile
set-alias Get-HPOVProfileAssign New-HPOVServerProfileAssign
set-alias Copy-HPOVProfile Copy-HPOVServerProfile
set-alias Remove-HPOVProfile Remove-HPOVServerProfile 
set-alias Get-HPOVProfileConnectionList Get-HPOVServerProfileConnectionList
set-alias New-HPOVProfileConnection New-HPOVServerProfileConnection
set-alias New-HPOVProfileAttachVolume New-HPOVServerProfileAttachVolume

#######################################################
#  Export the public functions from this module
#  Generic suport functions:
Export-ModuleMember -Function Send-HPOVRequest
Export-ModuleMember -Function Connect-HPOVMgmt
Export-ModuleMember -Function Disconnect-HPOVMgmt
Export-ModuleMember -Function Ping-HPOVAddress
Export-ModuleMember -Function New-HPOVResource
Export-ModuleMember -Function Set-HPOVResource
Export-ModuleMember -Function Remove-HPOVResource
Export-ModuleMember -Function Wait-HPOVApplianceStart
Export-ModuleMember -Function Enable-HPOVDebug
Export-ModuleMember -Function Disable-HPOVDebug
Export-ModuleMember -Function Get-HPOVRemoteSyslog
Export-ModuleMember -Function Set-HPOVRemoteSyslog
Export-ModuleMember -Function Enable-HPOVMSDSC
Export-ModuleMember -Function Disable-HPOVMSDSC

#Appliance Configuration:
Export-ModuleMember -Function Get-HPOVApplianceCertificateStatus
Export-ModuleMember -Function Get-HPOVApplianceDateTime
Export-ModuleMember -Function New-HPOVApplianceSelfSignedCertificate
Export-ModuleMember -Function New-HPOVApplianceCsr
Export-ModuleMember -Function Install-HPOVApplianceCertificate
Export-ModuleMember -Function Get-HPOVVersion
Export-ModuleMember -Function Get-HPOVHealthStatus
Export-ModuleMember -Function Get-HPOVXApiVersion
Export-ModuleMember -Function Get-HPOVEulaStatus
Export-ModuleMember -Function Set-HPOVEulaStatus
Export-ModuleMember -Function Get-HPOVApplianceNetworkConfig
Export-ModuleMember -Function Set-HPOVApplianceNetworkConfig
Export-ModuleMember -Function Get-HPOVSnmpReadCommunity 
Export-ModuleMember -Function Set-HPOVSnmpReadCommunity 
Export-ModuleMember -Function Get-HPOVApplianceGlobalSetting
Export-ModuleMember -Function Set-HPOVApplianceGlobalSetting
Export-ModuleMember -Function Get-HPOVBaseline -Alias Get-HPOVSppFile
Export-ModuleMember -Function Add-HPOVBaseline -Alias Add-HPOVSppFile
Export-ModuleMember -Function Restore-HPOVCustomBaseline
Export-ModuleMember -Function Remove-HPOVBaseline
Export-ModuleMember -Function New-HPOVSupportDump
Export-ModuleMember -Function New-HPOVBackup
Export-ModuleMember -Function New-HPOVRestore
#Export-ModuleMember -Function Get-HPOVScmbCertificates // TODO
Export-ModuleMember -Function Install-HPOVUpdate
Export-ModuleMember -Function Get-HPOVPendingUpdate
Export-ModuleMember -Function Remove-HPOVPendingUpdate
#Export-ModuleMember -Function Show-HPOVSSLCertificate // TODO
Export-ModuleMember -Function Import-HPOVSSLCertificate
Export-ModuleMember -Function Restart-HPOVAppliance
Export-ModuleMember -Function Stop-HPOVAppliance

#Server hardware and enclosures:
Export-ModuleMember -Function Get-HPOVServer
Export-ModuleMember -Function Add-HPOVServer -alias New-HPOVServer
Export-ModuleMember -Function Set-HPOVServerPower
Export-ModuleMember -Function Remove-HPOVServer
Export-ModuleMember -Function Get-HPOVEnclosure
Export-ModuleMember -Function Update-HPOVEnclosure
Export-ModuleMember -Function Get-HPOVLogicalEnclosure 
Export-ModuleMember -Function Update-HPOVLogicalEnclosure 
Export-ModuleMember -Function Add-HPOVEnclosure -Alias New-HPOVEnclosure
Export-ModuleMember -Function Remove-HPOVEnclosure
Export-ModuleMember -Function Get-HPOVEnclosureGroup
Export-ModuleMember -Function New-HPOVEnclosureGroup
Export-ModuleMember -Function Remove-HPOVEnclosureGroup
Export-ModuleMember -Function Get-HPOVServerHardwareType -Alias Get-HPOVServerHardwareTypes
#Export-ModuleMember -Function Show-HPOVFirmwareReport // TODO
Export-ModuleMember -Function Invoke-HPOVVcmMigration

#Storage Systems
Export-ModuleMember -Function Get-HPOVStorageSystem
#Export-ModuleMember -Function Update-HPOVStorageSystem // TODO
Export-ModuleMember -Function Add-HPOVStorageSystem -Alias New-HPOVStorageSystem
#Export-ModuleMember -Function Remove-HPOVStorageSystem // TODO
#Export-ModuleMember -Function Get-HPOVStoragePool // TODO
Export-ModuleMember -Function Add-HPOVStoragePool -Alias New-HPOVStoragePool
#Export-ModuleMember -Function Remove-HPOVStoragePool // TODO
#Export-ModuleMember -Function Get-HPOVStorageVolumeTemplate // TODO
#Export-ModuleMember -Function New-HPOVStorageVolumeTemplate // TODO
#Export-ModuleMember -Function Remove-HPOVStorageVolumeTemplate // TODO
#Export-ModuleMember -Function Get-HPOVStorageVolumeTemplatePolicy // TODO
#Export-ModuleMember -Function Set-HPOVStorageVolumeTemplatePolicy // TODO
Export-ModuleMember -Function Get-HPOVStorageVolume
Export-ModuleMember -Function New-HPOVStorageVolume
Export-ModuleMember -Function Add-HPOVStorageVolume
#Export-ModuleMember -Function Set-HPOVStorageVolume // TODO
#Export-ModuleMember -Function Remove-HPOVStorageVolume // TODO
Export-ModuleMember -Function Get-HPOVSanManager
Export-ModuleMember -Function Add-HPOVSanManager -alias New-HPOVSanManager
#Export-ModuleMember -Function Set-HPOVSanManager // TODO
#Export-ModuleMember -Function Update-HPOVSanManager // TODO
#Export-ModuleMember -Function Remove-HPOVSanManager // TODO
Export-ModuleMember -Function Get-HPOVManagedSan
#Export-ModuleMember -Function Set-HPOVManagedSan // TODO

#Unmanaged Devices
#Export-ModuleMember -Function Get-HPOVUnmanagedDevice // TODO
#Export-ModuleMember -Function New-HPOVUnmanagedDevice // TODO
#Export-ModuleMember -Function Remove-HPOVUnmanagedDevice // TODO

#Power Devices (iPDUs):
#Export-ModuleMember -Function Get-HPOVPowerDevice // TODO
Export-ModuleMember -Function Add-HPOVPowerDevice 
#Export-ModuleMember -Function Remove-HPOVPowerDevice // TODO
#Export-ModuleMember -Function Get-HPOVPowerPotentialDeviceConnection // TODO
        
#Networking and Connections:
Export-ModuleMember -Function New-HPOVNetwork
Export-ModuleMember -Function Get-HPOVNetwork
Export-ModuleMember -Function Set-HPOVNetwork
Export-ModuleMember -Function Remove-HPOVNetwork
#Export-ModuleMember -Function New-HPOVNetworkSet // TODO
Export-ModuleMember -Function Get-HPOVNetworkSet
#Export-ModuleMember -Function Set-HPOVNetworkSet //TODO
#Export-ModuleMember -Function Remove-HPOVNetworkSet //TODO
Export-ModuleMember -Function Get-HPOVInterconnect
Export-ModuleMember -Function Get-HPOVInterconnectType
Export-ModuleMember -Function Get-HPOVLogicalInterconnect
Export-ModuleMember -Function Update-HPOVLogicalInterconnect
Export-ModuleMember -Function Install-HPOVLogicalInterconnectFirmware
Export-ModuleMember -Function Show-HPOVLogicalInterconnectMacTable
#Export-ModuleMember -Function Show-HPOVPortStatistics  // TODO
Export-ModuleMember -Function Get-HPOVLogicalInterconnectGroup
Export-ModuleMember -Function New-HPOVLogicalInterconnectGroup
Export-ModuleMember -Function Remove-HPOVLogicalInterconnectGroup
Export-ModuleMember -Function New-HPOVQosConfig
Export-ModuleMember -Function New-HPOVQosTrafficClass
Export-ModuleMember -Function Get-HPOVUplinkSet
Export-ModuleMember -Function New-HPOVUplinkSet
Export-ModuleMember -Function Get-HPOVAddressPool
Export-ModuleMember -Function Get-HPOVAddressPoolRange
Export-ModuleMember -Function New-HPOVAddressRange
        
#Server Profiles:
Export-ModuleMember -Function Get-HPOVServerProfile -Alias Get-HPOVProfile
Export-ModuleMember -Function New-HPOVServerProfile -Alias New-HPOVProfile
#Export-ModuleMember -Function New-HPOVServerProfileAssign -Alias Get-HPOVProfileAssign  // TODO
Export-ModuleMember -Function Copy-HPOVServerProfile -Alias Copy-HPOVProfile
Export-ModuleMember -Function Remove-HPOVServerProfile -Alias Remove-HPOVProfile
Export-ModuleMember -Function Get-HPOVServerProfileConnectionList -Alias Get-HPOVProfileConnectionList
Export-ModuleMember -Function Get-HPOVAvailableServerConnections
Export-ModuleMember -Function New-HPOVServerProfileConnection -Alias New-HPOVProfileConnection
Export-ModuleMember -Function New-HPOVServerProfileAttachVolume -Alias New-HPOVProfileAttachVolume
    
#Index:
#Export-ModuleMember -Function Search-HPOVIndex // TODO
#Export-ModuleMember -Function Search-HPOVAssociations // TODO

#Tasks:
Export-ModuleMember -Function Get-HPOVTask
Export-ModuleMember -Function Wait-HPOVTaskStart -alias Wait-HPOVTaskAccepted
Export-ModuleMember -Function Wait-HPOVTaskComplete
#Export-ModuleMember -Function Wait-HPOVTaskAccepted

#Security:
Export-ModuleMember -Function Get-HPOVUser
Export-ModuleMember -Function New-HPOVUser
Export-ModuleMember -Function Set-HPOVUser
Export-ModuleMember -Function Set-HPOVUserPassword
Export-ModuleMember -Function Remove-HPOVUser
Export-ModuleMember -Function Show-HPOVUserSession
Export-ModuleMember -Function Get-HPOVRole
Export-ModuleMember -Function Set-HPOVUserRole -alias Set-HPOVRole
Export-ModuleMember -Function Set-HPOVInitialPassword
Export-ModuleMember -Function Get-HPOVLdap
Export-ModuleMember -Function Get-HPOVLdapDirectory
Export-ModuleMember -Function New-HPOVLdapDirectory -Alias New-HPOVLdap
Export-ModuleMember -Function Set-HPOVLdapDefaultDirectory 
Export-ModuleMember -Function Enable-HPOVLdapLocalLogin
Export-ModuleMember -Function Disable-HPOVLdapLocalLogin
Export-ModuleMember -Function New-HPOVLdapServer
Export-ModuleMember -Function Set-HPOVLdapGroupRole
Export-ModuleMember -Function Remove-HPOVLdapDirectory -alias Remove-HPOVLdap
#Export-ModuleMember -Function Show-HPOVLdapGroups // TODO
Export-ModuleMember -Function Get-HPOVLdapGroup
Export-ModuleMember -Function New-HPOVLdapGroup
Export-ModuleMember -Function Set-HPOVLdapGroup
Export-ModuleMember -Function Remove-HPOVLdapGroup
Export-ModuleMember -Function Get-HPOVAuditLog

#Alerts:
Export-ModuleMember -Function Get-HPOVAlert
Export-ModuleMember -Function Set-HPOVAlert
Export-ModuleMember -Function Set-HPOVAlertAssignTOuter
Export-ModuleMember -Function Clear-HPOVAlert
Export-ModuleMember -Function Set-HPOVSmtpConfig
Export-ModuleMember -Function Add-HPOVSmtpAlertEmailFilter

#Licenses
Export-ModuleMember -Function Get-HPOVLicense
Export-ModuleMember -Function New-HPOVLicense
Export-ModuleMember -Function Remove-HPOVLicense

#######################################################
#  Import-Module Processing
#
#Create HPOneView HKCU key
If (-not(Test-Path "HKCU:\Software\Hewlett-Packard\HPOneView")) { New-Item "HKCU:\Software\Hewlett-Packard\HPOneView" -force | Write-Verbose }


#######################################################
# Get Library Prompt Setting
#

#Check to see if Global Policy is set first.
$regkeyGlobal   = "HKLM:\Software\Hewlett-Packard\HPOneView"
$regkeyUser     = "HKCU:\Software\Hewlett-Packard\HPOneView" 

$UserUseMSDSC   = [bool](Get-ItemProperty -LiteralPath $regkeyUser -ea silentlycontinue).'UseMSDSC'

Write-Verbose "$regkeyUser exists: $(Test-Path $regkeyUser)" -verbose:$verbose
Write-Verbose "UseMSDSC Enabled: $($UserUseMSDSC)" -verbose:$verbose

#Override Write-Host for MSDSC
if ((Test-Path $regkeyUser) -and ($UserUseMSDSC)) {
	
	function Write-Host 
	{
		
		[CmdletBinding()]
	    Param
		(

	        [Parameter(Mandatory = $false, Position = 0)]
	        [Object]$Object,

			[Parameter(Mandatory = $false, Position = 1)]
	        [Object]$Object2,

			[Parameter(Mandatory = $false, Position = 2)]
	        [Object]$Object3,

	        [Switch]$NoNewLine,

	        [ConsoleColor]$ForegroundColor,

	        [ConsoleColor]$BackgroundColor
	
	    )
	
	    #Override default Write-Host...
	    Write-Verbose $Object -verbose:$verbose
	}

	Function Get-Host 
	{

		[CmdletBinding()]
	    Param()

		Return [PSCustomObject]$Width = @{ UI = @{ RawUI = @{ MaxWindowSize = @{ width = 120 } } } }

	}

}

# Import-Module Text
write-host ""
write-host "         Welcome to the HPE OneView POSH Library, v$($script:ModuleVersion.ToString())"
write-host "         -----------------------------------------------------"
write-host ""
write-host " To get a list of available CMDLETs in this library, type :  " -NoNewline
write-host "Get-Command -module HPOneView.200" -foregroundcolor yellow
write-host " To get help for a specific command, type:                   " -NoNewLine
write-host "get-help " -NoNewLine -foregroundcolor yellow
Write-Host "[verb]" -NoNewLine -foregroundcolor red
Write-Host "-HPOV" -NoNewLine -foregroundcolor yellow
Write-Host "[noun]" -foregroundcolor red
write-host " To get extended help for a specific command, type:          " -NoNewLine
write-host "get-help " -NoNewLine -foregroundcolor yellow
Write-Host "[verb]" -NoNewLine -foregroundcolor red
Write-Host "-HPOV" -NoNewLine -foregroundcolor yellow
Write-Host "[noun]" -NoNewLine -foregroundcolor red
Write-Host " -full" -foregroundcolor yellow
write-host " To update the offline help for this module, type:           " -NoNewLine
write-host "Update-Help -module HPOneView.200" -foregroundcolor yellow
Write-Host ""
Write-Host " Module sample scripts are located at: " -NoNewLine
write-host "$(split-path -parent $MyInvocation.MyCommand.Path)\Samples" -ForegroundColor yellow
write-host ""
write-host " If you need further help, please consult one of the following:" -ForegroundColor Green
write-host ""
write-host "  • Get-Help about_HPOneView.200"
write-host "  • Get-Help about_Appliance_Connections"
Write-host "  • Online documentation at https://github.com/HewlettPackard/POSH-HPOneView/wiki"
Write-host "  • Online Issues Tracker at https://github.com/HewlettPackard/POSH-HPOneView/issues"
write-host ""
write-host " (C) Copyright 2013-2015 Hewlett Packard Enterprise Development LP "
if ((Get-Host).UI.RawUI.MaxWindowSize.width -lt 150) {
    write-host ""
    write-host " Note: Set your PowerShell console width to 150 to properly view report output. (Current Max Width: $((Get-Host).UI.RawUI.MaxWindowSize.width))" -ForegroundColor Green
}
write-host ""

#######################################################
#  Remove-Module Processing
#

$ExecutionContext.SessionState.Module.OnRemove = {

    Write-Verbose "[$($MyInvocation.InvocationName.ToString().ToUpper())] Cleaning up"

}


